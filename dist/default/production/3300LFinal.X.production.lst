

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Dec 01 20:28:59 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	text116,global,reloc=2,class=CODE,delta=1
   135                           	psect	text117,global,reloc=2,class=CODE,delta=1
   136                           	psect	text118,global,reloc=2,class=CODE,delta=1
   137                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   138                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1
   144                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   145                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           	psect	idataCOMRAM
   148  003D02                     __pidataCOMRAM:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _heater_set_temp
   152  003D02  4B                 	db	75
   153                           
   154                           	psect	idataBANK0
   155  003174                     __pidataBANK0:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _tempSecond
   159  003174  FF                 	db	255
   160                           
   161                           ;initializer for _wrap
   162  003175  01                 	db	1
   163                           
   164                           ;initializer for _alarm_time
   165  003176  30                 	db	48
   166  003177  30                 	db	48
   167  003178  3A                 	db	58
   168  003179  30                 	db	48
   169  00317A  30                 	db	48
   170  00317B  3A                 	db	58
   171  00317C  30                 	db	48
   172  00317D  30                 	db	48
   173  00317E  00                 	db	0
   174                           
   175                           ;initializer for _date
   176  00317F  30                 	db	48
   177  003180  30                 	db	48
   178  003181  2F                 	db	47
   179  003182  30                 	db	48
   180  003183  30                 	db	48
   181  003184  2F                 	db	47
   182  003185  30                 	db	48
   183  003186  30                 	db	48
   184  003187  00                 	db	0
   185                           
   186                           ;initializer for _setup_alarm_time
   187  003188  30                 	db	48
   188  003189  30                 	db	48
   189  00318A  3A                 	db	58
   190  00318B  30                 	db	48
   191  00318C  30                 	db	48
   192  00318D  3A                 	db	58
   193  00318E  30                 	db	48
   194  00318F  30                 	db	48
   195  003190  00                 	db	0
   196                           
   197                           ;initializer for _setup_date
   198  003191  30                 	db	48
   199  003192  31                 	db	49
   200  003193  2F                 	db	47
   201  003194  30                 	db	48
   202  003195  31                 	db	49
   203  003196  2F                 	db	47
   204  003197  30                 	db	48
   205  003198  30                 	db	48
   206  003199  00                 	db	0
   207                           
   208                           ;initializer for _setup_time
   209  00319A  30                 	db	48
   210  00319B  30                 	db	48
   211  00319C  3A                 	db	58
   212  00319D  30                 	db	48
   213  00319E  30                 	db	48
   214  00319F  3A                 	db	58
   215  0031A0  30                 	db	48
   216  0031A1  30                 	db	48
   217  0031A2  00                 	db	0
   218                           
   219                           ;initializer for _time
   220  0031A3  30                 	db	48
   221  0031A4  30                 	db	48
   222  0031A5  3A                 	db	58
   223  0031A6  30                 	db	48
   224  0031A7  30                 	db	48
   225  0031A8  3A                 	db	58
   226  0031A9  30                 	db	48
   227  0031AA  30                 	db	48
   228  0031AB  00                 	db	0
   229                           
   230                           ;initializer for _Volt_Txt
   231  0031AC  30                 	db	48
   232  0031AD  2E                 	db	46
   233  0031AE  30                 	db	48
   234  0031AF  30                 	db	48
   235  0031B0  56                 	db	86
   236  0031B1  00                 	db	0
   237                           
   238                           ;initializer for _Heater_Set_Temp_Txt
   239  0031B2  30                 	db	48
   240  0031B3  37                 	db	55
   241  0031B4  35                 	db	53
   242  0031B5  46                 	db	70
   243  0031B6  00                 	db	0
   244                           
   245                           ;initializer for _RPM_Txt
   246  0031B7  30                 	db	48
   247  0031B8  30                 	db	48
   248  0031B9  30                 	db	48
   249  0031BA  30                 	db	48
   250  0031BB  00                 	db	0
   251                           
   252                           ;initializer for _setup_heater_set_text
   253  0031BC  30                 	db	48
   254  0031BD  37                 	db	55
   255  0031BE  35                 	db	53
   256  0031BF  46                 	db	70
   257  0031C0  00                 	db	0
   258                           
   259                           ;initializer for _Alarm_SW_Txt
   260  0031C1  4F                 	db	79
   261  0031C2  46                 	db	70
   262  0031C3  46                 	db	70
   263  0031C4  00                 	db	0
   264                           
   265                           ;initializer for _DC_Txt
   266  0031C5  30                 	db	48
   267  0031C6  30                 	db	48
   268  0031C7  30                 	db	48
   269  0031C8  00                 	db	0
   270                           
   271                           ;initializer for _Heater_SW_Txt
   272  0031C9  4F                 	db	79
   273  0031CA  46                 	db	70
   274  0031CB  46                 	db	70
   275  0031CC  00                 	db	0
   276                           
   277                           ;initializer for _tempC
   278  0031CD  2B                 	db	43
   279  0031CE  32                 	db	50
   280  0031CF  35                 	db	53
   281  0031D0  00                 	db	0
   282                           
   283                           ;initializer for _tempF
   284  0031D1  2B                 	db	43
   285  0031D2  37                 	db	55
   286  0031D3  37                 	db	55
   287  0031D4  00                 	db	0
   288                           
   289                           ;initializer for _RTC_ALARM_Txt
   290  0031D5  30                 	db	48
   291  0031D6  00                 	db	0
   292                           
   293                           	psect	idataBANK1
   294  003782                     __pidataBANK1:
   295                           	opt stack 0
   296                           
   297                           ;initializer for _buffer
   298  003782  20                 	db	32
   299  003783  45                 	db	69
   300  003784  43                 	db	67
   301  003785  45                 	db	69
   302  003786  33                 	db	51
   303  003787  33                 	db	51
   304  003788  30                 	db	48
   305  003789  31                 	db	49
   306  00378A  4C                 	db	76
   307  00378B  20                 	db	32
   308  00378C  46                 	db	70
   309  00378D  27                 	db	39
   310  00378E  32                 	db	50
   311  00378F  31                 	db	49
   312  003790  20                 	db	32
   313  003791  46                 	db	70
   314  003792  69                 	db	105
   315  003793  6E                 	db	110
   316  003794  61                 	db	97
   317  003795  6C                 	db	108
   318  003796  00                 	db	0
   319  003797  00                 	db	0
   320  003798  00                 	db	0
   321  003799  00                 	db	0
   322  00379A  00                 	db	0
   323  00379B  00                 	db	0
   324  00379C  00                 	db	0
   325  00379D  00                 	db	0
   326  00379E  00                 	db	0
   327  00379F  00                 	db	0
   328  0037A0  00                 	db	0
   329                           
   330                           ;initializer for _array1
   331  0037A1  A2                 	db	162
   332  0037A2  62                 	db	98
   333  0037A3  E2                 	db	226
   334  0037A4  22                 	db	34
   335  0037A5  02                 	db	2
   336  0037A6  C2                 	db	194
   337  0037A7  E0                 	db	224
   338  0037A8  A8                 	db	168
   339  0037A9  90                 	db	144
   340  0037AA  68                 	db	104
   341  0037AB  98                 	db	152
   342  0037AC  B0                 	db	176
   343  0037AD  30                 	db	48
   344  0037AE  18                 	db	24
   345  0037AF  7A                 	db	122
   346  0037B0  10                 	db	16
   347  0037B1  38                 	db	56
   348  0037B2  5A                 	db	90
   349  0037B3  42                 	db	66
   350  0037B4  4A                 	db	74
   351  0037B5  52                 	db	82
   352                           
   353                           	psect	mediumconst
   354  00FC9C                     __pmediumconst:
   355                           	opt stack 0
   356  00FC9C  00                 	db	0
   357  00FC9D                     _font:
   358                           	opt stack 0
   359  00FC9D  00                 	db	0
   360  00FC9E  00                 	db	0
   361  00FC9F  00                 	db	0
   362  00FCA0  00                 	db	0
   363  00FCA1  00                 	db	0
   364  00FCA2  00                 	db	0
   365  00FCA3  00                 	db	0
   366  00FCA4  5F                 	db	95
   367  00FCA5  00                 	db	0
   368  00FCA6  00                 	db	0
   369  00FCA7  00                 	db	0
   370  00FCA8  07                 	db	7
   371  00FCA9  00                 	db	0
   372  00FCAA  07                 	db	7
   373  00FCAB  00                 	db	0
   374  00FCAC  14                 	db	20
   375  00FCAD  7F                 	db	127
   376  00FCAE  14                 	db	20
   377  00FCAF  7F                 	db	127
   378  00FCB0  14                 	db	20
   379  00FCB1  24                 	db	36
   380  00FCB2  2A                 	db	42
   381  00FCB3  7F                 	db	127
   382  00FCB4  2A                 	db	42
   383  00FCB5  12                 	db	18
   384  00FCB6  23                 	db	35
   385  00FCB7  13                 	db	19
   386  00FCB8  08                 	db	8
   387  00FCB9  64                 	db	100
   388  00FCBA  62                 	db	98
   389  00FCBB  36                 	db	54
   390  00FCBC  49                 	db	73
   391  00FCBD  56                 	db	86
   392  00FCBE  20                 	db	32
   393  00FCBF  50                 	db	80
   394  00FCC0  00                 	db	0
   395  00FCC1  08                 	db	8
   396  00FCC2  07                 	db	7
   397  00FCC3  03                 	db	3
   398  00FCC4  00                 	db	0
   399  00FCC5  00                 	db	0
   400  00FCC6  1C                 	db	28
   401  00FCC7  22                 	db	34
   402  00FCC8  41                 	db	65
   403  00FCC9  00                 	db	0
   404  00FCCA  00                 	db	0
   405  00FCCB  41                 	db	65
   406  00FCCC  22                 	db	34
   407  00FCCD  1C                 	db	28
   408  00FCCE  00                 	db	0
   409  00FCCF  2A                 	db	42
   410  00FCD0  1C                 	db	28
   411  00FCD1  7F                 	db	127
   412  00FCD2  1C                 	db	28
   413  00FCD3  2A                 	db	42
   414  00FCD4  08                 	db	8
   415  00FCD5  08                 	db	8
   416  00FCD6  3E                 	db	62
   417  00FCD7  08                 	db	8
   418  00FCD8  08                 	db	8
   419  00FCD9  00                 	db	0
   420  00FCDA  80                 	db	128
   421  00FCDB  70                 	db	112
   422  00FCDC  30                 	db	48
   423  00FCDD  00                 	db	0
   424  00FCDE  08                 	db	8
   425  00FCDF  08                 	db	8
   426  00FCE0  08                 	db	8
   427  00FCE1  08                 	db	8
   428  00FCE2  08                 	db	8
   429  00FCE3  00                 	db	0
   430  00FCE4  00                 	db	0
   431  00FCE5  60                 	db	96
   432  00FCE6  60                 	db	96
   433  00FCE7  00                 	db	0
   434  00FCE8  20                 	db	32
   435  00FCE9  10                 	db	16
   436  00FCEA  08                 	db	8
   437  00FCEB  04                 	db	4
   438  00FCEC  02                 	db	2
   439  00FCED  3E                 	db	62
   440  00FCEE  51                 	db	81
   441  00FCEF  49                 	db	73
   442  00FCF0  45                 	db	69
   443  00FCF1  3E                 	db	62
   444  00FCF2  00                 	db	0
   445  00FCF3  42                 	db	66
   446  00FCF4  7F                 	db	127
   447  00FCF5  40                 	db	64
   448  00FCF6  00                 	db	0
   449  00FCF7  72                 	db	114
   450  00FCF8  49                 	db	73
   451  00FCF9  49                 	db	73
   452  00FCFA  49                 	db	73
   453  00FCFB  46                 	db	70
   454  00FCFC  21                 	db	33
   455  00FCFD  41                 	db	65
   456  00FCFE  49                 	db	73
   457  00FCFF  4D                 	db	77
   458  00FD00  33                 	db	51
   459  00FD01  18                 	db	24
   460  00FD02  14                 	db	20
   461  00FD03  12                 	db	18
   462  00FD04  7F                 	db	127
   463  00FD05  10                 	db	16
   464  00FD06  27                 	db	39
   465  00FD07  45                 	db	69
   466  00FD08  45                 	db	69
   467  00FD09  45                 	db	69
   468  00FD0A  39                 	db	57
   469  00FD0B  3C                 	db	60
   470  00FD0C  4A                 	db	74
   471  00FD0D  49                 	db	73
   472  00FD0E  49                 	db	73
   473  00FD0F  31                 	db	49
   474  00FD10  41                 	db	65
   475  00FD11  21                 	db	33
   476  00FD12  11                 	db	17
   477  00FD13  09                 	db	9
   478  00FD14  07                 	db	7
   479  00FD15  36                 	db	54
   480  00FD16  49                 	db	73
   481  00FD17  49                 	db	73
   482  00FD18  49                 	db	73
   483  00FD19  36                 	db	54
   484  00FD1A  46                 	db	70
   485  00FD1B  49                 	db	73
   486  00FD1C  49                 	db	73
   487  00FD1D  29                 	db	41
   488  00FD1E  1E                 	db	30
   489  00FD1F  00                 	db	0
   490  00FD20  00                 	db	0
   491  00FD21  14                 	db	20
   492  00FD22  00                 	db	0
   493  00FD23  00                 	db	0
   494  00FD24  00                 	db	0
   495  00FD25  40                 	db	64
   496  00FD26  34                 	db	52
   497  00FD27  00                 	db	0
   498  00FD28  00                 	db	0
   499  00FD29  00                 	db	0
   500  00FD2A  08                 	db	8
   501  00FD2B  14                 	db	20
   502  00FD2C  22                 	db	34
   503  00FD2D  41                 	db	65
   504  00FD2E  14                 	db	20
   505  00FD2F  14                 	db	20
   506  00FD30  14                 	db	20
   507  00FD31  14                 	db	20
   508  00FD32  14                 	db	20
   509  00FD33  00                 	db	0
   510  00FD34  41                 	db	65
   511  00FD35  22                 	db	34
   512  00FD36  14                 	db	20
   513  00FD37  08                 	db	8
   514  00FD38  02                 	db	2
   515  00FD39  01                 	db	1
   516  00FD3A  59                 	db	89
   517  00FD3B  09                 	db	9
   518  00FD3C  06                 	db	6
   519  00FD3D  3E                 	db	62
   520  00FD3E  41                 	db	65
   521  00FD3F  5D                 	db	93
   522  00FD40  59                 	db	89
   523  00FD41  4E                 	db	78
   524  00FD42  7C                 	db	124
   525  00FD43  12                 	db	18
   526  00FD44  11                 	db	17
   527  00FD45  12                 	db	18
   528  00FD46  7C                 	db	124
   529  00FD47  7F                 	db	127
   530  00FD48  49                 	db	73
   531  00FD49  49                 	db	73
   532  00FD4A  49                 	db	73
   533  00FD4B  36                 	db	54
   534  00FD4C  3E                 	db	62
   535  00FD4D  41                 	db	65
   536  00FD4E  41                 	db	65
   537  00FD4F  41                 	db	65
   538  00FD50  22                 	db	34
   539  00FD51  7F                 	db	127
   540  00FD52  41                 	db	65
   541  00FD53  41                 	db	65
   542  00FD54  41                 	db	65
   543  00FD55  3E                 	db	62
   544  00FD56  7F                 	db	127
   545  00FD57  49                 	db	73
   546  00FD58  49                 	db	73
   547  00FD59  49                 	db	73
   548  00FD5A  41                 	db	65
   549  00FD5B  7F                 	db	127
   550  00FD5C  09                 	db	9
   551  00FD5D  09                 	db	9
   552  00FD5E  09                 	db	9
   553  00FD5F  01                 	db	1
   554  00FD60  3E                 	db	62
   555  00FD61  41                 	db	65
   556  00FD62  41                 	db	65
   557  00FD63  51                 	db	81
   558  00FD64  73                 	db	115
   559  00FD65  7F                 	db	127
   560  00FD66  08                 	db	8
   561  00FD67  08                 	db	8
   562  00FD68  08                 	db	8
   563  00FD69  7F                 	db	127
   564  00FD6A  00                 	db	0
   565  00FD6B  41                 	db	65
   566  00FD6C  7F                 	db	127
   567  00FD6D  41                 	db	65
   568  00FD6E  00                 	db	0
   569  00FD6F  20                 	db	32
   570  00FD70  40                 	db	64
   571  00FD71  41                 	db	65
   572  00FD72  3F                 	db	63
   573  00FD73  01                 	db	1
   574  00FD74  7F                 	db	127
   575  00FD75  08                 	db	8
   576  00FD76  14                 	db	20
   577  00FD77  22                 	db	34
   578  00FD78  41                 	db	65
   579  00FD79  7F                 	db	127
   580  00FD7A  40                 	db	64
   581  00FD7B  40                 	db	64
   582  00FD7C  40                 	db	64
   583  00FD7D  40                 	db	64
   584  00FD7E  7F                 	db	127
   585  00FD7F  02                 	db	2
   586  00FD80  1C                 	db	28
   587  00FD81  02                 	db	2
   588  00FD82  7F                 	db	127
   589  00FD83  7F                 	db	127
   590  00FD84  04                 	db	4
   591  00FD85  08                 	db	8
   592  00FD86  10                 	db	16
   593  00FD87  7F                 	db	127
   594  00FD88  3E                 	db	62
   595  00FD89  41                 	db	65
   596  00FD8A  41                 	db	65
   597  00FD8B  41                 	db	65
   598  00FD8C  3E                 	db	62
   599  00FD8D  7F                 	db	127
   600  00FD8E  09                 	db	9
   601  00FD8F  09                 	db	9
   602  00FD90  09                 	db	9
   603  00FD91  06                 	db	6
   604  00FD92  3E                 	db	62
   605  00FD93  41                 	db	65
   606  00FD94  51                 	db	81
   607  00FD95  21                 	db	33
   608  00FD96  5E                 	db	94
   609  00FD97  7F                 	db	127
   610  00FD98  09                 	db	9
   611  00FD99  19                 	db	25
   612  00FD9A  29                 	db	41
   613  00FD9B  46                 	db	70
   614  00FD9C                     __end_of_font:
   615                           	opt stack 0
   616  00FD9C                     _font2:
   617                           	opt stack 0
   618  00FD9C  26                 	db	38
   619  00FD9D  49                 	db	73
   620  00FD9E  49                 	db	73
   621  00FD9F  49                 	db	73
   622  00FDA0  32                 	db	50
   623  00FDA1  03                 	db	3
   624  00FDA2  01                 	db	1
   625  00FDA3  7F                 	db	127
   626  00FDA4  01                 	db	1
   627  00FDA5  03                 	db	3
   628  00FDA6  3F                 	db	63
   629  00FDA7  40                 	db	64
   630  00FDA8  40                 	db	64
   631  00FDA9  40                 	db	64
   632  00FDAA  3F                 	db	63
   633  00FDAB  1F                 	db	31
   634  00FDAC  20                 	db	32
   635  00FDAD  40                 	db	64
   636  00FDAE  20                 	db	32
   637  00FDAF  1F                 	db	31
   638  00FDB0  3F                 	db	63
   639  00FDB1  40                 	db	64
   640  00FDB2  38                 	db	56
   641  00FDB3  40                 	db	64
   642  00FDB4  3F                 	db	63
   643  00FDB5  63                 	db	99
   644  00FDB6  14                 	db	20
   645  00FDB7  08                 	db	8
   646  00FDB8  14                 	db	20
   647  00FDB9  63                 	db	99
   648  00FDBA  03                 	db	3
   649  00FDBB  04                 	db	4
   650  00FDBC  78                 	db	120
   651  00FDBD  04                 	db	4
   652  00FDBE  03                 	db	3
   653  00FDBF  61                 	db	97
   654  00FDC0  59                 	db	89
   655  00FDC1  49                 	db	73
   656  00FDC2  4D                 	db	77
   657  00FDC3  43                 	db	67
   658  00FDC4  00                 	db	0
   659  00FDC5  7F                 	db	127
   660  00FDC6  41                 	db	65
   661  00FDC7  41                 	db	65
   662  00FDC8  41                 	db	65
   663  00FDC9  02                 	db	2
   664  00FDCA  04                 	db	4
   665  00FDCB  08                 	db	8
   666  00FDCC  10                 	db	16
   667  00FDCD  20                 	db	32
   668  00FDCE  00                 	db	0
   669  00FDCF  41                 	db	65
   670  00FDD0  41                 	db	65
   671  00FDD1  41                 	db	65
   672  00FDD2  7F                 	db	127
   673  00FDD3  04                 	db	4
   674  00FDD4  02                 	db	2
   675  00FDD5  01                 	db	1
   676  00FDD6  02                 	db	2
   677  00FDD7  04                 	db	4
   678  00FDD8  40                 	db	64
   679  00FDD9  40                 	db	64
   680  00FDDA  40                 	db	64
   681  00FDDB  40                 	db	64
   682  00FDDC  40                 	db	64
   683  00FDDD  00                 	db	0
   684  00FDDE  03                 	db	3
   685  00FDDF  07                 	db	7
   686  00FDE0  08                 	db	8
   687  00FDE1  00                 	db	0
   688  00FDE2  20                 	db	32
   689  00FDE3  54                 	db	84
   690  00FDE4  54                 	db	84
   691  00FDE5  78                 	db	120
   692  00FDE6  40                 	db	64
   693  00FDE7  7F                 	db	127
   694  00FDE8  28                 	db	40
   695  00FDE9  44                 	db	68
   696  00FDEA  44                 	db	68
   697  00FDEB  38                 	db	56
   698  00FDEC  38                 	db	56
   699  00FDED  44                 	db	68
   700  00FDEE  44                 	db	68
   701  00FDEF  44                 	db	68
   702  00FDF0  28                 	db	40
   703  00FDF1  38                 	db	56
   704  00FDF2  44                 	db	68
   705  00FDF3  44                 	db	68
   706  00FDF4  28                 	db	40
   707  00FDF5  7F                 	db	127
   708  00FDF6  38                 	db	56
   709  00FDF7  54                 	db	84
   710  00FDF8  54                 	db	84
   711  00FDF9  54                 	db	84
   712  00FDFA  18                 	db	24
   713  00FDFB  00                 	db	0
   714  00FDFC  08                 	db	8
   715  00FDFD  7E                 	db	126
   716  00FDFE  09                 	db	9
   717  00FDFF  02                 	db	2
   718  00FE00  18                 	db	24
   719  00FE01  A4                 	db	164
   720  00FE02  A4                 	db	164
   721  00FE03  9C                 	db	156
   722  00FE04  78                 	db	120
   723  00FE05  7F                 	db	127
   724  00FE06  08                 	db	8
   725  00FE07  04                 	db	4
   726  00FE08  04                 	db	4
   727  00FE09  78                 	db	120
   728  00FE0A  00                 	db	0
   729  00FE0B  44                 	db	68
   730  00FE0C  7D                 	db	125
   731  00FE0D  40                 	db	64
   732  00FE0E  00                 	db	0
   733  00FE0F  20                 	db	32
   734  00FE10  40                 	db	64
   735  00FE11  40                 	db	64
   736  00FE12  3D                 	db	61
   737  00FE13  00                 	db	0
   738  00FE14  7F                 	db	127
   739  00FE15  10                 	db	16
   740  00FE16  28                 	db	40
   741  00FE17  44                 	db	68
   742  00FE18  00                 	db	0
   743  00FE19  00                 	db	0
   744  00FE1A  41                 	db	65
   745  00FE1B  7F                 	db	127
   746  00FE1C  40                 	db	64
   747  00FE1D  00                 	db	0
   748  00FE1E  7C                 	db	124
   749  00FE1F  04                 	db	4
   750  00FE20  78                 	db	120
   751  00FE21  04                 	db	4
   752  00FE22  78                 	db	120
   753  00FE23  7C                 	db	124
   754  00FE24  08                 	db	8
   755  00FE25  04                 	db	4
   756  00FE26  04                 	db	4
   757  00FE27  78                 	db	120
   758  00FE28  38                 	db	56
   759  00FE29  44                 	db	68
   760  00FE2A  44                 	db	68
   761  00FE2B  44                 	db	68
   762  00FE2C  38                 	db	56
   763  00FE2D  FC                 	db	252
   764  00FE2E  18                 	db	24
   765  00FE2F  24                 	db	36
   766  00FE30  24                 	db	36
   767  00FE31  18                 	db	24
   768  00FE32  18                 	db	24
   769  00FE33  24                 	db	36
   770  00FE34  24                 	db	36
   771  00FE35  18                 	db	24
   772  00FE36  FC                 	db	252
   773  00FE37  7C                 	db	124
   774  00FE38  08                 	db	8
   775  00FE39  04                 	db	4
   776  00FE3A  04                 	db	4
   777  00FE3B  08                 	db	8
   778  00FE3C  48                 	db	72
   779  00FE3D  54                 	db	84
   780  00FE3E  54                 	db	84
   781  00FE3F  54                 	db	84
   782  00FE40  24                 	db	36
   783  00FE41  04                 	db	4
   784  00FE42  04                 	db	4
   785  00FE43  3F                 	db	63
   786  00FE44  44                 	db	68
   787  00FE45  24                 	db	36
   788  00FE46  3C                 	db	60
   789  00FE47  40                 	db	64
   790  00FE48  40                 	db	64
   791  00FE49  20                 	db	32
   792  00FE4A  7C                 	db	124
   793  00FE4B  1C                 	db	28
   794  00FE4C  20                 	db	32
   795  00FE4D  40                 	db	64
   796  00FE4E  20                 	db	32
   797  00FE4F  1C                 	db	28
   798  00FE50  3C                 	db	60
   799  00FE51  40                 	db	64
   800  00FE52  30                 	db	48
   801  00FE53  40                 	db	64
   802  00FE54  3C                 	db	60
   803  00FE55  44                 	db	68
   804  00FE56  28                 	db	40
   805  00FE57  10                 	db	16
   806  00FE58  28                 	db	40
   807  00FE59  44                 	db	68
   808  00FE5A  4C                 	db	76
   809  00FE5B  90                 	db	144
   810  00FE5C  90                 	db	144
   811  00FE5D  90                 	db	144
   812  00FE5E  7C                 	db	124
   813  00FE5F  44                 	db	68
   814  00FE60  64                 	db	100
   815  00FE61  54                 	db	84
   816  00FE62  4C                 	db	76
   817  00FE63  44                 	db	68
   818  00FE64  00                 	db	0
   819  00FE65  08                 	db	8
   820  00FE66  36                 	db	54
   821  00FE67  41                 	db	65
   822  00FE68  00                 	db	0
   823  00FE69  00                 	db	0
   824  00FE6A  00                 	db	0
   825  00FE6B  77                 	db	119
   826  00FE6C  00                 	db	0
   827  00FE6D  00                 	db	0
   828  00FE6E  00                 	db	0
   829  00FE6F  41                 	db	65
   830  00FE70  36                 	db	54
   831  00FE71  08                 	db	8
   832  00FE72  00                 	db	0
   833  00FE73  02                 	db	2
   834  00FE74  01                 	db	1
   835  00FE75  02                 	db	2
   836  00FE76  04                 	db	4
   837  00FE77  02                 	db	2
   838  00FE78                     __end_of_font2:
   839                           	opt stack 0
   840  00FE78                     _dpowers:
   841                           	opt stack 0
   842  00FE78  0001               	dw	1
   843  00FE7A  000A               	dw	10
   844  00FE7C  0064               	dw	100
   845  00FE7E  03E8               	dw	1000
   846  00FE80  2710               	dw	10000
   847  00FE82                     __end_of_dpowers:
   848                           	opt stack 0
   849  00FE82                     _hexpowers:
   850                           	opt stack 0
   851  00FE82  0001               	dw	1
   852  00FE84  0010               	dw	16
   853  00FE86  0100               	dw	256
   854  00FE88  1000               	dw	4096
   855  00FE8A                     __end_of_hexpowers:
   856                           	opt stack 0
   857  0000                     _ADCON0	set	4034
   858  0000                     _ADCON0bits	set	4034
   859  0000                     _ADCON1	set	4033
   860  0000                     _ADCON2	set	4032
   861  0000                     _ADRESH	set	4036
   862  0000                     _ADRESL	set	4035
   863  0000                     _CCP1CON	set	4029
   864  0000                     _CCP2CON	set	4026
   865  0000                     _CCPR1L	set	4030
   866  0000                     _CCPR2L	set	4027
   867  0000                     _INTCON2bits	set	4081
   868  0000                     _INTCON3bits	set	4080
   869  0000                     _INTCONbits	set	4082
   870  0000                     _OSCCON	set	4051
   871  0000                     _PIE1bits	set	3997
   872  0000                     _PIR1bits	set	3998
   873  0000                     _PORTAbits	set	3968
   874  0000                     _PORTBbits	set	3969
   875  0000                     _PORTDbits	set	3971
   876  0000                     _PORTE	set	3972
   877  0000                     _PORTEbits	set	3972
   878  0000                     _PR2	set	4043
   879  0000                     _RCSTA	set	4011
   880  0000                     _RCSTAbits	set	4011
   881  0000                     _SPBRG	set	4015
   882  0000                     _SPBRGH	set	4016
   883  0000                     _SSPBUF	set	4041
   884  0000                     _SSPCON1	set	4038
   885  0000                     _SSPSTAT	set	4039
   886  0000                     _SSPSTATbits	set	4039
   887  0000                     _T0CON	set	4053
   888  0000                     _T0CONbits	set	4053
   889  0000                     _T1CON	set	4045
   890  0000                     _T1CONbits	set	4045
   891  0000                     _T2CON	set	4042
   892  0000                     _T3CON	set	4017
   893  0000                     _TMR0H	set	4055
   894  0000                     _TMR0L	set	4054
   895  0000                     _TMR1H	set	4047
   896  0000                     _TMR1L	set	4046
   897  0000                     _TMR3L	set	4018
   898  0000                     _TRISA	set	3986
   899  0000                     _TRISB	set	3987
   900  0000                     _TRISC	set	3988
   901  0000                     _TRISCbits	set	3988
   902  0000                     _TRISD	set	3989
   903  0000                     _TRISDbits	set	3989
   904  0000                     _TRISE	set	3990
   905  0000                     _TXREG	set	4013
   906  0000                     _TXSTA	set	4012
   907  0000                     _TXSTAbits	set	4012
   908  0000                     _RBPU	set	32655
   909  0000                     _TRMT	set	32097
   910  00FE8A                     STR_1:
   911  00FE8A  25                 	db	37
   912  00FE8B  30                 	db	48	;'0'
   913  00FE8C  32                 	db	50	;'2'
   914  00FE8D  78                 	db	120	;'x'
   915  00FE8E  3A                 	db	58	;':'
   916  00FE8F  25                 	db	37
   917  00FE90  30                 	db	48	;'0'
   918  00FE91  32                 	db	50	;'2'
   919  00FE92  78                 	db	120	;'x'
   920  00FE93  3A                 	db	58	;':'
   921  00FE94  25                 	db	37
   922  00FE95  30                 	db	48	;'0'
   923  00FE96  32                 	db	50	;'2'
   924  00FE97  78                 	db	120	;'x'
   925  00FE98  20                 	db	32
   926  00FE99  25                 	db	37
   927  00FE9A  30                 	db	48	;'0'
   928  00FE9B  32                 	db	50	;'2'
   929  00FE9C  78                 	db	120	;'x'
   930  00FE9D  2F                 	db	47
   931  00FE9E  25                 	db	37
   932  00FE9F  30                 	db	48	;'0'
   933  00FEA0  32                 	db	50	;'2'
   934  00FEA1  78                 	db	120	;'x'
   935  00FEA2  2F                 	db	47
   936  00FEA3  25                 	db	37
   937  00FEA4  30                 	db	48	;'0'
   938  00FEA5  32                 	db	50	;'2'
   939  00FEA6  78                 	db	120	;'x'
   940  00FEA7  00                 	db	0
   941  00FEA8                     STR_3:
   942  00FEA8  61                 	db	97	;'a'
   943  00FEA9  6C                 	db	108	;'l'
   944  00FEAA  61                 	db	97	;'a'
   945  00FEAB  72                 	db	114	;'r'
   946  00FEAC  6D                 	db	109	;'m'
   947  00FEAD  20                 	db	32
   948  00FEAE  3D                 	db	61	;'='
   949  00FEAF  20                 	db	32
   950  00FEB0  25                 	db	37
   951  00FEB1  64                 	db	100	;'d'
   952  00FEB2  20                 	db	32
   953  00FEB3  48                 	db	72	;'H'
   954  00FEB4  65                 	db	101	;'e'
   955  00FEB5  61                 	db	97	;'a'
   956  00FEB6  74                 	db	116	;'t'
   957  00FEB7  65                 	db	101	;'e'
   958  00FEB8  72                 	db	114	;'r'
   959  00FEB9  20                 	db	32
   960  00FEBA  3D                 	db	61	;'='
   961  00FEBB  20                 	db	32
   962  00FEBC  25                 	db	37
   963  00FEBD  64                 	db	100	;'d'
   964  00FEBE  20                 	db	32
   965  00FEBF  00                 	db	0
   966  00FEC0                     STR_37:
   967  00FEC0  43                 	db	67	;'C'
   968  00FEC1  61                 	db	97	;'a'
   969  00FEC2  6E                 	db	110	;'n'
   970  00FEC3  6E                 	db	110	;'n'
   971  00FEC4  6F                 	db	111	;'o'
   972  00FEC5  74                 	db	116	;'t'
   973  00FEC6  20                 	db	32
   974  00FEC7  66                 	db	102	;'f'
   975  00FEC8  69                 	db	105	;'i'
   976  00FEC9  6E                 	db	110	;'n'
   977  00FECA  64                 	db	100	;'d'
   978  00FECB  20                 	db	32
   979  00FECC  62                 	db	98	;'b'
   980  00FECD  75                 	db	117	;'u'
   981  00FECE  74                 	db	116	;'t'
   982  00FECF  74                 	db	116	;'t'
   983  00FED0  6F                 	db	111	;'o'
   984  00FED1  6E                 	db	110	;'n'
   985  00FED2  20                 	db	32
   986  00FED3  0D                 	db	13
   987  00FED4  0A                 	db	10
   988  00FED5  00                 	db	0
   989  00FED6                     STR_5:
   990  00FED6  20                 	db	32
   991  00FED7  45                 	db	69	;'E'
   992  00FED8  43                 	db	67	;'C'
   993  00FED9  45                 	db	69	;'E'
   994  00FEDA  33                 	db	51	;'3'
   995  00FEDB  33                 	db	51	;'3'
   996  00FEDC  30                 	db	48	;'0'
   997  00FEDD  31                 	db	49	;'1'
   998  00FEDE  4C                 	db	76	;'L'
   999  00FEDF  20                 	db	32
  1000  00FEE0  46                 	db	70	;'F'
  1001  00FEE1  27                 	db	39
  1002  00FEE2  32                 	db	50	;'2'
  1003  00FEE3  31                 	db	49	;'1'
  1004  00FEE4  20                 	db	32
  1005  00FEE5  46                 	db	70	;'F'
  1006  00FEE6  69                 	db	105	;'i'
  1007  00FEE7  6E                 	db	110	;'n'
  1008  00FEE8  61                 	db	97	;'a'
  1009  00FEE9  6C                 	db	108	;'l'
  1010  00FEEA  00                 	db	0
  1011  00FEEB  00                 	db	0
  1012  00FEEC                     STR_32:
  1013  00FEEC  45                 	db	69	;'E'
  1014  00FEED  43                 	db	67	;'C'
  1015  00FEEE  45                 	db	69	;'E'
  1016  00FEEF  33                 	db	51	;'3'
  1017  00FEF0  33                 	db	51	;'3'
  1018  00FEF1  30                 	db	48	;'0'
  1019  00FEF2  31                 	db	49	;'1'
  1020  00FEF3  4C                 	db	76	;'L'
  1021  00FEF4  20                 	db	32
  1022  00FEF5  46                 	db	70	;'F'
  1023  00FEF6  3B                 	db	59	;';'
  1024  00FEF7  32                 	db	50	;'2'
  1025  00FEF8  31                 	db	49	;'1'
  1026  00FEF9  20                 	db	32
  1027  00FEFA  46                 	db	70	;'F'
  1028  00FEFB  69                 	db	105	;'i'
  1029  00FEFC  6E                 	db	110	;'n'
  1030  00FEFD  61                 	db	97	;'a'
  1031  00FEFE  6C                 	db	108	;'l'
  1032  00FEFF  00                 	db	0
  1033  00FF00  00                 	db	0
  1034  00FF01                     STR_2:
  1035  00FF01  20                 	db	32
  1036  00FF02  54                 	db	84	;'T'
  1037  00FF03  65                 	db	101	;'e'
  1038  00FF04  6D                 	db	109	;'m'
  1039  00FF05  70                 	db	112	;'p'
  1040  00FF06  20                 	db	32
  1041  00FF07  3D                 	db	61	;'='
  1042  00FF08  20                 	db	32
  1043  00FF09  25                 	db	37
  1044  00FF0A  64                 	db	100	;'d'
  1045  00FF0B  20                 	db	32
  1046  00FF0C  43                 	db	67	;'C'
  1047  00FF0D  20                 	db	32
  1048  00FF0E  3D                 	db	61	;'='
  1049  00FF0F  20                 	db	32
  1050  00FF10  25                 	db	37
  1051  00FF11  64                 	db	100	;'d'
  1052  00FF12  20                 	db	32
  1053  00FF13  46                 	db	70	;'F'
  1054  00FF14  20                 	db	32
  1055  00FF15  00                 	db	0
  1056  00FF16                     STR_23:
  1057  00FF16  45                 	db	69	;'E'
  1058  00FF17  43                 	db	67	;'C'
  1059  00FF18  45                 	db	69	;'E'
  1060  00FF19  33                 	db	51	;'3'
  1061  00FF1A  33                 	db	51	;'3'
  1062  00FF1B  30                 	db	48	;'0'
  1063  00FF1C  31                 	db	49	;'1'
  1064  00FF1D  4C                 	db	76	;'L'
  1065  00FF1E  20                 	db	32
  1066  00FF1F  46                 	db	70	;'F'
  1067  00FF20  27                 	db	39
  1068  00FF21  32                 	db	50	;'2'
  1069  00FF22  31                 	db	49	;'1'
  1070  00FF23  20                 	db	32
  1071  00FF24  46                 	db	70	;'F'
  1072  00FF25  69                 	db	105	;'i'
  1073  00FF26  6E                 	db	110	;'n'
  1074  00FF27  61                 	db	97	;'a'
  1075  00FF28  6C                 	db	108	;'l'
  1076  00FF29  00                 	db	0
  1077  00FF2A                     STR_4:
  1078  00FF2A  52                 	db	82	;'R'
  1079  00FF2B  50                 	db	80	;'P'
  1080  00FF2C  4D                 	db	77	;'M'
  1081  00FF2D  20                 	db	32
  1082  00FF2E  3D                 	db	61	;'='
  1083  00FF2F  20                 	db	32
  1084  00FF30  25                 	db	37
  1085  00FF31  64                 	db	100	;'d'
  1086  00FF32  20                 	db	32
  1087  00FF33  20                 	db	32
  1088  00FF34  64                 	db	100	;'d'
  1089  00FF35  63                 	db	99	;'c'
  1090  00FF36  20                 	db	32
  1091  00FF37  3D                 	db	61	;'='
  1092  00FF38  20                 	db	32
  1093  00FF39  25                 	db	37
  1094  00FF3A  64                 	db	100	;'d'
  1095  00FF3B  0D                 	db	13
  1096  00FF3C  0A                 	db	10
  1097  00FF3D  00                 	db	0
  1098  00FF3E                     STR_38:
  1099  00FF3E  30                 	db	48	;'0'
  1100  00FF3F  31                 	db	49	;'1'
  1101  00FF40  32                 	db	50	;'2'
  1102  00FF41  33                 	db	51	;'3'
  1103  00FF42  34                 	db	52	;'4'
  1104  00FF43  35                 	db	53	;'5'
  1105  00FF44  36                 	db	54	;'6'
  1106  00FF45  37                 	db	55	;'7'
  1107  00FF46  38                 	db	56	;'8'
  1108  00FF47  39                 	db	57	;'9'
  1109  00FF48  61                 	db	97	;'a'
  1110  00FF49  62                 	db	98	;'b'
  1111  00FF4A  63                 	db	99	;'c'
  1112  00FF4B  64                 	db	100	;'d'
  1113  00FF4C  65                 	db	101	;'e'
  1114  00FF4D  66                 	db	102	;'f'
  1115  00FF4E  00                 	db	0
  1116  00FF4F                     STR_36:
  1117  00FF4F  4E                 	db	78	;'N'
  1118  00FF50  65                 	db	101	;'e'
  1119  00FF51  63                 	db	99	;'c'
  1120  00FF52  5F                 	db	95	;'_'
  1121  00FF53  63                 	db	99	;'c'
  1122  00FF54  6F                 	db	111	;'o'
  1123  00FF55  64                 	db	100	;'d'
  1124  00FF56  65                 	db	101	;'e'
  1125  00FF57  31                 	db	49	;'1'
  1126  00FF58  3A                 	db	58	;':'
  1127  00FF59  25                 	db	37
  1128  00FF5A  78                 	db	120	;'x'
  1129  00FF5B  0D                 	db	13
  1130  00FF5C  0A                 	db	10
  1131  00FF5D  20                 	db	32
  1132  00FF5E  00                 	db	0
  1133  00FF5F                     STR_31:
  1134  00FF5F  53                 	db	83	;'S'
  1135  00FF60  65                 	db	101	;'e'
  1136  00FF61  74                 	db	116	;'t'
  1137  00FF62  20                 	db	32
  1138  00FF63  48                 	db	72	;'H'
  1139  00FF64  65                 	db	101	;'e'
  1140  00FF65  61                 	db	97	;'a'
  1141  00FF66  74                 	db	116	;'t'
  1142  00FF67  65                 	db	101	;'e'
  1143  00FF68  72                 	db	114	;'r'
  1144  00FF69  20                 	db	32
  1145  00FF6A  54                 	db	84	;'T'
  1146  00FF6B  65                 	db	101	;'e'
  1147  00FF6C  6D                 	db	109	;'m'
  1148  00FF6D  70                 	db	112	;'p'
  1149  00FF6E  00                 	db	0
  1150  00FF6F                     STR_6:
  1151  00FF6F  54                 	db	84	;'T'
  1152  00FF70  65                 	db	101	;'e'
  1153  00FF71  6D                 	db	109	;'m'
  1154  00FF72  70                 	db	112	;'p'
  1155  00FF73  65                 	db	101	;'e'
  1156  00FF74  72                 	db	114	;'r'
  1157  00FF75  61                 	db	97	;'a'
  1158  00FF76  74                 	db	116	;'t'
  1159  00FF77  75                 	db	117	;'u'
  1160  00FF78  72                 	db	114	;'r'
  1161  00FF79  65                 	db	101	;'e'
  1162  00FF7A  3A                 	db	58	;':'
  1163  00FF7B  00                 	db	0
  1164  00FF7C                     STR_13:
  1165  00FF7C  48                 	db	72	;'H'
  1166  00FF7D  54                 	db	84	;'T'
  1167  00FF7E  52                 	db	82	;'R'
  1168  00FF7F  20                 	db	32
  1169  00FF80  53                 	db	83	;'S'
  1170  00FF81  65                 	db	101	;'e'
  1171  00FF82  74                 	db	116	;'t'
  1172  00FF83  20                 	db	32
  1173  00FF84  54                 	db	84	;'T'
  1174  00FF85  65                 	db	101	;'e'
  1175  00FF86  6D                 	db	109	;'m'
  1176  00FF87  70                 	db	112	;'p'
  1177  00FF88  00                 	db	0
  1178  00FF89                     STR_33:
  1179  00FF89  54                 	db	84	;'T'
  1180  00FF8A  69                 	db	105	;'i'
  1181  00FF8B  6D                 	db	109	;'m'
  1182  00FF8C  65                 	db	101	;'e'
  1183  00FF8D  20                 	db	32
  1184  00FF8E  53                 	db	83	;'S'
  1185  00FF8F  65                 	db	101	;'e'
  1186  00FF90  74                 	db	116	;'t'
  1187  00FF91  75                 	db	117	;'u'
  1188  00FF92  70                 	db	112	;'p'
  1189  00FF93  00                 	db	0
  1190  00FF94  00                 	db	0
  1191  00FF95                     STR_29:
  1192  00FF95  20                 	db	32
  1193  00FF96  20                 	db	32
  1194  00FF97  48                 	db	72	;'H'
  1195  00FF98  65                 	db	101	;'e'
  1196  00FF99  61                 	db	97	;'a'
  1197  00FF9A  74                 	db	116	;'t'
  1198  00FF9B  65                 	db	101	;'e'
  1199  00FF9C  72                 	db	114	;'r'
  1200  00FF9D  00                 	db	0
  1201  00FF9E  20                 	db	32
  1202  00FF9F  00                 	db	0
  1203  00FFA0                     STR_27:
  1204  00FFA0  25                 	db	37
  1205  00FFA1  78                 	db	120	;'x'
  1206  00FFA2  3A                 	db	58	;':'
  1207  00FFA3  25                 	db	37
  1208  00FFA4  78                 	db	120	;'x'
  1209  00FFA5  3A                 	db	58	;':'
  1210  00FFA6  25                 	db	37
  1211  00FFA7  78                 	db	120	;'x'
  1212  00FFA8  0D                 	db	13
  1213  00FFA9  0A                 	db	10
  1214  00FFAA  00                 	db	0
  1215  00FFAB                     STR_11:
  1216  00FFAB  41                 	db	65	;'A'
  1217  00FFAC  6C                 	db	108	;'l'
  1218  00FFAD  61                 	db	97	;'a'
  1219  00FFAE  72                 	db	114	;'r'
  1220  00FFAF  6D                 	db	109	;'m'
  1221  00FFB0  20                 	db	32
  1222  00FFB1  54                 	db	84	;'T'
  1223  00FFB2  69                 	db	105	;'i'
  1224  00FFB3  6D                 	db	109	;'m'
  1225  00FFB4  65                 	db	101	;'e'
  1226  00FFB5  00                 	db	0
  1227  00FFB6                     STR_30:
  1228  00FFB6  20                 	db	32
  1229  00FFB7  20                 	db	32
  1230  00FFB8  53                 	db	83	;'S'
  1231  00FFB9  65                 	db	101	;'e'
  1232  00FFBA  74                 	db	116	;'t'
  1233  00FFBB  75                 	db	117	;'u'
  1234  00FFBC  70                 	db	112	;'p'
  1235  00FFBD  00                 	db	0
  1236  00FFBE  20                 	db	32
  1237  00FFBF  00                 	db	0
  1238  00FFC0                     STR_12:
  1239  00FFC0  41                 	db	65	;'A'
  1240  00FFC1  6C                 	db	108	;'l'
  1241  00FFC2  61                 	db	97	;'a'
  1242  00FFC3  72                 	db	114	;'r'
  1243  00FFC4  6D                 	db	109	;'m'
  1244  00FFC5  20                 	db	32
  1245  00FFC6  53                 	db	83	;'S'
  1246  00FFC7  57                 	db	87	;'W'
  1247  00FFC8  00                 	db	0
  1248  00FFC9                     STR_24:
  1249  00FFC9  20                 	db	32
  1250  00FFCA  20                 	db	32
  1251  00FFCB  41                 	db	65	;'A'
  1252  00FFCC  6C                 	db	108	;'l'
  1253  00FFCD  61                 	db	97	;'a'
  1254  00FFCE  72                 	db	114	;'r'
  1255  00FFCF  6D                 	db	109	;'m'
  1256  00FFD0  00                 	db	0
  1257  00FFD1                     STR_25:
  1258  00FFD1  20                 	db	32
  1259  00FFD2  20                 	db	32
  1260  00FFD3  53                 	db	83	;'S'
  1261  00FFD4  65                 	db	101	;'e'
  1262  00FFD5  74                 	db	116	;'t'
  1263  00FFD6  75                 	db	117	;'u'
  1264  00FFD7  70                 	db	112	;'p'
  1265  00FFD8  00                 	db	0
  1266  00FFD9                     STR_14:
  1267  00FFD9  48                 	db	72	;'H'
  1268  00FFDA  54                 	db	84	;'T'
  1269  00FFDB  52                 	db	82	;'R'
  1270  00FFDC  20                 	db	32
  1271  00FFDD  53                 	db	83	;'S'
  1272  00FFDE  57                 	db	87	;'W'
  1273  00FFDF  00                 	db	0
  1274  00FFE0                     STR_10:
  1275  00FFE0  44                 	db	68	;'D'
  1276  00FFE1  61                 	db	97	;'a'
  1277  00FFE2  74                 	db	116	;'t'
  1278  00FFE3  65                 	db	101	;'e'
  1279  00FFE4  00                 	db	0
  1280  00FFE5                     STR_17:
  1281  00FFE5  56                 	db	86	;'V'
  1282  00FFE6  6F                 	db	111	;'o'
  1283  00FFE7  6C                 	db	108	;'l'
  1284  00FFE8  74                 	db	116	;'t'
  1285  00FFE9  00                 	db	0
  1286  00FFEA                     STR_19:
  1287  00FFEA  4F                 	db	79	;'O'
  1288  00FFEB  4E                 	db	78	;'N'
  1289  00FFEC  20                 	db	32
  1290  00FFED  00                 	db	0
  1291  00FFEE                     STR_20:
  1292  00FFEE  4F                 	db	79	;'O'
  1293  00FFEF  46                 	db	70	;'F'
  1294  00FFF0  46                 	db	70	;'F'
  1295  00FFF1  00                 	db	0
  1296  00FFF2                     STR_18:
  1297  00FFF2  52                 	db	82	;'R'
  1298  00FFF3  50                 	db	80	;'P'
  1299  00FFF4  4D                 	db	77	;'M'
  1300  00FFF5  00                 	db	0
  1301  00FFF6                     STR_7:
  1302  00FFF6  43                 	db	67	;'C'
  1303  00FFF7  2F                 	db	47
  1304  00FFF8  00                 	db	0
  1305  00FFF9                     STR_15:
  1306  00FFF9  44                 	db	68	;'D'
  1307  00FFFA  43                 	db	67	;'C'
  1308  00FFFB  00                 	db	0
  1309  00FFFC                     STR_16:
  1310  00FFFC  52                 	db	82	;'R'
  1311  00FFFD  4D                 	db	77	;'M'
  1312  00FFFE  00                 	db	0
  1313  0000                     
  1314                           ; #config settings
  1315  00FFFF  00                 	db	0	; dummy byte at the end
  1316  0000                     
  1317                           	psect	cinit
  1318  002E86                     __pcinit:
  1319                           	opt stack 0
  1320  002E86                     start_initialization:
  1321                           	opt stack 0
  1322  002E86                     __initialization:
  1323                           	opt stack 0
  1324                           
  1325                           ; Clear objects allocated to BANK0 (24 bytes)
  1326  002E86  EE00  F0E3         	lfsr	0,__pbssBANK0
  1327  002E8A  0E18               	movlw	24
  1328  002E8C                     clear_0:
  1329  002E8C  6AEE               	clrf	postinc0,c
  1330  002E8E  06E8               	decf	wreg,f,c
  1331  002E90  E1FD               	bnz	clear_0
  1332                           
  1333                           ; Clear objects allocated to COMRAM (46 bytes)
  1334  002E92  EE00  F041         	lfsr	0,__pbssCOMRAM
  1335  002E96  0E2E               	movlw	46
  1336  002E98                     clear_1:
  1337  002E98  6AEE               	clrf	postinc0,c
  1338  002E9A  06E8               	decf	wreg,f,c
  1339  002E9C  E1FD               	bnz	clear_1
  1340                           
  1341                           ; Initialize objects allocated to BANK1 (52 bytes)
  1342                           ; load TBLPTR registers with __pidataBANK1
  1343  002E9E  0E82               	movlw	low __pidataBANK1
  1344  002EA0  6EF6               	movwf	tblptrl,c
  1345  002EA2  0E37               	movlw	high __pidataBANK1
  1346  002EA4  6EF7               	movwf	tblptrh,c
  1347  002EA6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1348  002EA8  6EF8               	movwf	tblptru,c
  1349  002EAA  EE01  F000         	lfsr	0,__pdataBANK1
  1350  002EAE  EE10 F034          	lfsr	1,52
  1351  002EB2                     copy_data0:
  1352  002EB2  0009               	tblrd		*+
  1353  002EB4  CFF5 FFEE          	movff	tablat,postinc0
  1354  002EB8  50E5               	movf	postdec1,w,c
  1355  002EBA  50E1               	movf	fsr1l,w,c
  1356  002EBC  E1FA               	bnz	copy_data0
  1357                           
  1358                           ; Initialize objects allocated to BANK0 (99 bytes)
  1359                           ; load TBLPTR registers with __pidataBANK0
  1360  002EBE  0E74               	movlw	low __pidataBANK0
  1361  002EC0  6EF6               	movwf	tblptrl,c
  1362  002EC2  0E31               	movlw	high __pidataBANK0
  1363  002EC4  6EF7               	movwf	tblptrh,c
  1364  002EC6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1365  002EC8  6EF8               	movwf	tblptru,c
  1366  002ECA  EE00  F080         	lfsr	0,__pdataBANK0
  1367  002ECE  EE10 F063          	lfsr	1,99
  1368  002ED2                     copy_data1:
  1369  002ED2  0009               	tblrd		*+
  1370  002ED4  CFF5 FFEE          	movff	tablat,postinc0
  1371  002ED8  50E5               	movf	postdec1,w,c
  1372  002EDA  50E1               	movf	fsr1l,w,c
  1373  002EDC  E1FA               	bnz	copy_data1
  1374                           
  1375                           ; Initialize objects allocated to COMRAM (1 bytes)
  1376                           ; load TBLPTR registers with __pidataCOMRAM
  1377  002EDE  0E02               	movlw	low __pidataCOMRAM
  1378  002EE0  6EF6               	movwf	tblptrl,c
  1379  002EE2  0E3D               	movlw	high __pidataCOMRAM
  1380  002EE4  6EF7               	movwf	tblptrh,c
  1381  002EE6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1382  002EE8  6EF8               	movwf	tblptru,c
  1383  002EEA  0009               	tblrd		*+	;fetch initializer
  1384  002EEC  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1385  002EF0                     end_of_initialization:
  1386                           	opt stack 0
  1387  002EF0                     __end_of__initialization:
  1388                           	opt stack 0
  1389  002EF0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1390  002EF2  6EF8               	movwf	tblptru,c
  1391  002EF4  0100               	movlb	0
  1392  002EF6  EF8B  F006         	goto	_main	;jump to C main() function
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           
  1402                           	psect	bssCOMRAM
  1403  000041                     __pbssCOMRAM:
  1404                           	opt stack 0
  1405  000041                     _ALARMEN:
  1406                           	opt stack 0
  1407  000041                     	ds	2
  1408  000043                     _DS1621_tempC:
  1409                           	opt stack 0
  1410  000043                     	ds	2
  1411  000045                     _DS1621_tempF:
  1412                           	opt stack 0
  1413  000045                     	ds	2
  1414  000047                     _Time_Elapsed:
  1415                           	opt stack 0
  1416  000047                     	ds	2
  1417  000049                     _rpm:
  1418                           	opt stack 0
  1419  000049                     	ds	2
  1420  00004B                     _txt:
  1421                           	opt stack 0
  1422  00004B                     	ds	2
  1423  00004D                     _FAN:
  1424                           	opt stack 0
  1425  00004D                     	ds	1
  1426  00004E                     _HEATER:
  1427                           	opt stack 0
  1428  00004E                     	ds	1
  1429  00004F                     _INT2_flag:
  1430                           	opt stack 0
  1431  00004F                     	ds	1
  1432  000050                     _Nec_code1:
  1433                           	opt stack 0
  1434  000050                     	ds	1
  1435  000051                     _Nec_state:
  1436                           	opt stack 0
  1437  000051                     	ds	1
  1438  000052                     _Select_Alarm_Field:
  1439                           	opt stack 0
  1440  000052                     	ds	1
  1441  000053                     _Select_Field:
  1442                           	opt stack 0
  1443  000053                     	ds	1
  1444  000054                     __tft_type:
  1445                           	opt stack 0
  1446  000054                     	ds	1
  1447  000055                     _alarm_date:
  1448                           	opt stack 0
  1449  000055                     	ds	1
  1450  000056                     _alarm_hour:
  1451                           	opt stack 0
  1452  000056                     	ds	1
  1453  000057                     _alarm_minute:
  1454                           	opt stack 0
  1455  000057                     	ds	1
  1456  000058                     _alarm_second:
  1457                           	opt stack 0
  1458  000058                     	ds	1
  1459  000059                     _bit_count:
  1460                           	opt stack 0
  1461  000059                     	ds	1
  1462  00005A                     _colstart:
  1463                           	opt stack 0
  1464  00005A                     	ds	1
  1465  00005B                     _day:
  1466                           	opt stack 0
  1467  00005B                     	ds	1
  1468  00005C                     _dow:
  1469                           	opt stack 0
  1470  00005C                     	ds	1
  1471  00005D                     _duty_cycle:
  1472                           	opt stack 0
  1473  00005D                     	ds	1
  1474  00005E                     _found:
  1475                           	opt stack 0
  1476  00005E                     	ds	1
  1477  00005F                     _hour:
  1478                           	opt stack 0
  1479  00005F                     	ds	1
  1480  000060                     _minute:
  1481                           	opt stack 0
  1482  000060                     	ds	1
  1483  000061                     _month:
  1484                           	opt stack 0
  1485  000061                     	ds	1
  1486  000062                     _rowstart:
  1487                           	opt stack 0
  1488  000062                     	ds	1
  1489  000063                     _second:
  1490                           	opt stack 0
  1491  000063                     	ds	1
  1492  000064                     _setup_alarm_hour:
  1493                           	opt stack 0
  1494  000064                     	ds	1
  1495  000065                     _setup_alarm_minute:
  1496                           	opt stack 0
  1497  000065                     	ds	1
  1498  000066                     _setup_alarm_second:
  1499                           	opt stack 0
  1500  000066                     	ds	1
  1501  000067                     _setup_day:
  1502                           	opt stack 0
  1503  000067                     	ds	1
  1504  000068                     _setup_heater_set_temp:
  1505                           	opt stack 0
  1506  000068                     	ds	1
  1507  000069                     _setup_hour:
  1508                           	opt stack 0
  1509  000069                     	ds	1
  1510  00006A                     _setup_minute:
  1511                           	opt stack 0
  1512  00006A                     	ds	1
  1513  00006B                     _setup_month:
  1514                           	opt stack 0
  1515  00006B                     	ds	1
  1516  00006C                     _setup_second:
  1517                           	opt stack 0
  1518  00006C                     	ds	1
  1519  00006D                     _setup_year:
  1520                           	opt stack 0
  1521  00006D                     	ds	1
  1522  00006E                     _year:
  1523                           	opt stack 0
  1524  00006E                     	ds	1
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	dataCOMRAM
  1535  00006F                     __pdataCOMRAM:
  1536                           	opt stack 0
  1537  00006F                     _heater_set_temp:
  1538                           	opt stack 0
  1539  00006F                     	ds	1
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1l	equ	0xFE1
  1548                           
  1549                           	psect	bssBANK0
  1550  0000E3                     __pbssBANK0:
  1551                           	opt stack 0
  1552  0000E3                     _Nec_code:
  1553                           	opt stack 0
  1554  0000E3                     	ds	4
  1555  0000E7                     _volt:
  1556                           	opt stack 0
  1557  0000E7                     	ds	3
  1558  0000EA                     _MATCHED:
  1559                           	opt stack 0
  1560  0000EA                     	ds	2
  1561  0000EC                     _alarm_mode:
  1562                           	opt stack 0
  1563  0000EC                     	ds	2
  1564  0000EE                     _color:
  1565                           	opt stack 0
  1566  0000EE                     	ds	2
  1567  0000F0                     _nbr:
  1568                           	opt stack 0
  1569  0000F0                     	ds	2
  1570  0000F2                     _nec_ok:
  1571                           	opt stack 0
  1572  0000F2                     	ds	2
  1573  0000F4                     _rps:
  1574                           	opt stack 0
  1575  0000F4                     	ds	2
  1576  0000F6                     _INT1_flag:
  1577                           	opt stack 0
  1578  0000F6                     	ds	1
  1579  0000F7                     _In_Alarm_Time_Setup:
  1580                           	opt stack 0
  1581  0000F7                     	ds	1
  1582  0000F8                     _In_Heater_Temp_Setup:
  1583                           	opt stack 0
  1584  0000F8                     	ds	1
  1585  0000F9                     _In_Time_Setup:
  1586                           	opt stack 0
  1587  0000F9                     	ds	1
  1588  0000FA                     _Select_Heater_Temp_Field:
  1589                           	opt stack 0
  1590  0000FA                     	ds	1
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1l	equ	0xFE1
  1599                           
  1600                           	psect	dataBANK0
  1601  000080                     __pdataBANK0:
  1602                           	opt stack 0
  1603  000080                     _tempSecond:
  1604                           	opt stack 0
  1605  000080                     	ds	1
  1606  000081                     _wrap:
  1607                           	opt stack 0
  1608  000081                     	ds	1
  1609  000082                     _alarm_time:
  1610                           	opt stack 0
  1611  000082                     	ds	9
  1612  00008B                     _date:
  1613                           	opt stack 0
  1614  00008B                     	ds	9
  1615  000094                     _setup_alarm_time:
  1616                           	opt stack 0
  1617  000094                     	ds	9
  1618  00009D                     _setup_date:
  1619                           	opt stack 0
  1620  00009D                     	ds	9
  1621  0000A6                     _setup_time:
  1622                           	opt stack 0
  1623  0000A6                     	ds	9
  1624  0000AF                     _time:
  1625                           	opt stack 0
  1626  0000AF                     	ds	9
  1627  0000B8                     _Volt_Txt:
  1628                           	opt stack 0
  1629  0000B8                     	ds	6
  1630  0000BE                     _Heater_Set_Temp_Txt:
  1631                           	opt stack 0
  1632  0000BE                     	ds	5
  1633  0000C3                     _RPM_Txt:
  1634                           	opt stack 0
  1635  0000C3                     	ds	5
  1636  0000C8                     _setup_heater_set_text:
  1637                           	opt stack 0
  1638  0000C8                     	ds	5
  1639  0000CD                     _Alarm_SW_Txt:
  1640                           	opt stack 0
  1641  0000CD                     	ds	4
  1642  0000D1                     _DC_Txt:
  1643                           	opt stack 0
  1644  0000D1                     	ds	4
  1645  0000D5                     _Heater_SW_Txt:
  1646                           	opt stack 0
  1647  0000D5                     	ds	4
  1648  0000D9                     _tempC:
  1649                           	opt stack 0
  1650  0000D9                     	ds	4
  1651  0000DD                     _tempF:
  1652                           	opt stack 0
  1653  0000DD                     	ds	4
  1654  0000E1                     _RTC_ALARM_Txt:
  1655                           	opt stack 0
  1656  0000E1                     	ds	2
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1l	equ	0xFE1
  1665                           
  1666                           	psect	dataBANK1
  1667  000100                     __pdataBANK1:
  1668                           	opt stack 0
  1669  000100                     _buffer:
  1670                           	opt stack 0
  1671  000100                     	ds	31
  1672  00011F                     _array1:
  1673                           	opt stack 0
  1674  00011F                     	ds	21
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           postdec1	equ	0xFE5
  1682                           fsr1l	equ	0xFE1
  1683                           
  1684                           	psect	cstackBANK1
  1685  000134                     __pcstackBANK1:
  1686                           	opt stack 0
  1687  000134                     drawtext@x:
  1688                           	opt stack 0
  1689  000134                     dec_2_bcd@bcd:
  1690                           	opt stack 0
  1691  000134                     do_update_pwm@dc_f:
  1692                           	opt stack 0
  1693                           
  1694                           ; 3 bytes @ 0x0
  1695  000134                     	ds	1
  1696  000135                     drawtext@textsize:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x1
  1700  000135                     	ds	1
  1701  000136                     dec_2_bcd@dec:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x2
  1705  000136                     	ds	1
  1706  000137                     DS3231_Write_Time@Device:
  1707                           	opt stack 0
  1708  000137                     DS3231_Write_Alarm_Time@Device:
  1709                           	opt stack 0
  1710  000137                     do_update_pwm@duty_cycle:
  1711                           	opt stack 0
  1712  000137                     drawtext@i:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x3
  1716  000137                     	ds	1
  1717  000138                     DS3231_Write_Time@Address:
  1718                           	opt stack 0
  1719  000138                     DS3231_Write_Alarm_Time@Address:
  1720                           	opt stack 0
  1721  000138                     do_update_pwm@dc_I:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x4
  1725  000138                     	ds	1
  1726  000139                     drawtext@cursor_y:
  1727                           	opt stack 0
  1728                           
  1729                           ; 1 bytes @ 0x5
  1730  000139                     	ds	1
  1731  00013A                     drawtext@cursor_x:
  1732                           	opt stack 0
  1733                           
  1734                           ; 1 bytes @ 0x6
  1735  00013A                     	ds	1
  1736  00013B                     ??_Do_Setup_Heater_Temp:
  1737  00013B                     Update_Screen@neg_tempF:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x7
  1741  00013B                     	ds	2
  1742  00013D                     Update_Screen@neg_DS1621_tempC:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x9
  1746  00013D                     	ds	1
  1747  00013E                     ??_main:
  1748                           
  1749                           ; 0 bytes @ 0xA
  1750  00013E                     	ds	2
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           
  1760                           	psect	cstackBANK0
  1761  0000FB                     __pcstackBANK0:
  1762                           	opt stack 0
  1763  0000FB                     ??_drawtext:
  1764  0000FB                     ?_dec_2_bcd:
  1765                           	opt stack 0
  1766  0000FB                     read_volt@volt:
  1767                           	opt stack 0
  1768                           
  1769                           ; 3 bytes @ 0x0
  1770  0000FB                     	ds	2
  1771  0000FD                     ??_dec_2_bcd:
  1772  0000FD                     ??_Update_Screen:
  1773  0000FD                     Update_Setup_Heater_Screen@dc_char1:
  1774                           	opt stack 0
  1775                           
  1776                           ; 1 bytes @ 0x2
  1777  0000FD                     	ds	1
  1778  0000FE                     Update_Setup_Heater_Screen@dc_char2:
  1779                           	opt stack 0
  1780  0000FE                     read_volt@nStep:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x3
  1784  0000FE                     	ds	1
  1785  0000FF                     Update_Setup_Heater_Screen@dc_char3:
  1786                           	opt stack 0
  1787                           
  1788                           ; 1 bytes @ 0x4
  1789  0000FF                     	ds	1
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           postdec1	equ	0xFE5
  1797                           fsr1l	equ	0xFE1
  1798                           
  1799                           	psect	cstackCOMRAM
  1800  000001                     __pcstackCOMRAM:
  1801                           	opt stack 0
  1802  000001                     ??_INT0_isr:
  1803  000001                     
  1804                           ; 2 bytes @ 0x0
  1805  000001                     	ds	2
  1806  000003                     ??_chkisr:
  1807                           
  1808                           ; 0 bytes @ 0x2
  1809  000003                     	ds	14
  1810  000011                     ??_bcd_2_dec:
  1811  000011                     ??_isdigit:
  1812  000011                     ?_strlen:
  1813                           	opt stack 0
  1814  000011                     ?_get_full_ADC:
  1815                           	opt stack 0
  1816  000011                     ?_get_duty_cycle:
  1817                           	opt stack 0
  1818  000011                     ?___wmul:
  1819                           	opt stack 0
  1820  000011                     ?___lwdiv:
  1821                           	opt stack 0
  1822  000011                     ?___ftpack:
  1823                           	opt stack 0
  1824  000011                     I2C_Read@ack:
  1825                           	opt stack 0
  1826  000011                     I2C_Write@outByte:
  1827                           	opt stack 0
  1828  000011                     putch@c:
  1829                           	opt stack 0
  1830  000011                     spiwrite@x:
  1831                           	opt stack 0
  1832  000011                     Set_Alarm_RGB_Color@color:
  1833                           	opt stack 0
  1834  000011                     get_duty_cycle@temp:
  1835                           	opt stack 0
  1836  000011                     Set_RPM_RGB@rpm:
  1837                           	opt stack 0
  1838  000011                     Wait_One_Sec@k:
  1839                           	opt stack 0
  1840  000011                     Wait_Half_Sec@k:
  1841                           	opt stack 0
  1842  000011                     OpenUSART@spbrg:
  1843                           	opt stack 0
  1844  000011                     ___wmul@multiplier:
  1845                           	opt stack 0
  1846  000011                     ___lwdiv@dividend:
  1847                           	opt stack 0
  1848  000011                     strcpy@to:
  1849                           	opt stack 0
  1850  000011                     strlen@s:
  1851                           	opt stack 0
  1852  000011                     ___ftpack@arg:
  1853                           	opt stack 0
  1854  000011                     ___ftge@ff1:
  1855                           	opt stack 0
  1856  000011                     I2C_Init@c:
  1857                           	opt stack 0
  1858                           
  1859                           ; 4 bytes @ 0x10
  1860  000011                     	ds	1
  1861  000012                     I2C_Read@n:
  1862                           	opt stack 0
  1863  000012                     I2C_Write@n:
  1864                           	opt stack 0
  1865  000012                     spiwrite@spidata:
  1866                           	opt stack 0
  1867  000012                     _isdigit$2894:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x11
  1871  000012                     	ds	1
  1872  000013                     ??_strlen:
  1873  000013                     ??_get_full_ADC:
  1874  000013                     I2C_Read@inByte:
  1875                           	opt stack 0
  1876  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1877                           	opt stack 0
  1878  000013                     I2C_Write_Cmd_Only@Cmd:
  1879                           	opt stack 0
  1880  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1881                           	opt stack 0
  1882  000013                     write_command@cmd_:
  1883                           	opt stack 0
  1884  000013                     write_data@data_:
  1885                           	opt stack 0
  1886  000013                     OpenUSART@config:
  1887                           	opt stack 0
  1888  000013                     isdigit@c:
  1889                           	opt stack 0
  1890  000013                     get_duty_cycle@set_temp:
  1891                           	opt stack 0
  1892  000013                     bcd_2_dec@dec:
  1893                           	opt stack 0
  1894  000013                     ___wmul@multiplicand:
  1895                           	opt stack 0
  1896  000013                     ___lwdiv@divisor:
  1897                           	opt stack 0
  1898  000013                     strcpy@from:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x12
  1902  000013                     	ds	1
  1903  000014                     ?_DS1621_Read_Temp:
  1904                           	opt stack 0
  1905  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1906                           	opt stack 0
  1907  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1908                           	opt stack 0
  1909  000014                     I2C_Write_Cmd_Only@Device:
  1910                           	opt stack 0
  1911  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1912                           	opt stack 0
  1913  000014                     DS3231_Read_Time@Address:
  1914                           	opt stack 0
  1915  000014                     DS3231_Read_Alarm_Time@Address:
  1916                           	opt stack 0
  1917  000014                     setAddrWindow@y0:
  1918                           	opt stack 0
  1919  000014                     ___ftpack@exp:
  1920                           	opt stack 0
  1921  000014                     ___ftge@ff2:
  1922                           	opt stack 0
  1923                           
  1924                           ; 3 bytes @ 0x13
  1925  000014                     	ds	1
  1926  000015                     ??_get_duty_cycle:
  1927  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1928                           	opt stack 0
  1929  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1930                           	opt stack 0
  1931  000015                     I2C_Write_Cmd_Write_Data@Device:
  1932                           	opt stack 0
  1933  000015                     DS3231_Read_Time@Device:
  1934                           	opt stack 0
  1935  000015                     DS3231_Read_Alarm_Time@Device:
  1936                           	opt stack 0
  1937  000015                     setAddrWindow@x1:
  1938                           	opt stack 0
  1939  000015                     bcd_2_dec@bcd:
  1940                           	opt stack 0
  1941  000015                     ___ftpack@sign:
  1942                           	opt stack 0
  1943  000015                     get_full_ADC@result:
  1944                           	opt stack 0
  1945  000015                     ___wmul@product:
  1946                           	opt stack 0
  1947  000015                     ___lwdiv@quotient:
  1948                           	opt stack 0
  1949  000015                     strcpy@cp:
  1950                           	opt stack 0
  1951  000015                     strlen@cp:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x14
  1955  000015                     	ds	1
  1956  000016                     ??___ftpack:
  1957  000016                     I2C_Write_Address_Read_One_Byte@Device:
  1958                           	opt stack 0
  1959  000016                     DS1621_Init@Device:
  1960                           	opt stack 0
  1961  000016                     DS1621_Read_Temp@Cmd:
  1962                           	opt stack 0
  1963  000016                     setAddrWindow@y1:
  1964                           	opt stack 0
  1965                           
  1966                           ; 1 bytes @ 0x15
  1967  000016                     	ds	1
  1968  000017                     ??___ftge:
  1969  000017                     ?___awdiv:
  1970                           	opt stack 0
  1971  000017                     DS1621_Read_Temp@Data_Ret:
  1972                           	opt stack 0
  1973  000017                     DS3231_Init@Address_7:
  1974                           	opt stack 0
  1975  000017                     setAddrWindow@x0:
  1976                           	opt stack 0
  1977  000017                     ___lwdiv@counter:
  1978                           	opt stack 0
  1979  000017                     delay_ms@ms:
  1980                           	opt stack 0
  1981  000017                     ___awdiv@dividend:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x16
  1985  000017                     	ds	1
  1986  000018                     ?___lwmod:
  1987                           	opt stack 0
  1988  000018                     DS1621_Read_Temp@Device:
  1989                           	opt stack 0
  1990  000018                     DS3231_Init@Address_E:
  1991                           	opt stack 0
  1992  000018                     drawPixel@y:
  1993                           	opt stack 0
  1994  000018                     drawFastVLine@y:
  1995                           	opt stack 0
  1996  000018                     fillRectangle@y:
  1997                           	opt stack 0
  1998  000018                     ___lwmod@dividend:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x17
  2002  000018                     	ds	1
  2003  000019                     ??_delay_ms:
  2004  000019                     ?___awtoft:
  2005                           	opt stack 0
  2006  000019                     ?___lbtoft:
  2007                           	opt stack 0
  2008  000019                     DS3231_Init@control_E:
  2009                           	opt stack 0
  2010  000019                     drawFastVLine@h:
  2011                           	opt stack 0
  2012  000019                     fillRectangle@w:
  2013                           	opt stack 0
  2014  000019                     drawPixel@color:
  2015                           	opt stack 0
  2016  000019                     ___awdiv@divisor:
  2017                           	opt stack 0
  2018  000019                     ___awtoft@c:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x18
  2022  000019                     	ds	1
  2023  00001A                     DS3231_Init@Device:
  2024                           	opt stack 0
  2025  00001A                     fillRectangle@h:
  2026                           	opt stack 0
  2027  00001A                     drawFastVLine@color:
  2028                           	opt stack 0
  2029  00001A                     ___lwmod@divisor:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x19
  2033  00001A                     	ds	1
  2034  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2035                           	opt stack 0
  2036  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2037                           	opt stack 0
  2038  00001B                     drawPixel@x:
  2039                           	opt stack 0
  2040  00001B                     ___awdiv@counter:
  2041                           	opt stack 0
  2042  00001B                     delay_ms@count:
  2043                           	opt stack 0
  2044  00001B                     fillRectangle@color:
  2045                           	opt stack 0
  2046                           
  2047                           ; 2 bytes @ 0x1A
  2048  00001B                     	ds	1
  2049  00001C                     ??_drawFastVLine:
  2050  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2051                           	opt stack 0
  2052  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2053                           	opt stack 0
  2054  00001C                     ___awdiv@sign:
  2055                           	opt stack 0
  2056  00001C                     ___awtoft@sign:
  2057                           	opt stack 0
  2058  00001C                     ___lbtoft@c:
  2059                           	opt stack 0
  2060  00001C                     ___lwmod@counter:
  2061                           	opt stack 0
  2062  00001C                     drawCircle@x0:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x1B
  2066  00001C                     	ds	1
  2067  00001D                     ??_fillRectangle:
  2068  00001D                     ?_printf:
  2069                           	opt stack 0
  2070  00001D                     ?___ftmul:
  2071                           	opt stack 0
  2072  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2073                           	opt stack 0
  2074  00001D                     DS3231_Turn_On_Alarm@control_E:
  2075                           	opt stack 0
  2076  00001D                     printf@f:
  2077                           	opt stack 0
  2078  00001D                     ___awdiv@quotient:
  2079                           	opt stack 0
  2080  00001D                     ___ftmul@f1:
  2081                           	opt stack 0
  2082                           
  2083                           ; 3 bytes @ 0x1C
  2084  00001D                     	ds	1
  2085  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2086                           	opt stack 0
  2087  00001E                     DS3231_Turn_On_Alarm@control_F:
  2088                           	opt stack 0
  2089  00001E                     drawCircle@y0:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x1D
  2093  00001E                     	ds	1
  2094  00001F                     ?_get_RPM:
  2095                           	opt stack 0
  2096  00001F                     DS3231_Turn_Off_Alarm@Device:
  2097                           	opt stack 0
  2098  00001F                     DS3231_Turn_On_Alarm@Device:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x1E
  2102  00001F                     	ds	1
  2103  000020                     drawFastVLine@hi:
  2104                           	opt stack 0
  2105  000020                     drawCircle@r:
  2106                           	opt stack 0
  2107  000020                     ___ftmul@f2:
  2108                           	opt stack 0
  2109                           
  2110                           ; 3 bytes @ 0x1F
  2111  000020                     	ds	1
  2112  000021                     drawFastVLine@lo:
  2113                           	opt stack 0
  2114  000021                     fillRectangle@hi:
  2115                           	opt stack 0
  2116  000021                     get_RPM@RPS:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x20
  2120  000021                     	ds	1
  2121  000022                     drawFastVLine@x:
  2122                           	opt stack 0
  2123  000022                     fillRectangle@lo:
  2124                           	opt stack 0
  2125  000022                     drawCircle@color:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x21
  2129  000022                     	ds	1
  2130  000023                     ??___ftmul:
  2131  000023                     fillRect@y:
  2132                           	opt stack 0
  2133  000023                     fillRectangle@x:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x22
  2137  000023                     	ds	1
  2138  000024                     ??_drawCircle:
  2139  000024                     fillRect@w:
  2140                           	opt stack 0
  2141  000024                     fillScreen@color:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x23
  2145  000024                     	ds	1
  2146  000025                     fillRect@h:
  2147                           	opt stack 0
  2148                           
  2149                           ; 1 bytes @ 0x24
  2150  000025                     	ds	1
  2151  000026                     ___ftmul@exp:
  2152                           	opt stack 0
  2153  000026                     fillRect@color:
  2154                           	opt stack 0
  2155  000026                     drawCircle@ddF_x:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x25
  2159  000026                     	ds	1
  2160  000027                     ___ftmul@f3_as_product:
  2161                           	opt stack 0
  2162                           
  2163                           ; 3 bytes @ 0x26
  2164  000027                     	ds	1
  2165  000028                     ??_fillRect:
  2166  000028                     drawCircle@ddF_y:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0x27
  2170  000028                     	ds	2
  2171  00002A                     ___ftmul@cntr:
  2172                           	opt stack 0
  2173  00002A                     drawCircle@f:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x29
  2177  00002A                     	ds	1
  2178  00002B                     ??_printf:
  2179  00002B                     fillRect@x:
  2180                           	opt stack 0
  2181  00002B                     ___ftmul@sign:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x2A
  2185  00002B                     	ds	1
  2186  00002C                     ?___ftdiv:
  2187                           	opt stack 0
  2188  00002C                     ?___fttol:
  2189                           	opt stack 0
  2190  00002C                     fillRect@i:
  2191                           	opt stack 0
  2192  00002C                     drawCircle@x:
  2193                           	opt stack 0
  2194  00002C                     ___ftdiv@f1:
  2195                           	opt stack 0
  2196  00002C                     ___fttol@f1:
  2197                           	opt stack 0
  2198                           
  2199                           ; 3 bytes @ 0x2B
  2200  00002C                     	ds	2
  2201  00002E                     drawChar@y:
  2202                           	opt stack 0
  2203  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2204                           	opt stack 0
  2205  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2206                           	opt stack 0
  2207  00002E                     drawCircle@y:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x2D
  2211  00002E                     	ds	1
  2212  00002F                     drawChar@c:
  2213                           	opt stack 0
  2214  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2215                           	opt stack 0
  2216  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2217                           	opt stack 0
  2218  00002F                     printf@idx:
  2219                           	opt stack 0
  2220  00002F                     ___ftdiv@f2:
  2221                           	opt stack 0
  2222                           
  2223                           ; 3 bytes @ 0x2E
  2224  00002F                     	ds	1
  2225  000030                     ??___fttol:
  2226  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2227                           	opt stack 0
  2228  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2229                           	opt stack 0
  2230  000030                     drawChar@color:
  2231                           	opt stack 0
  2232  000030                     printf@ap:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x2F
  2236  000030                     	ds	1
  2237  000031                     
  2238                           ; 0 bytes @ 0x30
  2239  000031                     	ds	1
  2240  000032                     ??___ftdiv:
  2241  000032                     printf@prec:
  2242                           	opt stack 0
  2243  000032                     drawChar@bg:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x31
  2247  000032                     	ds	1
  2248  000033                     printf@val:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x32
  2252  000033                     	ds	1
  2253  000034                     drawChar@size:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x33
  2257  000034                     	ds	1
  2258  000035                     drawChar@line:
  2259                           	opt stack 0
  2260  000035                     printf@flag:
  2261                           	opt stack 0
  2262  000035                     ___ftdiv@cntr:
  2263                           	opt stack 0
  2264  000035                     ___fttol@sign1:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x34
  2268  000035                     	ds	1
  2269  000036                     drawChar@x:
  2270                           	opt stack 0
  2271  000036                     printf@width:
  2272                           	opt stack 0
  2273  000036                     ___ftdiv@f3:
  2274                           	opt stack 0
  2275  000036                     ___fttol@lval:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x35
  2279  000036                     	ds	1
  2280  000037                     drawChar@j:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x36
  2284  000037                     	ds	1
  2285  000038                     drawChar@i:
  2286                           	opt stack 0
  2287  000038                     printf@c:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x37
  2291  000038                     	ds	1
  2292  000039                     drawtext@y:
  2293                           	opt stack 0
  2294  000039                     ___ftdiv@exp:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x38
  2298  000039                     	ds	1
  2299  00003A                     ___ftdiv@sign:
  2300                           	opt stack 0
  2301  00003A                     ___fttol@exp1:
  2302                           	opt stack 0
  2303  00003A                     drawtext@_text:
  2304                           	opt stack 0
  2305  00003A                     check_for_button_input@i:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x39
  2309  00003A                     	ds	1
  2310  00003B                     ??_do_update_pwm:
  2311  00003B                     ?___awmod:
  2312                           	opt stack 0
  2313  00003B                     ?_read_volt:
  2314                           	opt stack 0
  2315  00003B                     ___awmod@dividend:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x3A
  2319  00003B                     	ds	1
  2320  00003C                     drawtext@color:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x3B
  2324  00003C                     	ds	1
  2325  00003D                     ___awmod@divisor:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x3C
  2329  00003D                     	ds	1
  2330  00003E                     Test_Alarm@i:
  2331                           	opt stack 0
  2332  00003E                     drawtext@bg:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x3D
  2336  00003E                     	ds	1
  2337  00003F                     ___awmod@counter:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x3E
  2341  00003F                     	ds	1
  2342  000040                     drawtext@size:
  2343                           	opt stack 0
  2344  000040                     ___awmod@sign:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x3F
  2348  000040                     	ds	1
  2349  000041                     tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           postinc0	equ	0xFEE
  2354                           wreg	equ	0xFE8
  2355                           postdec1	equ	0xFE5
  2356                           fsr1l	equ	0xFE1
  2357                           
  2358                           ; 0 bytes @ 0x40
  2359 ;;
  2360 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2361 ;;
  2362 ;; *************** function _main *****************
  2363 ;; Defined at:
  2364 ;;		line 125 in file "Main.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;		None
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;		None
  2369 ;; Return value:  Size  Location     Type
  2370 ;;		None               void
  2371 ;; Registers used:
  2372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;Total ram usage:        2 bytes
  2383 ;; Hardware stack levels required when called:   13
  2384 ;; This function calls:
  2385 ;;		_DS1621_Read_Temp
  2386 ;;		_DS3231_Read_Alarm_Time
  2387 ;;		_DS3231_Read_Time
  2388 ;;		_DS3231_Turn_Off_Alarm
  2389 ;;		_Do_Beep_Bad
  2390 ;;		_Do_Beep_Good
  2391 ;;		_Do_Init
  2392 ;;		_Do_Setup_Alarm_Time
  2393 ;;		_Do_Setup_Heater_Temp
  2394 ;;		_Do_Setup_Time
  2395 ;;		_Initialize_Screen
  2396 ;;		_Monitor_Heater
  2397 ;;		_Set_Alarm_RGB_Color
  2398 ;;		_Set_RPM_RGB
  2399 ;;		_Test_Alarm
  2400 ;;		_Toggle_Heater
  2401 ;;		_Update_Screen
  2402 ;;		___awdiv
  2403 ;;		___wmul
  2404 ;;		_check_for_button_input
  2405 ;;		_get_RPM
  2406 ;;		_printf
  2407 ;;		_read_volt
  2408 ;; This function is called by:
  2409 ;;		Startup code after reset
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text0
  2414  000D16                     __ptext0:
  2415                           	opt stack 0
  2416  000D16                     _main:
  2417                           	opt stack 18
  2418                           
  2419                           ;Main.c: 127: Do_Init();
  2420                           
  2421                           ;incstack = 0
  2422  000D16  EC1A  F019         	call	_Do_Init	;wreg free
  2423                           
  2424                           ;Main.c: 128: Initialize_Screen();
  2425  000D1A  EC1E  F003         	call	_Initialize_Screen	;wreg free
  2426                           
  2427                           ;Main.c: 129: DS3231_Turn_Off_Alarm();
  2428  000D1E  EC6F  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2429                           
  2430                           ;Main.c: 130: DS3231_Read_Alarm_Time();
  2431  000D22  EC0F  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  2432                           
  2433                           ;Main.c: 132: tempSecond = 0xff;
  2434  000D26  0100               	movlb	0	; () banked
  2435  000D28  6980               	setf	_tempSecond& (0+255),b
  2436  000D2A  D000               	goto	l10001
  2437  000D2C                     l10001:
  2438                           
  2439                           ;Main.c: 134: {
  2440                           ;Main.c: 135: DS3231_Read_Time();
  2441  000D2C  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  2442                           
  2443                           ;Main.c: 137: if(tempSecond != second)
  2444  000D30  5063               	movf	_second,w,c
  2445  000D32  0100               	movlb	0	; () banked
  2446  000D34  1980               	xorwf	_tempSecond& (0+255),w,b
  2447  000D36  B4D8               	btfsc	status,2,c
  2448  000D38  D0A7               	goto	l10035
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;Main.c: 138: {
  2452                           ;Main.c: 139: tempSecond = second;
  2453  000D3A  C063  F080         	movff	_second,_tempSecond
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;Main.c: 140: rpm = get_RPM();
  2457  000D3E  ECC9  F01A         	call	_get_RPM	;wreg free
  2458  000D42  C01F  F049         	movff	?_get_RPM,_rpm
  2459  000D46  C020  F04A         	movff	?_get_RPM+1,_rpm+1
  2460                           
  2461                           ;Main.c: 141: volt = read_volt();
  2462  000D4A  EC24  F018         	call	_read_volt	;wreg free
  2463  000D4E  C03B  F0E7         	movff	?_read_volt,_volt
  2464  000D52  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  2465  000D56  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  2466                           
  2467                           ;Main.c: 142: DS1621_tempC = DS1621_Read_Temp();
  2468  000D5A  ECA3  F01B         	call	_DS1621_Read_Temp	;wreg free
  2469  000D5E  C014  F043         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2470  000D62  C015  F044         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2471                           
  2472                           ;Main.c: 143: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2473  000D66  AE43               	btfss	_DS1621_tempC,7,c
  2474  000D68  D01D               	goto	l10015
  2475  000D6A  C043  F13E         	movff	_DS1621_tempC,??_main
  2476  000D6E  C044  F13F         	movff	_DS1621_tempC+1,??_main+1
  2477  000D72  0101               	movlb	1	; () banked
  2478  000D74  1F3E               	comf	??_main& (0+255),f,b
  2479  000D76  1F3F               	comf	(??_main+1)& (0+255),f,b
  2480  000D78  4B3E               	infsnz	??_main& (0+255),f,b
  2481  000D7A  2B3F               	incf	(??_main+1)& (0+255),f,b
  2482  000D7C  0E80               	movlw	128
  2483  000D7E  0101               	movlb	1	; () banked
  2484  000D80  273E               	addwf	??_main& (0+255),f,b
  2485  000D82  0E00               	movlw	0
  2486  000D84  233F               	addwfc	(??_main+1)& (0+255),f,b
  2487  000D86  0E7F               	movlw	127
  2488  000D88  0101               	movlb	1	; () banked
  2489  000D8A  173E               	andwf	??_main& (0+255),f,b
  2490  000D8C  0E00               	movlw	0
  2491  000D8E  173F               	andwf	(??_main+1)& (0+255),f,b
  2492  000D90  0101               	movlb	1	; () banked
  2493  000D92  1F3E               	comf	??_main& (0+255),f,b
  2494  000D94  1F3F               	comf	(??_main+1)& (0+255),f,b
  2495  000D96  4B3E               	infsnz	??_main& (0+255),f,b
  2496  000D98  2B3F               	incf	(??_main+1)& (0+255),f,b
  2497  000D9A  C13E  F043         	movff	??_main,_DS1621_tempC
  2498  000D9E  C13F  F044         	movff	??_main+1,_DS1621_tempC+1
  2499  000DA2  D000               	goto	l10015
  2500  000DA4                     l10015:
  2501                           
  2502                           ;Main.c: 144: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2503  000DA4  C043  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2504  000DA8  C044  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2505  000DAC  0E00               	movlw	0
  2506  000DAE  6E14               	movwf	___wmul@multiplicand+1,c
  2507  000DB0  0E09               	movlw	9
  2508  000DB2  6E13               	movwf	___wmul@multiplicand,c
  2509  000DB4  EC7D  F01C         	call	___wmul	;wreg free
  2510  000DB8  C011  F017         	movff	?___wmul,___awdiv@dividend
  2511  000DBC  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2512  000DC0  0E00               	movlw	0
  2513  000DC2  6E1A               	movwf	___awdiv@divisor+1,c
  2514  000DC4  0E05               	movlw	5
  2515  000DC6  6E19               	movwf	___awdiv@divisor,c
  2516  000DC8  ECCD  F014         	call	___awdiv	;wreg free
  2517  000DCC  0E20               	movlw	32
  2518  000DCE  2417               	addwf	?___awdiv,w,c
  2519  000DD0  6E45               	movwf	_DS1621_tempF,c
  2520  000DD2  0E00               	movlw	0
  2521  000DD4  2018               	addwfc	?___awdiv+1,w,c
  2522  000DD6  6E46               	movwf	_DS1621_tempF+1,c
  2523                           
  2524                           ;Main.c: 146: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2525  000DD8  0E8A               	movlw	low STR_1
  2526  000DDA  6E1D               	movwf	printf@f,c
  2527  000DDC  0EFE               	movlw	high STR_1
  2528  000DDE  6E1E               	movwf	printf@f+1,c
  2529  000DE0  C05F  F01F         	movff	_hour,?_printf+2
  2530  000DE4  6A20               	clrf	?_printf+3,c
  2531  000DE6  C060  F021         	movff	_minute,?_printf+4
  2532  000DEA  6A22               	clrf	?_printf+5,c
  2533  000DEC  C063  F023         	movff	_second,?_printf+6
  2534  000DF0  6A24               	clrf	?_printf+7,c
  2535  000DF2  C061  F025         	movff	_month,?_printf+8
  2536  000DF6  6A26               	clrf	?_printf+9,c
  2537  000DF8  C05B  F027         	movff	_day,?_printf+10
  2538  000DFC  6A28               	clrf	?_printf+11,c
  2539  000DFE  C06E  F029         	movff	_year,?_printf+12
  2540  000E02  6A2A               	clrf	?_printf+13,c
  2541  000E04  ECDE  F004         	call	_printf	;wreg free
  2542                           
  2543                           ;Main.c: 147: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2544  000E08  0E01               	movlw	low STR_2
  2545  000E0A  6E1D               	movwf	printf@f,c
  2546  000E0C  0EFF               	movlw	high STR_2
  2547  000E0E  6E1E               	movwf	printf@f+1,c
  2548  000E10  C043  F01F         	movff	_DS1621_tempC,?_printf+2
  2549  000E14  C044  F020         	movff	_DS1621_tempC+1,?_printf+3
  2550  000E18  C045  F021         	movff	_DS1621_tempF,?_printf+4
  2551  000E1C  C046  F022         	movff	_DS1621_tempF+1,?_printf+5
  2552  000E20  ECDE  F004         	call	_printf	;wreg free
  2553                           
  2554                           ;Main.c: 148: printf ("alarm = %d Heater = %d ", PORTAbits.RA4, HEATER);
  2555  000E24  0EA8               	movlw	low STR_3
  2556  000E26  6E1D               	movwf	printf@f,c
  2557  000E28  0EFE               	movlw	high STR_3
  2558  000E2A  6E1E               	movwf	printf@f+1,c
  2559  000E2C  A880               	btfss	3968,4,c	;volatile
  2560  000E2E  D004               	goto	u7410
  2561  000E30  0101               	movlb	1	; () banked
  2562  000E32  6B3E               	clrf	??_main& (0+255),b
  2563  000E34  2B3E               	incf	??_main& (0+255),f,b
  2564  000E36  D002               	goto	u7418
  2565  000E38                     u7410:
  2566  000E38  0101               	movlb	1	; () banked
  2567  000E3A  6B3E               	clrf	??_main& (0+255),b
  2568  000E3C                     u7418:
  2569  000E3C  0101               	movlb	1	; () banked
  2570  000E3E  513E               	movf	??_main& (0+255),w,b
  2571  000E40  6E1F               	movwf	?_printf+2,c
  2572  000E42  6A20               	clrf	?_printf+3,c
  2573  000E44  C04E  F021         	movff	_HEATER,?_printf+4
  2574  000E48  6A22               	clrf	?_printf+5,c
  2575  000E4A  ECDE  F004         	call	_printf	;wreg free
  2576                           
  2577                           ;Main.c: 149: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2578  000E4E  0E2A               	movlw	low STR_4
  2579  000E50  6E1D               	movwf	printf@f,c
  2580  000E52  0EFF               	movlw	high STR_4
  2581  000E54  6E1E               	movwf	printf@f+1,c
  2582  000E56  C049  F01F         	movff	_rpm,?_printf+2
  2583  000E5A  C04A  F020         	movff	_rpm+1,?_printf+3
  2584  000E5E  C05D  F021         	movff	_duty_cycle,?_printf+4
  2585  000E62  6A22               	clrf	?_printf+5,c
  2586  000E64  ECDE  F004         	call	_printf	;wreg free
  2587                           
  2588                           ;Main.c: 151: Set_RPM_RGB(rpm);
  2589  000E68  C049  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2590  000E6C  C04A  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2591  000E70  ECEE  F017         	call	_Set_RPM_RGB	;wreg free
  2592                           
  2593                           ;Main.c: 152: Set_Alarm_RGB_Color(0);
  2594  000E74  0E00               	movlw	0
  2595  000E76  EC7D  F017         	call	_Set_Alarm_RGB_Color
  2596                           
  2597                           ;Main.c: 153: Monitor_Heater();
  2598  000E7A  EC0D  F01C         	call	_Monitor_Heater	;wreg free
  2599                           
  2600                           ;Main.c: 154: Test_Alarm();
  2601  000E7E  EC4C  F00E         	call	_Test_Alarm	;wreg free
  2602                           
  2603                           ;Main.c: 155: Update_Screen();
  2604  000E82  EC0E  F000         	call	_Update_Screen	;wreg free
  2605  000E86  D000               	goto	l10035
  2606  000E88                     l10035:
  2607                           
  2608                           ;Main.c: 156: }
  2609                           ;Main.c: 158: if (check_for_button_input() == 1)
  2610  000E88  ECAA  F015         	call	_check_for_button_input	;wreg free
  2611  000E8C  06E8               	decf	wreg,f,c
  2612  000E8E  A4D8               	btfss	status,2,c
  2613  000E90  D74D               	goto	l10001
  2614                           
  2615                           ;Main.c: 159: {
  2616                           ;Main.c: 160: nec_ok = 0;
  2617  000E92  0E00               	movlw	0
  2618  000E94  0100               	movlb	0	; () banked
  2619  000E96  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  2620  000E98  0E00               	movlw	0
  2621  000E9A  6FF2               	movwf	_nec_ok& (0+255),b
  2622                           
  2623                           ;Main.c: 161: switch (found)
  2624  000E9C  D017               	goto	l10059
  2625  000E9E                     l10039:
  2626                           
  2627                           ;Main.c: 164: Do_Beep_Good();
  2628  000E9E  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  2629                           
  2630                           ;Main.c: 165: Do_Setup_Time();
  2631  000EA2  ECFE  F011         	call	_Do_Setup_Time	;wreg free
  2632                           
  2633                           ;Main.c: 166: break;
  2634  000EA6  D742               	goto	l10001
  2635  000EA8                     l10043:
  2636                           
  2637                           ;Main.c: 169: Do_Beep_Good();
  2638  000EA8  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  2639                           
  2640                           ;Main.c: 170: Do_Setup_Alarm_Time();
  2641  000EAC  EC27  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2642                           
  2643                           ;Main.c: 171: break;
  2644  000EB0  D73D               	goto	l10001
  2645  000EB2                     l10047:
  2646                           
  2647                           ;Main.c: 174: Do_Beep_Good();
  2648  000EB2  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  2649                           
  2650                           ;Main.c: 175: Do_Setup_Heater_Temp();
  2651  000EB6  EC18  F015         	call	_Do_Setup_Heater_Temp	;wreg free
  2652                           
  2653                           ;Main.c: 176: break;
  2654  000EBA  D738               	goto	l10001
  2655  000EBC                     l10051:
  2656                           
  2657                           ;Main.c: 179: Do_Beep_Good();
  2658  000EBC  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  2659                           
  2660                           ;Main.c: 180: Toggle_Heater();
  2661  000EC0  ECB4  F01D         	call	_Toggle_Heater	;wreg free
  2662                           
  2663                           ;Main.c: 181: break;
  2664  000EC4  D733               	goto	l10001
  2665  000EC6                     l10055:
  2666                           
  2667                           ;Main.c: 184: Do_Beep_Bad();
  2668  000EC6  EC33  F01E         	call	_Do_Beep_Bad	;wreg free
  2669                           
  2670                           ;Main.c: 186: }
  2671                           
  2672                           ;Main.c: 185: break;
  2673  000ECA  D730               	goto	l10001
  2674  000ECC                     l10059:
  2675  000ECC  505E               	movf	_found,w,c
  2676                           
  2677                           ; Switch size 1, requested type "space"
  2678                           ; Number of cases is 4, Range of values is 0 to 5
  2679                           ; switch strategies available:
  2680                           ; Name         Instructions Cycles
  2681                           ; simple_byte           13     7 (average)
  2682                           ;	Chosen strategy is simple_byte
  2683  000ECE  0A00               	xorlw	0	; case 0
  2684  000ED0  B4D8               	btfsc	status,2,c
  2685  000ED2  D7E5               	goto	l10039
  2686  000ED4  0A01               	xorlw	1	; case 1
  2687  000ED6  B4D8               	btfsc	status,2,c
  2688  000ED8  D7E7               	goto	l10043
  2689  000EDA  0A03               	xorlw	3	; case 2
  2690  000EDC  B4D8               	btfsc	status,2,c
  2691  000EDE  D7E9               	goto	l10047
  2692  000EE0  0A07               	xorlw	7	; case 5
  2693  000EE2  B4D8               	btfsc	status,2,c
  2694  000EE4  D7EB               	goto	l10051
  2695  000EE6  D7EF               	goto	l10055
  2696  000EE8  D721               	goto	l10001
  2697  000EEA  EF0C  F000         	goto	start
  2698  000EEE                     __end_of_main:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1l	equ	0xFE1
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _get_RPM *****************
  2711 ;; Defined at:
  2712 ;;		line 39 in file "Fan_Support.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  RPS             2   32[COMRAM] int 
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  2   30[COMRAM] int 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;Total ram usage:        4 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    4
  2733 ;; This function calls:
  2734 ;;		___awdiv
  2735 ;;		___wmul
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text1
  2742  003592                     __ptext1:
  2743                           	opt stack 0
  2744  003592                     _get_RPM:
  2745                           	opt stack 26
  2746                           
  2747                           ;Fan_Support.c: 41: T3CON = 0x03;
  2748                           
  2749                           ;incstack = 0
  2750  003592  0E03               	movlw	3
  2751  003594  6EB1               	movwf	4017,c	;volatile
  2752                           
  2753                           ;Fan_Support.c: 42: int RPS = TMR3L / 2;
  2754  003596  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  2755  00359A  6A18               	clrf	___awdiv@dividend+1,c
  2756  00359C  0E00               	movlw	0
  2757  00359E  6E1A               	movwf	___awdiv@divisor+1,c
  2758  0035A0  0E02               	movlw	2
  2759  0035A2  6E19               	movwf	___awdiv@divisor,c
  2760  0035A4  ECCD  F014         	call	___awdiv	;wreg free
  2761  0035A8  C017  F021         	movff	?___awdiv,get_RPM@RPS
  2762  0035AC  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  2763                           
  2764                           ;Fan_Support.c: 44: TMR3L = 0;
  2765  0035B0  0E00               	movlw	0
  2766  0035B2  6EB2               	movwf	4018,c	;volatile
  2767                           
  2768                           ;Fan_Support.c: 45: return (RPS * 60);
  2769  0035B4  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2770  0035B8  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2771  0035BC  0E00               	movlw	0
  2772  0035BE  6E14               	movwf	___wmul@multiplicand+1,c
  2773  0035C0  0E3C               	movlw	60
  2774  0035C2  6E13               	movwf	___wmul@multiplicand,c
  2775  0035C4  EC7D  F01C         	call	___wmul	;wreg free
  2776  0035C8  C011  F01F         	movff	?___wmul,?_get_RPM
  2777  0035CC  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  2778  0035D0  D000               	goto	l41
  2779  0035D2                     l41:
  2780  0035D2  0012               	return		;funcret
  2781  0035D4                     __end_of_get_RPM:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           postdec1	equ	0xFE5
  2790                           fsr1l	equ	0xFE1
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _Update_Screen *****************
  2794 ;; Defined at:
  2795 ;;		line 76 in file "Main_Screen.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  neg_tempF       2    7[BANK1 ] int 
  2800 ;;  neg_DS1621_t    1    9[BANK1 ] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2  377[None  ] int 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;Total ram usage:        5 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:   10
  2817 ;; This function calls:
  2818 ;;		___awdiv
  2819 ;;		___awmod
  2820 ;;		___ftmul
  2821 ;;		___fttol
  2822 ;;		_drawtext
  2823 ;;		_strcpy
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text2
  2830  00001C                     __ptext2:
  2831                           	opt stack 0
  2832  00001C                     _Update_Screen:
  2833                           	opt stack 20
  2834                           
  2835                           ;Main_Screen.c: 78: if ((DS1621_tempC & 0x80) == 0x80)
  2836                           
  2837                           ;incstack = 0
  2838  00001C  AE43               	btfss	_DS1621_tempC,7,c
  2839  00001E  D020               	goto	l9615
  2840                           
  2841                           ;Main_Screen.c: 79: {
  2842                           ;Main_Screen.c: 80: tempC[0] = '-';
  2843  000020  0E2D               	movlw	45
  2844  000022  0100               	movlb	0	; () banked
  2845  000024  6FD9               	movwf	_tempC& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;Main_Screen.c: 81: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  2849  000026  5043               	movf	_DS1621_tempC,w,c
  2850  000028  0B7F               	andlw	127
  2851  00002A  0800               	sublw	0
  2852  00002C  0F80               	addlw	128
  2853  00002E  0101               	movlb	1	; () banked
  2854  000030  6F3D               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;Main_Screen.c: 82: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  2858  000032  C13D  F017         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  2859  000036  6A18               	clrf	___awdiv@dividend+1,c
  2860  000038  0E00               	movlw	0
  2861  00003A  6E1A               	movwf	___awdiv@divisor+1,c
  2862  00003C  0E0A               	movlw	10
  2863  00003E  6E19               	movwf	___awdiv@divisor,c
  2864  000040  ECCD  F014         	call	___awdiv	;wreg free
  2865  000044  5017               	movf	?___awdiv,w,c
  2866  000046  0F30               	addlw	48
  2867  000048  0100               	movlb	0	; () banked
  2868  00004A  6FDA               	movwf	(_tempC+1)& (0+255),b
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;Main_Screen.c: 83: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  2872  00004C  C13D  F03B         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  2873  000050  6A3C               	clrf	___awmod@dividend+1,c
  2874  000052  0E00               	movlw	0
  2875  000054  6E3E               	movwf	___awmod@divisor+1,c
  2876  000056  0E0A               	movlw	10
  2877  000058  6E3D               	movwf	___awmod@divisor,c
  2878  00005A  EC02  F017         	call	___awmod	;wreg free
  2879  00005E  D01B               	goto	L1
  2880  000060                     l9615:
  2881                           
  2882                           ;Main_Screen.c: 85: else
  2883                           ;Main_Screen.c: 86: {
  2884                           ;Main_Screen.c: 87: tempC[0] = '+';
  2885  000060  0E2B               	movlw	43
  2886  000062  0100               	movlb	0	; () banked
  2887  000064  6FD9               	movwf	_tempC& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Main_Screen.c: 88: tempC[1] = DS1621_tempC/10 + '0';
  2891  000066  C043  F017         	movff	_DS1621_tempC,___awdiv@dividend
  2892  00006A  C044  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2893  00006E  0E00               	movlw	0
  2894  000070  6E1A               	movwf	___awdiv@divisor+1,c
  2895  000072  0E0A               	movlw	10
  2896  000074  6E19               	movwf	___awdiv@divisor,c
  2897  000076  ECCD  F014         	call	___awdiv	;wreg free
  2898  00007A  5017               	movf	?___awdiv,w,c
  2899  00007C  0F30               	addlw	48
  2900  00007E  0100               	movlb	0	; () banked
  2901  000080  6FDA               	movwf	(_tempC+1)& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;Main_Screen.c: 89: tempC[2] = DS1621_tempC%10 + '0';
  2905  000082  C043  F03B         	movff	_DS1621_tempC,___awmod@dividend
  2906  000086  C044  F03C         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2907  00008A  0E00               	movlw	0
  2908  00008C  6E3E               	movwf	___awmod@divisor+1,c
  2909  00008E  0E0A               	movlw	10
  2910  000090  6E3D               	movwf	___awmod@divisor,c
  2911  000092  EC02  F017         	call	___awmod	;wreg free
  2912  000096                     L1:
  2913  000096  503B               	movf	?___awmod,w,c
  2914  000098  0F30               	addlw	48
  2915  00009A  0100               	movlb	0	; () banked
  2916  00009C  6FDB               	movwf	(_tempC+2)& (0+255),b
  2917  00009E  D000               	goto	l9621
  2918  0000A0                     l9621:
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;Main_Screen.c: 90: }
  2922                           ;Main_Screen.c: 92: if (DS1621_tempF < 0)
  2923  0000A0  AE46               	btfss	_DS1621_tempF+1,7,c
  2924  0000A2  D033               	goto	l9631
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;Main_Screen.c: 93: {
  2928                           ;Main_Screen.c: 94: tempF[0] = '-';
  2929  0000A4  0E2D               	movlw	45
  2930  0000A6  0100               	movlb	0	; () banked
  2931  0000A8  6FDD               	movwf	_tempF& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;Main_Screen.c: 95: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  2935  0000AA  0E7F               	movlw	127
  2936  0000AC  1445               	andwf	_DS1621_tempF,w,c
  2937  0000AE  0100               	movlb	0	; () banked
  2938  0000B0  6FFD               	movwf	??_Update_Screen& (0+255),b
  2939  0000B2  0E00               	movlw	0
  2940  0000B4  1446               	andwf	_DS1621_tempF+1,w,c
  2941  0000B6  0100               	movlb	0	; () banked
  2942  0000B8  6FFE               	movwf	(??_Update_Screen+1)& (0+255),b
  2943  0000BA  0100               	movlb	0	; () banked
  2944  0000BC  1FFD               	comf	??_Update_Screen& (0+255),f,b
  2945  0000BE  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  2946  0000C0  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  2947  0000C2  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  2948  0000C4  0E80               	movlw	128
  2949  0000C6  0100               	movlb	0	; () banked
  2950  0000C8  25FD               	addwf	??_Update_Screen& (0+255),w,b
  2951  0000CA  0101               	movlb	1	; () banked
  2952  0000CC  6F3B               	movwf	Update_Screen@neg_tempF& (0+255),b
  2953  0000CE  0E00               	movlw	0
  2954  0000D0  0100               	movlb	0	; () banked
  2955  0000D2  21FE               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  2956  0000D4  0101               	movlb	1	; () banked
  2957  0000D6  6F3C               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  2958                           
  2959                           ; BSR set to: 1
  2960                           ;Main_Screen.c: 96: tempF[1] = neg_tempF/10 + '0';
  2961  0000D8  C13B  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  2962  0000DC  C13C  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  2963  0000E0  0E00               	movlw	0
  2964  0000E2  6E1A               	movwf	___awdiv@divisor+1,c
  2965  0000E4  0E0A               	movlw	10
  2966  0000E6  6E19               	movwf	___awdiv@divisor,c
  2967  0000E8  ECCD  F014         	call	___awdiv	;wreg free
  2968  0000EC  5017               	movf	?___awdiv,w,c
  2969  0000EE  0F30               	addlw	48
  2970  0000F0  0100               	movlb	0	; () banked
  2971  0000F2  6FDE               	movwf	(_tempF+1)& (0+255),b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Main_Screen.c: 97: tempF[2] = neg_tempF%10 + '0';
  2975  0000F4  C13B  F03B         	movff	Update_Screen@neg_tempF,___awmod@dividend
  2976  0000F8  C13C  F03C         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  2977  0000FC  0E00               	movlw	0
  2978  0000FE  6E3E               	movwf	___awmod@divisor+1,c
  2979  000100  0E0A               	movlw	10
  2980  000102  6E3D               	movwf	___awmod@divisor,c
  2981  000104  EC02  F017         	call	___awmod	;wreg free
  2982  000108  D01B               	goto	L2
  2983  00010A                     l9631:
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;Main_Screen.c: 99: else
  2987                           ;Main_Screen.c: 100: {
  2988                           ;Main_Screen.c: 101: tempF[0] = '+';
  2989  00010A  0E2B               	movlw	43
  2990  00010C  0100               	movlb	0	; () banked
  2991  00010E  6FDD               	movwf	_tempF& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;Main_Screen.c: 102: tempF[1] = DS1621_tempF/10 + '0';
  2995  000110  C045  F017         	movff	_DS1621_tempF,___awdiv@dividend
  2996  000114  C046  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  2997  000118  0E00               	movlw	0
  2998  00011A  6E1A               	movwf	___awdiv@divisor+1,c
  2999  00011C  0E0A               	movlw	10
  3000  00011E  6E19               	movwf	___awdiv@divisor,c
  3001  000120  ECCD  F014         	call	___awdiv	;wreg free
  3002  000124  5017               	movf	?___awdiv,w,c
  3003  000126  0F30               	addlw	48
  3004  000128  0100               	movlb	0	; () banked
  3005  00012A  6FDE               	movwf	(_tempF+1)& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;Main_Screen.c: 103: tempF[2] = DS1621_tempF%10 + '0';
  3009  00012C  C045  F03B         	movff	_DS1621_tempF,___awmod@dividend
  3010  000130  C046  F03C         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3011  000134  0E00               	movlw	0
  3012  000136  6E3E               	movwf	___awmod@divisor+1,c
  3013  000138  0E0A               	movlw	10
  3014  00013A  6E3D               	movwf	___awmod@divisor,c
  3015  00013C  EC02  F017         	call	___awmod	;wreg free
  3016  000140                     L2:
  3017  000140  503B               	movf	?___awmod,w,c
  3018  000142  0F30               	addlw	48
  3019  000144  0100               	movlb	0	; () banked
  3020  000146  6FDF               	movwf	(_tempF+2)& (0+255),b
  3021  000148  D000               	goto	l9637
  3022  00014A                     l9637:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;Main_Screen.c: 104: }
  3026                           ;Main_Screen.c: 106: time[0] = (hour>>4) + '0';
  3027  00014A  385F               	swapf	_hour,w,c
  3028  00014C  0B0F               	andlw	15
  3029  00014E  0F30               	addlw	48
  3030  000150  0100               	movlb	0	; () banked
  3031  000152  6FAF               	movwf	_time& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;Main_Screen.c: 107: time[1] = (hour & 0x0f)+ '0';
  3035  000154  505F               	movf	_hour,w,c
  3036  000156  0B0F               	andlw	15
  3037  000158  0F30               	addlw	48
  3038  00015A  0100               	movlb	0	; () banked
  3039  00015C  6FB0               	movwf	(_time+1)& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3043  00015E  3860               	swapf	_minute,w,c
  3044  000160  0B0F               	andlw	15
  3045  000162  0F30               	addlw	48
  3046  000164  0100               	movlb	0	; () banked
  3047  000166  6FB2               	movwf	(_time+3)& (0+255),b
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f)+ '0';
  3051  000168  5060               	movf	_minute,w,c
  3052  00016A  0B0F               	andlw	15
  3053  00016C  0F30               	addlw	48
  3054  00016E  0100               	movlb	0	; () banked
  3055  000170  6FB3               	movwf	(_time+4)& (0+255),b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;Main_Screen.c: 112: time[6] = (second>>4) + '0';
  3059  000172  3863               	swapf	_second,w,c
  3060  000174  0B0F               	andlw	15
  3061  000176  0F30               	addlw	48
  3062  000178  0100               	movlb	0	; () banked
  3063  00017A  6FB5               	movwf	(_time+6)& (0+255),b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;Main_Screen.c: 113: time[7] = (second & 0x0f)+ '0';
  3067  00017C  5063               	movf	_second,w,c
  3068  00017E  0B0F               	andlw	15
  3069  000180  0F30               	addlw	48
  3070  000182  0100               	movlb	0	; () banked
  3071  000184  6FB6               	movwf	(_time+7)& (0+255),b
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;Main_Screen.c: 115: date[0] = (month>>4) + '0';
  3075  000186  3861               	swapf	_month,w,c
  3076  000188  0B0F               	andlw	15
  3077  00018A  0F30               	addlw	48
  3078  00018C  0100               	movlb	0	; () banked
  3079  00018E  6F8B               	movwf	_date& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Main_Screen.c: 116: date[1] = (month & 0x0f)+ '0';
  3083  000190  5061               	movf	_month,w,c
  3084  000192  0B0F               	andlw	15
  3085  000194  0F30               	addlw	48
  3086  000196  0100               	movlb	0	; () banked
  3087  000198  6F8C               	movwf	(_date+1)& (0+255),b
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;Main_Screen.c: 118: date[3] = (day>>4) + '0';
  3091  00019A  385B               	swapf	_day,w,c
  3092  00019C  0B0F               	andlw	15
  3093  00019E  0F30               	addlw	48
  3094  0001A0  0100               	movlb	0	; () banked
  3095  0001A2  6F8E               	movwf	(_date+3)& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;Main_Screen.c: 119: date[4] = (day & 0x0f)+'0';
  3099  0001A4  505B               	movf	_day,w,c
  3100  0001A6  0B0F               	andlw	15
  3101  0001A8  0F30               	addlw	48
  3102  0001AA  0100               	movlb	0	; () banked
  3103  0001AC  6F8F               	movwf	(_date+4)& (0+255),b
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;Main_Screen.c: 121: date[6] = (year>>4) + '0';
  3107  0001AE  386E               	swapf	_year,w,c
  3108  0001B0  0B0F               	andlw	15
  3109  0001B2  0F30               	addlw	48
  3110  0001B4  0100               	movlb	0	; () banked
  3111  0001B6  6F91               	movwf	(_date+6)& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;Main_Screen.c: 122: date[7] = (year & 0x0f) + '0';
  3115  0001B8  506E               	movf	_year,w,c
  3116  0001BA  0B0F               	andlw	15
  3117  0001BC  0F30               	addlw	48
  3118  0001BE  0100               	movlb	0	; () banked
  3119  0001C0  6F92               	movwf	(_date+7)& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;Main_Screen.c: 124: alarm_time[0] = (alarm_hour>>4) + '0';
  3123  0001C2  3856               	swapf	_alarm_hour,w,c
  3124  0001C4  0B0F               	andlw	15
  3125  0001C6  0F30               	addlw	48
  3126  0001C8  0100               	movlb	0	; () banked
  3127  0001CA  6F82               	movwf	_alarm_time& (0+255),b
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;Main_Screen.c: 125: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3131  0001CC  5056               	movf	_alarm_hour,w,c
  3132  0001CE  0B0F               	andlw	15
  3133  0001D0  0F30               	addlw	48
  3134  0001D2  0100               	movlb	0	; () banked
  3135  0001D4  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Main_Screen.c: 127: alarm_time[3] = (alarm_minute>>4) + '0';
  3139  0001D6  3857               	swapf	_alarm_minute,w,c
  3140  0001D8  0B0F               	andlw	15
  3141  0001DA  0F30               	addlw	48
  3142  0001DC  0100               	movlb	0	; () banked
  3143  0001DE  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Main_Screen.c: 128: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3147  0001E0  5057               	movf	_alarm_minute,w,c
  3148  0001E2  0B0F               	andlw	15
  3149  0001E4  0F30               	addlw	48
  3150  0001E6  0100               	movlb	0	; () banked
  3151  0001E8  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;Main_Screen.c: 130: alarm_time[6] = (alarm_second>>4) + '0';
  3155  0001EA  3858               	swapf	_alarm_second,w,c
  3156  0001EC  0B0F               	andlw	15
  3157  0001EE  0F30               	addlw	48
  3158  0001F0  0100               	movlb	0	; () banked
  3159  0001F2  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;Main_Screen.c: 131: alarm_time[7] = (alarm_second & 0x0f) + '0';
  3163  0001F4  5058               	movf	_alarm_second,w,c
  3164  0001F6  0B0F               	andlw	15
  3165  0001F8  0F30               	addlw	48
  3166  0001FA  0100               	movlb	0	; () banked
  3167  0001FC  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;Main_Screen.c: 133: if (ALARMEN == 1)
  3171  0001FE  0441               	decf	_ALARMEN,w,c
  3172  000200  1042               	iorwf	_ALARMEN+1,w,c
  3173  000202  A4D8               	btfss	status,2,c
  3174  000204  D00B               	goto	l9677
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;Main_Screen.c: 134: {
  3178                           ;Main_Screen.c: 135: strcpy(Alarm_SW_Txt, "ON ");
  3179  000206  0ECD               	movlw	low _Alarm_SW_Txt
  3180  000208  6E11               	movwf	strcpy@to,c
  3181  00020A  0E00               	movlw	high _Alarm_SW_Txt
  3182  00020C  6E12               	movwf	strcpy@to+1,c
  3183  00020E  0EEA               	movlw	low STR_19
  3184  000210  6E13               	movwf	strcpy@from,c
  3185  000212  0EFF               	movlw	high STR_19
  3186  000214  6E14               	movwf	strcpy@from+1,c
  3187  000216  ECF4  F01B         	call	_strcpy	;wreg free
  3188                           
  3189                           ;Main_Screen.c: 136: }
  3190  00021A  D00B               	goto	l9679
  3191  00021C                     l9677:
  3192                           
  3193                           ;Main_Screen.c: 137: else
  3194                           ;Main_Screen.c: 138: {
  3195                           ;Main_Screen.c: 139: strcpy(Alarm_SW_Txt, "OFF");
  3196  00021C  0ECD               	movlw	low _Alarm_SW_Txt
  3197  00021E  6E11               	movwf	strcpy@to,c
  3198  000220  0E00               	movlw	high _Alarm_SW_Txt
  3199  000222  6E12               	movwf	strcpy@to+1,c
  3200  000224  0EEE               	movlw	low STR_20
  3201  000226  6E13               	movwf	strcpy@from,c
  3202  000228  0EFF               	movlw	high STR_20
  3203  00022A  6E14               	movwf	strcpy@from+1,c
  3204  00022C  ECF4  F01B         	call	_strcpy	;wreg free
  3205  000230  D000               	goto	l9679
  3206  000232                     l9679:
  3207                           
  3208                           ;Main_Screen.c: 140: }
  3209                           ;Main_Screen.c: 142: Heater_Set_Temp_Txt[0] = (heater_set_temp/100) + '0';
  3210  000232  C06F  F017         	movff	_heater_set_temp,___awdiv@dividend
  3211  000236  6A18               	clrf	___awdiv@dividend+1,c
  3212  000238  0E00               	movlw	0
  3213  00023A  6E1A               	movwf	___awdiv@divisor+1,c
  3214  00023C  0E64               	movlw	100
  3215  00023E  6E19               	movwf	___awdiv@divisor,c
  3216  000240  ECCD  F014         	call	___awdiv	;wreg free
  3217  000244  5017               	movf	?___awdiv,w,c
  3218  000246  0F30               	addlw	48
  3219  000248  0100               	movlb	0	; () banked
  3220  00024A  6FBE               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Main_Screen.c: 143: Heater_Set_Temp_Txt[1] = (heater_set_temp/10) %10 + '0';
  3224  00024C  0E00               	movlw	0
  3225  00024E  6E1A               	movwf	___awdiv@divisor+1,c
  3226  000250  0E0A               	movlw	10
  3227  000252  6E19               	movwf	___awdiv@divisor,c
  3228  000254  C06F  F017         	movff	_heater_set_temp,___awdiv@dividend
  3229  000258  6A18               	clrf	___awdiv@dividend+1,c
  3230  00025A  ECCD  F014         	call	___awdiv	;wreg free
  3231  00025E  C017  F03B         	movff	?___awdiv,___awmod@dividend
  3232  000262  C018  F03C         	movff	?___awdiv+1,___awmod@dividend+1
  3233  000266  0E00               	movlw	0
  3234  000268  6E3E               	movwf	___awmod@divisor+1,c
  3235  00026A  0E0A               	movlw	10
  3236  00026C  6E3D               	movwf	___awmod@divisor,c
  3237  00026E  EC02  F017         	call	___awmod	;wreg free
  3238  000272  503B               	movf	?___awmod,w,c
  3239  000274  0F30               	addlw	48
  3240  000276  0100               	movlb	0	; () banked
  3241  000278  6FBF               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;Main_Screen.c: 144: Heater_Set_Temp_Txt[2] = (heater_set_temp%10) + '0';
  3245  00027A  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3246  00027E  6A3C               	clrf	___awmod@dividend+1,c
  3247  000280  0E00               	movlw	0
  3248  000282  6E3E               	movwf	___awmod@divisor+1,c
  3249  000284  0E0A               	movlw	10
  3250  000286  6E3D               	movwf	___awmod@divisor,c
  3251  000288  EC02  F017         	call	___awmod	;wreg free
  3252  00028C  503B               	movf	?___awmod,w,c
  3253  00028E  0F30               	addlw	48
  3254  000290  0100               	movlb	0	; () banked
  3255  000292  6FC0               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;Main_Screen.c: 146: if (HEATER == 1)
  3259  000294  044E               	decf	_HEATER,w,c
  3260  000296  A4D8               	btfss	status,2,c
  3261  000298  D00B               	goto	l9689
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;Main_Screen.c: 147: {
  3265                           ;Main_Screen.c: 148: strcpy(Heater_SW_Txt, "ON ");
  3266  00029A  0ED5               	movlw	low _Heater_SW_Txt
  3267  00029C  6E11               	movwf	strcpy@to,c
  3268  00029E  0E00               	movlw	high _Heater_SW_Txt
  3269  0002A0  6E12               	movwf	strcpy@to+1,c
  3270  0002A2  0EEA               	movlw	low STR_19
  3271  0002A4  6E13               	movwf	strcpy@from,c
  3272  0002A6  0EFF               	movlw	high STR_19
  3273  0002A8  6E14               	movwf	strcpy@from+1,c
  3274  0002AA  ECF4  F01B         	call	_strcpy	;wreg free
  3275                           
  3276                           ;Main_Screen.c: 149: }
  3277  0002AE  D00B               	goto	l9691
  3278  0002B0                     l9689:
  3279                           
  3280                           ;Main_Screen.c: 150: else
  3281                           ;Main_Screen.c: 151: {
  3282                           ;Main_Screen.c: 152: strcpy(Heater_SW_Txt, "OFF");
  3283  0002B0  0ED5               	movlw	low _Heater_SW_Txt
  3284  0002B2  6E11               	movwf	strcpy@to,c
  3285  0002B4  0E00               	movlw	high _Heater_SW_Txt
  3286  0002B6  6E12               	movwf	strcpy@to+1,c
  3287  0002B8  0EEE               	movlw	low STR_20
  3288  0002BA  6E13               	movwf	strcpy@from,c
  3289  0002BC  0EFF               	movlw	high STR_20
  3290  0002BE  6E14               	movwf	strcpy@from+1,c
  3291  0002C0  ECF4  F01B         	call	_strcpy	;wreg free
  3292  0002C4  D000               	goto	l9691
  3293  0002C6                     l9691:
  3294                           
  3295                           ;Main_Screen.c: 153: }
  3296                           ;Main_Screen.c: 155: if (PORTAbits.RA4 == 0) RTC_ALARM_Txt[0] = '1';
  3297  0002C6  B880               	btfsc	3968,4,c	;volatile
  3298  0002C8  D002               	goto	l9695
  3299  0002CA  0E31               	movlw	49
  3300  0002CC  D001               	goto	L3
  3301  0002CE                     l9695:
  3302                           
  3303                           ;Main_Screen.c: 156: else RTC_ALARM_Txt[0] = '0';
  3304  0002CE  0E30               	movlw	48
  3305  0002D0                     L3:
  3306  0002D0  0100               	movlb	0	; () banked
  3307  0002D2  6FE1               	movwf	_RTC_ALARM_Txt& (0+255),b
  3308  0002D4  D000               	goto	l9697
  3309  0002D6                     l9697:
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;Main_Screen.c: 159: DC_Txt[0] = duty_cycle /100 + '0';
  3313  0002D6  C05D  F017         	movff	_duty_cycle,___awdiv@dividend
  3314  0002DA  6A18               	clrf	___awdiv@dividend+1,c
  3315  0002DC  0E00               	movlw	0
  3316  0002DE  6E1A               	movwf	___awdiv@divisor+1,c
  3317  0002E0  0E64               	movlw	100
  3318  0002E2  6E19               	movwf	___awdiv@divisor,c
  3319  0002E4  ECCD  F014         	call	___awdiv	;wreg free
  3320  0002E8  5017               	movf	?___awdiv,w,c
  3321  0002EA  0F30               	addlw	48
  3322  0002EC  0100               	movlb	0	; () banked
  3323  0002EE  6FD1               	movwf	_DC_Txt& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;Main_Screen.c: 160: DC_Txt[1] = (duty_cycle/10)%10 + '0';
  3327  0002F0  0E00               	movlw	0
  3328  0002F2  6E1A               	movwf	___awdiv@divisor+1,c
  3329  0002F4  0E0A               	movlw	10
  3330  0002F6  6E19               	movwf	___awdiv@divisor,c
  3331  0002F8  C05D  F017         	movff	_duty_cycle,___awdiv@dividend
  3332  0002FC  6A18               	clrf	___awdiv@dividend+1,c
  3333  0002FE  ECCD  F014         	call	___awdiv	;wreg free
  3334  000302  C017  F03B         	movff	?___awdiv,___awmod@dividend
  3335  000306  C018  F03C         	movff	?___awdiv+1,___awmod@dividend+1
  3336  00030A  0E00               	movlw	0
  3337  00030C  6E3E               	movwf	___awmod@divisor+1,c
  3338  00030E  0E0A               	movlw	10
  3339  000310  6E3D               	movwf	___awmod@divisor,c
  3340  000312  EC02  F017         	call	___awmod	;wreg free
  3341  000316  503B               	movf	?___awmod,w,c
  3342  000318  0F30               	addlw	48
  3343  00031A  0100               	movlb	0	; () banked
  3344  00031C  6FD2               	movwf	(_DC_Txt+1)& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;Main_Screen.c: 161: DC_Txt[2] = duty_cycle %10 +'0';
  3348  00031E  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3349  000322  6A3C               	clrf	___awmod@dividend+1,c
  3350  000324  0E00               	movlw	0
  3351  000326  6E3E               	movwf	___awmod@divisor+1,c
  3352  000328  0E0A               	movlw	10
  3353  00032A  6E3D               	movwf	___awmod@divisor,c
  3354  00032C  EC02  F017         	call	___awmod	;wreg free
  3355  000330  503B               	movf	?___awmod,w,c
  3356  000332  0F30               	addlw	48
  3357  000334  0100               	movlb	0	; () banked
  3358  000336  6FD3               	movwf	(_DC_Txt+2)& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Main_Screen.c: 163: Volt_Txt[0] = ((int) volt) + '0';
  3362  000338  C0E7  F02C         	movff	_volt,___fttol@f1
  3363  00033C  C0E8  F02D         	movff	_volt+1,___fttol@f1+1
  3364  000340  C0E9  F02E         	movff	_volt+2,___fttol@f1+2
  3365  000344  EC3C  F010         	call	___fttol	;wreg free
  3366  000348  502C               	movf	?___fttol,w,c
  3367  00034A  0F30               	addlw	48
  3368  00034C  0100               	movlb	0	; () banked
  3369  00034E  6FB8               	movwf	_Volt_Txt& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Main_Screen.c: 164: Volt_Txt[2] = ((int) (volt*10)%10) + '0';
  3373  000350  0E00               	movlw	0
  3374  000352  6E20               	movwf	___ftmul@f2,c
  3375  000354  0E20               	movlw	32
  3376  000356  6E21               	movwf	___ftmul@f2+1,c
  3377  000358  0E41               	movlw	65
  3378  00035A  6E22               	movwf	___ftmul@f2+2,c
  3379  00035C  C0E7  F01D         	movff	_volt,___ftmul@f1
  3380  000360  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3381  000364  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3382  000368  ECCE  F00E         	call	___ftmul	;wreg free
  3383  00036C  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3384  000370  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3385  000374  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3386  000378  EC3C  F010         	call	___fttol	;wreg free
  3387  00037C  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3388  000380  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3389  000384  0E00               	movlw	0
  3390  000386  6E3E               	movwf	___awmod@divisor+1,c
  3391  000388  0E0A               	movlw	10
  3392  00038A  6E3D               	movwf	___awmod@divisor,c
  3393  00038C  EC02  F017         	call	___awmod	;wreg free
  3394  000390  503B               	movf	?___awmod,w,c
  3395  000392  0F30               	addlw	48
  3396  000394  0100               	movlb	0	; () banked
  3397  000396  6FBA               	movwf	(_Volt_Txt+2)& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Main_Screen.c: 165: Volt_Txt[3] = ((int) (volt*100) %10) + '0';
  3401  000398  0E00               	movlw	0
  3402  00039A  6E20               	movwf	___ftmul@f2,c
  3403  00039C  0EC8               	movlw	200
  3404  00039E  6E21               	movwf	___ftmul@f2+1,c
  3405  0003A0  0E42               	movlw	66
  3406  0003A2  6E22               	movwf	___ftmul@f2+2,c
  3407  0003A4  C0E7  F01D         	movff	_volt,___ftmul@f1
  3408  0003A8  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3409  0003AC  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3410  0003B0  ECCE  F00E         	call	___ftmul	;wreg free
  3411  0003B4  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3412  0003B8  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3413  0003BC  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3414  0003C0  EC3C  F010         	call	___fttol	;wreg free
  3415  0003C4  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3416  0003C8  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3417  0003CC  0E00               	movlw	0
  3418  0003CE  6E3E               	movwf	___awmod@divisor+1,c
  3419  0003D0  0E0A               	movlw	10
  3420  0003D2  6E3D               	movwf	___awmod@divisor,c
  3421  0003D4  EC02  F017         	call	___awmod	;wreg free
  3422  0003D8  503B               	movf	?___awmod,w,c
  3423  0003DA  0F30               	addlw	48
  3424  0003DC  0100               	movlb	0	; () banked
  3425  0003DE  6FBB               	movwf	(_Volt_Txt+3)& (0+255),b
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;Main_Screen.c: 167: RPM_Txt[0] = rpm/1000 + '0';
  3429  0003E0  C049  F017         	movff	_rpm,___awdiv@dividend
  3430  0003E4  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3431  0003E8  0E03               	movlw	3
  3432  0003EA  6E1A               	movwf	___awdiv@divisor+1,c
  3433  0003EC  0EE8               	movlw	232
  3434  0003EE  6E19               	movwf	___awdiv@divisor,c
  3435  0003F0  ECCD  F014         	call	___awdiv	;wreg free
  3436  0003F4  5017               	movf	?___awdiv,w,c
  3437  0003F6  0F30               	addlw	48
  3438  0003F8  0100               	movlb	0	; () banked
  3439  0003FA  6FC3               	movwf	_RPM_Txt& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;Main_Screen.c: 168: RPM_Txt[1] = (rpm/100) % 10 +'0';
  3443  0003FC  0E00               	movlw	0
  3444  0003FE  6E1A               	movwf	___awdiv@divisor+1,c
  3445  000400  0E64               	movlw	100
  3446  000402  6E19               	movwf	___awdiv@divisor,c
  3447  000404  C049  F017         	movff	_rpm,___awdiv@dividend
  3448  000408  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3449  00040C  ECCD  F014         	call	___awdiv	;wreg free
  3450  000410  C017  F03B         	movff	?___awdiv,___awmod@dividend
  3451  000414  C018  F03C         	movff	?___awdiv+1,___awmod@dividend+1
  3452  000418  0E00               	movlw	0
  3453  00041A  6E3E               	movwf	___awmod@divisor+1,c
  3454  00041C  0E0A               	movlw	10
  3455  00041E  6E3D               	movwf	___awmod@divisor,c
  3456  000420  EC02  F017         	call	___awmod	;wreg free
  3457  000424  503B               	movf	?___awmod,w,c
  3458  000426  0F30               	addlw	48
  3459  000428  0100               	movlb	0	; () banked
  3460  00042A  6FC4               	movwf	(_RPM_Txt+1)& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;Main_Screen.c: 169: RPM_Txt[2] = (rpm/10) % 10 +'0';
  3464  00042C  0E00               	movlw	0
  3465  00042E  6E1A               	movwf	___awdiv@divisor+1,c
  3466  000430  0E0A               	movlw	10
  3467  000432  6E19               	movwf	___awdiv@divisor,c
  3468  000434  C049  F017         	movff	_rpm,___awdiv@dividend
  3469  000438  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3470  00043C  ECCD  F014         	call	___awdiv	;wreg free
  3471  000440  C017  F03B         	movff	?___awdiv,___awmod@dividend
  3472  000444  C018  F03C         	movff	?___awdiv+1,___awmod@dividend+1
  3473  000448  0E00               	movlw	0
  3474  00044A  6E3E               	movwf	___awmod@divisor+1,c
  3475  00044C  0E0A               	movlw	10
  3476  00044E  6E3D               	movwf	___awmod@divisor,c
  3477  000450  EC02  F017         	call	___awmod	;wreg free
  3478  000454  503B               	movf	?___awmod,w,c
  3479  000456  0F30               	addlw	48
  3480  000458  0100               	movlb	0	; () banked
  3481  00045A  6FC5               	movwf	(_RPM_Txt+2)& (0+255),b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;Main_Screen.c: 170: RPM_Txt[3] = rpm %10 + '0';
  3485  00045C  C049  F03B         	movff	_rpm,___awmod@dividend
  3486  000460  C04A  F03C         	movff	_rpm+1,___awmod@dividend+1
  3487  000464  0E00               	movlw	0
  3488  000466  6E3E               	movwf	___awmod@divisor+1,c
  3489  000468  0E0A               	movlw	10
  3490  00046A  6E3D               	movwf	___awmod@divisor,c
  3491  00046C  EC02  F017         	call	___awmod	;wreg free
  3492  000470  503B               	movf	?___awmod,w,c
  3493  000472  0F30               	addlw	48
  3494  000474  0100               	movlb	0	; () banked
  3495  000476  6FC6               	movwf	(_RPM_Txt+3)& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;Main_Screen.c: 172: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3499  000478  0E17               	movlw	23
  3500  00047A  6E39               	movwf	drawtext@y,c
  3501  00047C  0ED9               	movlw	low _tempC
  3502  00047E  6E3A               	movwf	drawtext@_text,c
  3503  000480  0E00               	movlw	high _tempC
  3504  000482  6E3B               	movwf	drawtext@_text+1,c
  3505  000484  0EFF               	movlw	255
  3506  000486  6E3D               	movwf	drawtext@color+1,c
  3507  000488  0EE0               	movlw	224
  3508  00048A  6E3C               	movwf	drawtext@color,c
  3509  00048C  0E00               	movlw	0
  3510  00048E  6E3F               	movwf	drawtext@bg+1,c
  3511  000490  0E00               	movlw	0
  3512  000492  6E3E               	movwf	drawtext@bg,c
  3513  000494  0E02               	movlw	2
  3514  000496  6E40               	movwf	drawtext@size,c
  3515  000498  0E01               	movlw	1
  3516  00049A  EC2B  F00C         	call	_drawtext
  3517                           
  3518                           ;Main_Screen.c: 173: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3519  00049E  0E17               	movlw	23
  3520  0004A0  6E39               	movwf	drawtext@y,c
  3521  0004A2  0EDD               	movlw	low _tempF
  3522  0004A4  6E3A               	movwf	drawtext@_text,c
  3523  0004A6  0E00               	movlw	high _tempF
  3524  0004A8  6E3B               	movwf	drawtext@_text+1,c
  3525  0004AA  0EFF               	movlw	255
  3526  0004AC  6E3D               	movwf	drawtext@color+1,c
  3527  0004AE  0EE0               	movlw	224
  3528  0004B0  6E3C               	movwf	drawtext@color,c
  3529  0004B2  0E00               	movlw	0
  3530  0004B4  6E3F               	movwf	drawtext@bg+1,c
  3531  0004B6  0E00               	movlw	0
  3532  0004B8  6E3E               	movwf	drawtext@bg,c
  3533  0004BA  0E02               	movlw	2
  3534  0004BC  6E40               	movwf	drawtext@size,c
  3535  0004BE  0E46               	movlw	70
  3536  0004C0  EC2B  F00C         	call	_drawtext
  3537                           
  3538                           ;Main_Screen.c: 174: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3539  0004C4  0E34               	movlw	52
  3540  0004C6  6E39               	movwf	drawtext@y,c
  3541  0004C8  0EAF               	movlw	low _time
  3542  0004CA  6E3A               	movwf	drawtext@_text,c
  3543  0004CC  0E00               	movlw	high _time
  3544  0004CE  6E3B               	movwf	drawtext@_text+1,c
  3545  0004D0  0E07               	movlw	7
  3546  0004D2  6E3D               	movwf	drawtext@color+1,c
  3547  0004D4  683C               	setf	drawtext@color,c
  3548  0004D6  0E00               	movlw	0
  3549  0004D8  6E3F               	movwf	drawtext@bg+1,c
  3550  0004DA  0E00               	movlw	0
  3551  0004DC  6E3E               	movwf	drawtext@bg,c
  3552  0004DE  0E02               	movlw	2
  3553  0004E0  6E40               	movwf	drawtext@size,c
  3554  0004E2  0E0F               	movlw	15
  3555  0004E4  EC2B  F00C         	call	_drawtext
  3556                           
  3557                           ;Main_Screen.c: 175: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3558  0004E8  0E52               	movlw	82
  3559  0004EA  6E39               	movwf	drawtext@y,c
  3560  0004EC  0E8B               	movlw	low _date
  3561  0004EE  6E3A               	movwf	drawtext@_text,c
  3562  0004F0  0E00               	movlw	high _date
  3563  0004F2  6E3B               	movwf	drawtext@_text+1,c
  3564  0004F4  0E07               	movlw	7
  3565  0004F6  6E3D               	movwf	drawtext@color+1,c
  3566  0004F8  0EE0               	movlw	224
  3567  0004FA  6E3C               	movwf	drawtext@color,c
  3568  0004FC  0E00               	movlw	0
  3569  0004FE  6E3F               	movwf	drawtext@bg+1,c
  3570  000500  0E00               	movlw	0
  3571  000502  6E3E               	movwf	drawtext@bg,c
  3572  000504  0E02               	movlw	2
  3573  000506  6E40               	movwf	drawtext@size,c
  3574  000508  0E0F               	movlw	15
  3575  00050A  EC2B  F00C         	call	_drawtext
  3576                           
  3577                           ;Main_Screen.c: 176: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3578  00050E  0E6E               	movlw	110
  3579  000510  6E39               	movwf	drawtext@y,c
  3580  000512  0E82               	movlw	low _alarm_time
  3581  000514  6E3A               	movwf	drawtext@_text,c
  3582  000516  0E00               	movlw	high _alarm_time
  3583  000518  6E3B               	movwf	drawtext@_text+1,c
  3584  00051A  0E07               	movlw	7
  3585  00051C  6E3D               	movwf	drawtext@color+1,c
  3586  00051E  683C               	setf	drawtext@color,c
  3587  000520  0E00               	movlw	0
  3588  000522  6E3F               	movwf	drawtext@bg+1,c
  3589  000524  0E00               	movlw	0
  3590  000526  6E3E               	movwf	drawtext@bg,c
  3591  000528  0E01               	movlw	1
  3592  00052A  6E40               	movwf	drawtext@size,c
  3593  00052C  0E0A               	movlw	10
  3594  00052E  EC2B  F00C         	call	_drawtext
  3595                           
  3596                           ;Main_Screen.c: 177: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3597  000532  0E6E               	movlw	110
  3598  000534  6E39               	movwf	drawtext@y,c
  3599  000536  0ECD               	movlw	low _Alarm_SW_Txt
  3600  000538  6E3A               	movwf	drawtext@_text,c
  3601  00053A  0E00               	movlw	high _Alarm_SW_Txt
  3602  00053C  6E3B               	movwf	drawtext@_text+1,c
  3603  00053E  0E07               	movlw	7
  3604  000540  6E3D               	movwf	drawtext@color+1,c
  3605  000542  683C               	setf	drawtext@color,c
  3606  000544  0E00               	movlw	0
  3607  000546  6E3F               	movwf	drawtext@bg+1,c
  3608  000548  0E00               	movlw	0
  3609  00054A  6E3E               	movwf	drawtext@bg,c
  3610  00054C  0E01               	movlw	1
  3611  00054E  6E40               	movwf	drawtext@size,c
  3612  000550  0E5F               	movlw	95
  3613  000552  EC2B  F00C         	call	_drawtext
  3614                           
  3615                           ;Main_Screen.c: 178: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3616  000556  0E82               	movlw	130
  3617  000558  6E39               	movwf	drawtext@y,c
  3618  00055A  0EBE               	movlw	low _Heater_Set_Temp_Txt
  3619  00055C  6E3A               	movwf	drawtext@_text,c
  3620  00055E  0E00               	movlw	high _Heater_Set_Temp_Txt
  3621  000560  6E3B               	movwf	drawtext@_text+1,c
  3622  000562  0EF8               	movlw	248
  3623  000564  6E3D               	movwf	drawtext@color+1,c
  3624  000566  0E00               	movlw	0
  3625  000568  6E3C               	movwf	drawtext@color,c
  3626  00056A  0E00               	movlw	0
  3627  00056C  6E3F               	movwf	drawtext@bg+1,c
  3628  00056E  0E00               	movlw	0
  3629  000570  6E3E               	movwf	drawtext@bg,c
  3630  000572  0E01               	movlw	1
  3631  000574  6E40               	movwf	drawtext@size,c
  3632  000576  0E23               	movlw	35
  3633  000578  EC2B  F00C         	call	_drawtext
  3634                           
  3635                           ;Main_Screen.c: 179: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  3636  00057C  0E82               	movlw	130
  3637  00057E  6E39               	movwf	drawtext@y,c
  3638  000580  0ED5               	movlw	low _Heater_SW_Txt
  3639  000582  6E3A               	movwf	drawtext@_text,c
  3640  000584  0E00               	movlw	high _Heater_SW_Txt
  3641  000586  6E3B               	movwf	drawtext@_text+1,c
  3642  000588  0EF8               	movlw	248
  3643  00058A  6E3D               	movwf	drawtext@color+1,c
  3644  00058C  0E00               	movlw	0
  3645  00058E  6E3C               	movwf	drawtext@color,c
  3646  000590  0E00               	movlw	0
  3647  000592  6E3F               	movwf	drawtext@bg+1,c
  3648  000594  0E00               	movlw	0
  3649  000596  6E3E               	movwf	drawtext@bg,c
  3650  000598  0E01               	movlw	1
  3651  00059A  6E40               	movwf	drawtext@size,c
  3652  00059C  0E5F               	movlw	95
  3653  00059E  EC2B  F00C         	call	_drawtext
  3654                           
  3655                           ;Main_Screen.c: 180: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3656  0005A2  0E96               	movlw	150
  3657  0005A4  6E39               	movwf	drawtext@y,c
  3658  0005A6  0ED1               	movlw	low _DC_Txt
  3659  0005A8  6E3A               	movwf	drawtext@_text,c
  3660  0005AA  0E00               	movlw	high _DC_Txt
  3661  0005AC  6E3B               	movwf	drawtext@_text+1,c
  3662  0005AE  0E07               	movlw	7
  3663  0005B0  6E3D               	movwf	drawtext@color+1,c
  3664  0005B2  0EE0               	movlw	224
  3665  0005B4  6E3C               	movwf	drawtext@color,c
  3666  0005B6  0E00               	movlw	0
  3667  0005B8  6E3F               	movwf	drawtext@bg+1,c
  3668  0005BA  0E00               	movlw	0
  3669  0005BC  6E3E               	movwf	drawtext@bg,c
  3670  0005BE  0E01               	movlw	1
  3671  0005C0  6E40               	movwf	drawtext@size,c
  3672  0005C2  0E0A               	movlw	10
  3673  0005C4  EC2B  F00C         	call	_drawtext
  3674                           
  3675                           ;Main_Screen.c: 181: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  3676  0005C8  0E96               	movlw	150
  3677  0005CA  6E39               	movwf	drawtext@y,c
  3678  0005CC  0EE1               	movlw	low _RTC_ALARM_Txt
  3679  0005CE  6E3A               	movwf	drawtext@_text,c
  3680  0005D0  0E00               	movlw	high _RTC_ALARM_Txt
  3681  0005D2  6E3B               	movwf	drawtext@_text+1,c
  3682  0005D4  0E07               	movlw	7
  3683  0005D6  6E3D               	movwf	drawtext@color+1,c
  3684  0005D8  0EE0               	movlw	224
  3685  0005DA  6E3C               	movwf	drawtext@color,c
  3686  0005DC  0E00               	movlw	0
  3687  0005DE  6E3F               	movwf	drawtext@bg+1,c
  3688  0005E0  0E00               	movlw	0
  3689  0005E2  6E3E               	movwf	drawtext@bg,c
  3690  0005E4  0E01               	movlw	1
  3691  0005E6  6E40               	movwf	drawtext@size,c
  3692  0005E8  0E23               	movlw	35
  3693  0005EA  EC2B  F00C         	call	_drawtext
  3694                           
  3695                           ;Main_Screen.c: 182: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  3696  0005EE  0E96               	movlw	150
  3697  0005F0  6E39               	movwf	drawtext@y,c
  3698  0005F2  0EB8               	movlw	low _Volt_Txt
  3699  0005F4  6E3A               	movwf	drawtext@_text,c
  3700  0005F6  0E00               	movlw	high _Volt_Txt
  3701  0005F8  6E3B               	movwf	drawtext@_text+1,c
  3702  0005FA  0E07               	movlw	7
  3703  0005FC  6E3D               	movwf	drawtext@color+1,c
  3704  0005FE  0EE0               	movlw	224
  3705  000600  6E3C               	movwf	drawtext@color,c
  3706  000602  0E00               	movlw	0
  3707  000604  6E3F               	movwf	drawtext@bg+1,c
  3708  000606  0E00               	movlw	0
  3709  000608  6E3E               	movwf	drawtext@bg,c
  3710  00060A  0E01               	movlw	1
  3711  00060C  6E40               	movwf	drawtext@size,c
  3712  00060E  0E32               	movlw	50
  3713  000610  EC2B  F00C         	call	_drawtext
  3714                           
  3715                           ;Main_Screen.c: 183: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3716  000614  0E96               	movlw	150
  3717  000616  6E39               	movwf	drawtext@y,c
  3718  000618  0EC3               	movlw	low _RPM_Txt
  3719  00061A  6E3A               	movwf	drawtext@_text,c
  3720  00061C  0E00               	movlw	high _RPM_Txt
  3721  00061E  6E3B               	movwf	drawtext@_text+1,c
  3722  000620  0E07               	movlw	7
  3723  000622  6E3D               	movwf	drawtext@color+1,c
  3724  000624  0EE0               	movlw	224
  3725  000626  6E3C               	movwf	drawtext@color,c
  3726  000628  0E00               	movlw	0
  3727  00062A  6E3F               	movwf	drawtext@bg+1,c
  3728  00062C  0E00               	movlw	0
  3729  00062E  6E3E               	movwf	drawtext@bg,c
  3730  000630  0E01               	movlw	1
  3731  000632  6E40               	movwf	drawtext@size,c
  3732  000634  0E5D               	movlw	93
  3733  000636  EC2B  F00C         	call	_drawtext
  3734  00063A  0012               	return		;funcret
  3735  00063C                     __end_of_Update_Screen:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           postdec1	equ	0xFE5
  3744                           fsr1l	equ	0xFE1
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _Toggle_Heater *****************
  3748 ;; Defined at:
  3749 ;;		line 33 in file "Fan_Support.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, status,2
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_main
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text3
  3778  003B68                     __ptext3:
  3779                           	opt stack 0
  3780  003B68                     _Toggle_Heater:
  3781                           	opt stack 27
  3782                           
  3783                           ;Fan_Support.c: 35: if (FAN == 0) FAN = 1;
  3784                           
  3785                           ;incstack = 0
  3786  003B68  504D               	movf	_FAN,w,c
  3787  003B6A  A4D8               	btfss	status,2,c
  3788  003B6C  D002               	goto	l6889
  3789  003B6E  0E01               	movlw	1
  3790  003B70  D001               	goto	L4
  3791  003B72                     l6889:
  3792                           
  3793                           ;Fan_Support.c: 36: else FAN = 0;
  3794  003B72  0E00               	movlw	0
  3795  003B74                     L4:
  3796  003B74  6E4D               	movwf	_FAN,c
  3797  003B76  D000               	goto	l38
  3798  003B78                     l38:
  3799  003B78  0012               	return		;funcret
  3800  003B7A                     __end_of_Toggle_Heater:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postdec1	equ	0xFE5
  3809                           fsr1l	equ	0xFE1
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _Test_Alarm *****************
  3813 ;; Defined at:
  3814 ;;		line 197 in file "Main.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  i               2   61[COMRAM] int 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;Total ram usage:        2 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    9
  3835 ;; This function calls:
  3836 ;;		_Activate_Buzzer
  3837 ;;		_DS3231_Turn_Off_Alarm
  3838 ;;		_DS3231_Turn_On_Alarm
  3839 ;;		_Deactivate_Buzzer
  3840 ;;		_Set_Alarm_RGB_Color
  3841 ;;		_Wait_Half_Sec
  3842 ;;		___ftge
  3843 ;;		_clr_alarm
  3844 ;;		_read_volt
  3845 ;; This function is called by:
  3846 ;;		_main
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text4
  3851  001C98                     __ptext4:
  3852                           	opt stack 0
  3853  001C98                     _Test_Alarm:
  3854                           	opt stack 21
  3855                           
  3856                           ;Main.c: 199: if(INT2_flag == 1){
  3857                           
  3858                           ;incstack = 0
  3859  001C98  044F               	decf	_INT2_flag,w,c
  3860  001C9A  A4D8               	btfss	status,2,c
  3861  001C9C  D005               	goto	l9553
  3862                           
  3863                           ;Main.c: 200: ALARMEN = 1;
  3864  001C9E  0E00               	movlw	0
  3865  001CA0  6E42               	movwf	_ALARMEN+1,c
  3866  001CA2  0E01               	movlw	1
  3867  001CA4  6E41               	movwf	_ALARMEN,c
  3868  001CA6  D000               	goto	l9553
  3869  001CA8                     l9553:
  3870                           
  3871                           ;Main.c: 201: }
  3872                           ;Main.c: 202: if(alarm_mode == 0 && ALARMEN == 1)
  3873  001CA8  0100               	movlb	0	; () banked
  3874  001CAA  51EC               	movf	_alarm_mode& (0+255),w,b
  3875  001CAC  0100               	movlb	0	; () banked
  3876  001CAE  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3877  001CB0  A4D8               	btfss	status,2,c
  3878  001CB2  D00C               	goto	l9561
  3879                           
  3880                           ; BSR set to: 0
  3881  001CB4  0441               	decf	_ALARMEN,w,c
  3882  001CB6  1042               	iorwf	_ALARMEN+1,w,c
  3883  001CB8  A4D8               	btfss	status,2,c
  3884  001CBA  D008               	goto	l9561
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;Main.c: 203: {
  3888                           ;Main.c: 204: DS3231_Turn_On_Alarm();
  3889  001CBC  EC46  F019         	call	_DS3231_Turn_On_Alarm	;wreg free
  3890                           
  3891                           ;Main.c: 205: alarm_mode = 1;
  3892  001CC0  0E00               	movlw	0
  3893  001CC2  0100               	movlb	0	; () banked
  3894  001CC4  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  3895  001CC6  0E01               	movlw	1
  3896  001CC8  6FEC               	movwf	_alarm_mode& (0+255),b
  3897                           
  3898                           ;Main.c: 206: }
  3899  001CCA  D067               	goto	l564
  3900  001CCC                     l9561:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;Main.c: 207: else if(alarm_mode == 1 && ALARMEN == 0)
  3904  001CCC  0100               	movlb	0	; () banked
  3905  001CCE  05EC               	decf	_alarm_mode& (0+255),w,b
  3906  001CD0  0100               	movlb	0	; () banked
  3907  001CD2  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3908  001CD4  A4D8               	btfss	status,2,c
  3909  001CD6  D011               	goto	l9573
  3910                           
  3911                           ; BSR set to: 0
  3912  001CD8  5041               	movf	_ALARMEN,w,c
  3913  001CDA  1042               	iorwf	_ALARMEN+1,w,c
  3914  001CDC  A4D8               	btfss	status,2,c
  3915  001CDE  D00D               	goto	l9573
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;Main.c: 208: {
  3919                           ;Main.c: 209: DS3231_Turn_Off_Alarm();
  3920  001CE0  EC6F  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  3921                           
  3922                           ;Main.c: 210: alarm_mode = 0;
  3923  001CE4  0E00               	movlw	0
  3924  001CE6  0100               	movlb	0	; () banked
  3925  001CE8  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  3926  001CEA  0E00               	movlw	0
  3927  001CEC  6FEC               	movwf	_alarm_mode& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;Main.c: 211: Set_Alarm_RGB_Color(0);
  3931  001CEE  0E00               	movlw	0
  3932  001CF0  EC7D  F017         	call	_Set_Alarm_RGB_Color
  3933                           
  3934                           ;Main.c: 212: Deactivate_Buzzer();
  3935  001CF4  EC6D  F01E         	call	_Deactivate_Buzzer	;wreg free
  3936                           
  3937                           ;Main.c: 213: }
  3938  001CF8  D050               	goto	l564
  3939  001CFA                     l9573:
  3940                           
  3941                           ;Main.c: 214: else if(alarm_mode == 1 && ALARMEN == 1)
  3942  001CFA  0100               	movlb	0	; () banked
  3943  001CFC  05EC               	decf	_alarm_mode& (0+255),w,b
  3944  001CFE  0100               	movlb	0	; () banked
  3945  001D00  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3946  001D02  A4D8               	btfss	status,2,c
  3947  001D04  D04A               	goto	l564
  3948                           
  3949                           ; BSR set to: 0
  3950  001D06  0441               	decf	_ALARMEN,w,c
  3951  001D08  1042               	iorwf	_ALARMEN+1,w,c
  3952  001D0A  A4D8               	btfss	status,2,c
  3953  001D0C  D046               	goto	l564
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;Main.c: 215: {
  3957                           ;Main.c: 216: if (PORTAbits.RA4 == 0){
  3958  001D0E  B880               	btfsc	3968,4,c	;volatile
  3959  001D10  D03C               	goto	l9603
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;Main.c: 217: Activate_Buzzer();
  3963  001D12  ECBD  F01D         	call	_Activate_Buzzer	;wreg free
  3964                           
  3965                           ;Main.c: 218: MATCHED = 1;
  3966  001D16  0E00               	movlw	0
  3967  001D18  0100               	movlb	0	; () banked
  3968  001D1A  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  3969  001D1C  0E01               	movlw	1
  3970  001D1E  6FEA               	movwf	_MATCHED& (0+255),b
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;Main.c: 219: }
  3974                           ;Main.c: 220: while(MATCHED == 1){
  3975  001D20  D034               	goto	l9603
  3976  001D22                     l9583:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;Main.c: 221: Activate_Buzzer();
  3980  001D22  ECBD  F01D         	call	_Activate_Buzzer	;wreg free
  3981                           
  3982                           ;Main.c: 222: volt = read_volt();
  3983  001D26  EC24  F018         	call	_read_volt	;wreg free
  3984  001D2A  C03B  F0E7         	movff	?_read_volt,_volt
  3985  001D2E  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  3986  001D32  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  3987                           
  3988                           ;Main.c: 223: if(volt > 3.0) clr_alarm();
  3989  001D36  0E00               	movlw	0
  3990  001D38  6E11               	movwf	___ftge@ff1,c
  3991  001D3A  0E40               	movlw	64
  3992  001D3C  6E12               	movwf	___ftge@ff1+1,c
  3993  001D3E  0E40               	movlw	64
  3994  001D40  6E13               	movwf	___ftge@ff1+2,c
  3995  001D42  C0E7  F014         	movff	_volt,___ftge@ff2
  3996  001D46  C0E8  F015         	movff	_volt+1,___ftge@ff2+1
  3997  001D4A  C0E9  F016         	movff	_volt+2,___ftge@ff2+2
  3998  001D4E  EC82  F014         	call	___ftge	;wreg free
  3999  001D52  B0D8               	btfsc	status,0,c
  4000  001D54  D003               	goto	l9591
  4001  001D56  EC3D  F01C         	call	_clr_alarm	;wreg free
  4002  001D5A  D000               	goto	l9591
  4003  001D5C                     l9591:
  4004                           
  4005                           ;Main.c: 224: for(int i=1;i<8;i++)
  4006  001D5C  0E00               	movlw	0
  4007  001D5E  6E3F               	movwf	Test_Alarm@i+1,c
  4008  001D60  0E01               	movlw	1
  4009  001D62  6E3E               	movwf	Test_Alarm@i,c
  4010  001D64                     l9593:
  4011  001D64  BE3F               	btfsc	Test_Alarm@i+1,7,c
  4012  001D66  D008               	goto	l9597
  4013  001D68  503F               	movf	Test_Alarm@i+1,w,c
  4014  001D6A  E10F               	bnz	l9603
  4015  001D6C  0E08               	movlw	8
  4016  001D6E  5C3E               	subwf	Test_Alarm@i,w,c
  4017  001D70  B0D8               	btfsc	status,0,c
  4018  001D72  D00B               	goto	l9603
  4019  001D74  D001               	goto	l9597
  4020  001D76  D009               	goto	l9603
  4021  001D78                     l9597:
  4022                           
  4023                           ;Main.c: 225: {
  4024                           ;Main.c: 226: Set_Alarm_RGB_Color(i);
  4025  001D78  503E               	movf	Test_Alarm@i,w,c
  4026  001D7A  EC7D  F017         	call	_Set_Alarm_RGB_Color
  4027                           
  4028                           ;Main.c: 227: Wait_Half_Sec();
  4029  001D7E  ECF8  F01C         	call	_Wait_Half_Sec	;wreg free
  4030  001D82  4A3E               	infsnz	Test_Alarm@i,f,c
  4031  001D84  2A3F               	incf	Test_Alarm@i+1,f,c
  4032  001D86  D7EE               	goto	l9593
  4033  001D88  D000               	goto	l9603
  4034  001D8A                     l9603:
  4035  001D8A  0100               	movlb	0	; () banked
  4036  001D8C  05EA               	decf	_MATCHED& (0+255),w,b
  4037  001D8E  0100               	movlb	0	; () banked
  4038  001D90  11EB               	iorwf	(_MATCHED+1)& (0+255),w,b
  4039  001D92  A4D8               	btfss	status,2,c
  4040  001D94  D002               	goto	l564
  4041  001D96  D7C5               	goto	l9583
  4042                           
  4043                           ; BSR set to: 0
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  001D98  D000               	goto	l564
  4049  001D9A                     l564:
  4050  001D9A  0012               	return		;funcret
  4051  001D9C                     __end_of_Test_Alarm:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           postdec1	equ	0xFE5
  4060                           fsr1l	equ	0xFE1
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _read_volt *****************
  4064 ;; Defined at:
  4065 ;;		line 198 in file "utils.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  volt            3    0[BANK0 ] float 
  4070 ;;  nStep           2    3[BANK0 ] int 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  3   58[COMRAM] float 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4080 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;Total ram usage:        8 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    5
  4087 ;; This function calls:
  4088 ;;		___awtoft
  4089 ;;		___ftdiv
  4090 ;;		___wmul
  4091 ;;		_get_full_ADC
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;;		_Test_Alarm
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text5
  4099  003048                     __ptext5:
  4100                           	opt stack 0
  4101  003048                     _read_volt:
  4102                           	opt stack 25
  4103                           
  4104                           ;utils.c: 200: float volt;
  4105                           ;utils.c: 201: int nStep = get_full_ADC();
  4106                           
  4107                           ;incstack = 0
  4108  003048  EC91  F01C         	call	_get_full_ADC	;wreg free
  4109  00304C  C011  F0FE         	movff	?_get_full_ADC,read_volt@nStep
  4110  003050  C012  F0FF         	movff	?_get_full_ADC+1,read_volt@nStep+1
  4111                           
  4112                           ;utils.c: 202: volt = nStep * 5 / 1024.0;
  4113  003054  C0FE  F011         	movff	read_volt@nStep,___wmul@multiplier
  4114  003058  C0FF  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  4115  00305C  0E00               	movlw	0
  4116  00305E  6E14               	movwf	___wmul@multiplicand+1,c
  4117  003060  0E05               	movlw	5
  4118  003062  6E13               	movwf	___wmul@multiplicand,c
  4119  003064  EC7D  F01C         	call	___wmul	;wreg free
  4120  003068  C011  F019         	movff	?___wmul,___awtoft@c
  4121  00306C  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  4122  003070  EC67  F01B         	call	___awtoft	;wreg free
  4123  003074  C019  F02C         	movff	?___awtoft,___ftdiv@f1
  4124  003078  C01A  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  4125  00307C  C01B  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  4126  003080  0E00               	movlw	0
  4127  003082  6E2F               	movwf	___ftdiv@f2,c
  4128  003084  0E80               	movlw	128
  4129  003086  6E30               	movwf	___ftdiv@f2+1,c
  4130  003088  0E44               	movlw	68
  4131  00308A  6E31               	movwf	___ftdiv@f2+2,c
  4132  00308C  ECAF  F010         	call	___ftdiv	;wreg free
  4133  003090  C02C  F0FB         	movff	?___ftdiv,read_volt@volt
  4134  003094  C02D  F0FC         	movff	?___ftdiv+1,read_volt@volt+1
  4135  003098  C02E  F0FD         	movff	?___ftdiv+2,read_volt@volt+2
  4136                           
  4137                           ;utils.c: 203: return volt;
  4138  00309C  C0FB  F03B         	movff	read_volt@volt,?_read_volt
  4139  0030A0  C0FC  F03C         	movff	read_volt@volt+1,?_read_volt+1
  4140  0030A4  C0FD  F03D         	movff	read_volt@volt+2,?_read_volt+2
  4141  0030A8  D000               	goto	l1379
  4142  0030AA                     l1379:
  4143  0030AA  0012               	return		;funcret
  4144  0030AC                     __end_of_read_volt:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1l	equ	0xFE1
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _get_full_ADC *****************
  4157 ;; Defined at:
  4158 ;;		line 213 in file "utils.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  result          2   20[COMRAM] int 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2   16[COMRAM] unsigned int 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        6 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    3
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_read_volt
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text6
  4187  003922                     __ptext6:
  4188                           	opt stack 0
  4189  003922                     _get_full_ADC:
  4190                           	opt stack 26
  4191                           
  4192                           ;utils.c: 215: int result;
  4193                           ;utils.c: 216: ADCON0bits.GO = 1;
  4194                           
  4195                           ;incstack = 0
  4196  003922  82C2               	bsf	4034,1,c	;volatile
  4197                           
  4198                           ;utils.c: 217: while (ADCON0bits.DONE == 1);
  4199  003924  D000               	goto	l1385
  4200  003926                     l1385:
  4201  003926  B2C2               	btfsc	4034,1,c	;volatile
  4202  003928  D7FE               	goto	l1385
  4203                           
  4204                           ;utils.c: 218: result = (ADRESH * 0x100) + ADRESL;
  4205  00392A  50C4               	movf	4036,w,c	;volatile
  4206  00392C  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  4207  00392E  6A13               	clrf	??_get_full_ADC& (0+255),c
  4208  003930  50C3               	movf	4035,w,c	;volatile
  4209  003932  2413               	addwf	??_get_full_ADC,w,c
  4210  003934  6E15               	movwf	get_full_ADC@result,c
  4211  003936  0E00               	movlw	0
  4212  003938  2014               	addwfc	??_get_full_ADC+1,w,c
  4213  00393A  6E16               	movwf	get_full_ADC@result+1,c
  4214                           
  4215                           ;utils.c: 219: return result;
  4216  00393C  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  4217  003940  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4218  003944  D000               	goto	l1388
  4219  003946                     l1388:
  4220  003946  0012               	return		;funcret
  4221  003948                     __end_of_get_full_ADC:
  4222                           	opt stack 0
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           postinc0	equ	0xFEE
  4228                           wreg	equ	0xFE8
  4229                           postdec1	equ	0xFE5
  4230                           fsr1l	equ	0xFE1
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function ___awtoft *****************
  4234 ;; Defined at:
  4235 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  c               2   24[COMRAM] int 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  sign            1   27[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  3   24[COMRAM] float 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4249 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;Total ram usage:        4 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    4
  4256 ;; This function calls:
  4257 ;;		___ftpack
  4258 ;; This function is called by:
  4259 ;;		_read_volt
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text7
  4264  0036CE                     __ptext7:
  4265                           	opt stack 0
  4266  0036CE                     ___awtoft:
  4267                           	opt stack 25
  4268                           
  4269                           ;incstack = 0
  4270  0036CE  0E00               	movlw	0
  4271  0036D0  6E1C               	movwf	___awtoft@sign,c
  4272  0036D2  AE1A               	btfss	___awtoft@c+1,7,c
  4273  0036D4  D007               	goto	l9097
  4274  0036D6  6C19               	negf	___awtoft@c,c
  4275  0036D8  1E1A               	comf	___awtoft@c+1,f,c
  4276  0036DA  B0D8               	btfsc	status,0,c
  4277  0036DC  2A1A               	incf	___awtoft@c+1,f,c
  4278  0036DE  0E01               	movlw	1
  4279  0036E0  6E1C               	movwf	___awtoft@sign,c
  4280  0036E2  D000               	goto	l9097
  4281  0036E4                     l9097:
  4282  0036E4  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4283  0036E8  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4284  0036EC  6A13               	clrf	___ftpack@arg+2,c
  4285  0036EE  0E8E               	movlw	142
  4286  0036F0  6E14               	movwf	___ftpack@exp,c
  4287  0036F2  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4288  0036F6  EC63  F012         	call	___ftpack	;wreg free
  4289  0036FA  C011  F019         	movff	?___ftpack,?___awtoft
  4290  0036FE  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4291  003702  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4292  003706  D000               	goto	l1711
  4293  003708                     l1711:
  4294  003708  0012               	return		;funcret
  4295  00370A                     __end_of___awtoft:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           postdec1	equ	0xFE5
  4304                           fsr1l	equ	0xFE1
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _clr_alarm *****************
  4308 ;; Defined at:
  4309 ;;		line 88 in file "Main.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;		None               void
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;Total ram usage:        0 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    4
  4330 ;; This function calls:
  4331 ;;		_Deactivate_Buzzer
  4332 ;;		_Set_Alarm_RGB_Color
  4333 ;; This function is called by:
  4334 ;;		_Test_Alarm
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text8
  4339  00387A                     __ptext8:
  4340                           	opt stack 0
  4341  00387A                     _clr_alarm:
  4342                           	opt stack 25
  4343                           
  4344                           ;Main.c: 90: MATCHED = 0;
  4345                           
  4346                           ;incstack = 0
  4347  00387A  0E00               	movlw	0
  4348  00387C  0100               	movlb	0	; () banked
  4349  00387E  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4350  003880  0E00               	movlw	0
  4351  003882  6FEA               	movwf	_MATCHED& (0+255),b
  4352                           
  4353                           ;Main.c: 91: alarm_mode = 0;
  4354  003884  0E00               	movlw	0
  4355  003886  0100               	movlb	0	; () banked
  4356  003888  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4357  00388A  0E00               	movlw	0
  4358  00388C  6FEC               	movwf	_alarm_mode& (0+255),b
  4359                           
  4360                           ;Main.c: 92: ALARMEN = 0;
  4361  00388E  0E00               	movlw	0
  4362  003890  6E42               	movwf	_ALARMEN+1,c
  4363  003892  0E00               	movlw	0
  4364  003894  6E41               	movwf	_ALARMEN,c
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;Main.c: 93: Deactivate_Buzzer();
  4368  003896  EC6D  F01E         	call	_Deactivate_Buzzer	;wreg free
  4369                           
  4370                           ;Main.c: 94: Set_Alarm_RGB_Color(0);
  4371  00389A  0E00               	movlw	0
  4372  00389C  EC7D  F017         	call	_Set_Alarm_RGB_Color
  4373                           
  4374                           ;Main.c: 95: INT2_flag = 0;
  4375  0038A0  0E00               	movlw	0
  4376  0038A2  6E4F               	movwf	_INT2_flag,c
  4377  0038A4  0012               	return		;funcret
  4378  0038A6                     __end_of_clr_alarm:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postdec1	equ	0xFE5
  4387                           fsr1l	equ	0xFE1
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _Set_Alarm_RGB_Color *****************
  4391 ;; Defined at:
  4392 ;;		line 145 in file "utils.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  color           1    wreg     unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  color           1   16[COMRAM] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;		None               void
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;Total ram usage:        1 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    3
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_clr_alarm
  4417 ;;		_main
  4418 ;;		_Test_Alarm
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text9
  4423  002EFA                     __ptext9:
  4424                           	opt stack 0
  4425  002EFA                     _Set_Alarm_RGB_Color:
  4426                           	opt stack 25
  4427                           
  4428                           ;incstack = 0
  4429                           ;Set_Alarm_RGB_Color@color stored from wreg
  4430  002EFA  6E11               	movwf	Set_Alarm_RGB_Color@color,c
  4431                           
  4432                           ;utils.c: 147: if(color == 0)
  4433  002EFC  5011               	movf	Set_Alarm_RGB_Color@color,w,c
  4434  002EFE  A4D8               	btfss	status,2,c
  4435  002F00  D002               	goto	l6209
  4436                           
  4437                           ;utils.c: 148: {
  4438                           ;utils.c: 149: PORTBbits.RB4 = 0;
  4439  002F02  9881               	bcf	3969,4,c	;volatile
  4440  002F04  D004               	goto	L5
  4441  002F06                     l6209:
  4442                           
  4443                           ;utils.c: 153: else if(color == 1)
  4444  002F06  0411               	decf	Set_Alarm_RGB_Color@color,w,c
  4445  002F08  A4D8               	btfss	status,2,c
  4446  002F0A  D003               	goto	l6213
  4447                           
  4448                           ;utils.c: 154: {
  4449                           ;utils.c: 155: PORTBbits.RB4 = 1;
  4450  002F0C  8881               	bsf	3969,4,c	;volatile
  4451  002F0E                     L5:
  4452                           
  4453                           ;utils.c: 156: PORTBbits.RB5 = 0;
  4454  002F0E  9A81               	bcf	3969,5,c	;volatile
  4455  002F10  D006               	goto	L6
  4456  002F12                     l6213:
  4457                           
  4458                           ;utils.c: 159: else if(color == 2)
  4459  002F12  0E02               	movlw	2
  4460  002F14  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4461  002F16  A4D8               	btfss	status,2,c
  4462  002F18  D004               	goto	l6217
  4463                           
  4464                           ;utils.c: 160: {
  4465                           ;utils.c: 161: PORTBbits.RB4 = 0;
  4466  002F1A  9881               	bcf	3969,4,c	;volatile
  4467  002F1C  D007               	goto	L7
  4468  002F1E                     L6:
  4469                           
  4470                           ;utils.c: 163: PORTBbits.RB6 = 0;
  4471  002F1E  9C81               	bcf	3969,6,c	;volatile
  4472                           
  4473                           ;utils.c: 164: }
  4474  002F20  D024               	goto	l1376
  4475  002F22                     l6217:
  4476                           
  4477                           ;utils.c: 165: else if(color == 3)
  4478  002F22  0E03               	movlw	3
  4479  002F24  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4480  002F26  A4D8               	btfss	status,2,c
  4481  002F28  D003               	goto	l6221
  4482                           
  4483                           ;utils.c: 166: {
  4484                           ;utils.c: 167: PORTBbits.RB4 = 1;
  4485  002F2A  8881               	bsf	3969,4,c	;volatile
  4486  002F2C                     L7:
  4487                           
  4488                           ;utils.c: 168: PORTBbits.RB5 = 1;
  4489  002F2C  8A81               	bsf	3969,5,c	;volatile
  4490  002F2E  D7F7               	goto	L6
  4491  002F30                     l6221:
  4492                           
  4493                           ;utils.c: 171: else if(color == 4)
  4494  002F30  0E04               	movlw	4
  4495  002F32  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4496  002F34  A4D8               	btfss	status,2,c
  4497  002F36  D002               	goto	l6225
  4498                           
  4499                           ;utils.c: 172: {
  4500                           ;utils.c: 173: PORTBbits.RB4 = 0;
  4501  002F38  9881               	bcf	3969,4,c	;volatile
  4502  002F3A  D005               	goto	L8
  4503  002F3C                     l6225:
  4504                           
  4505                           ;utils.c: 177: else if(color == 5)
  4506  002F3C  0E05               	movlw	5
  4507  002F3E  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4508  002F40  A4D8               	btfss	status,2,c
  4509  002F42  D003               	goto	l6229
  4510                           
  4511                           ;utils.c: 178: {
  4512                           ;utils.c: 179: PORTBbits.RB4 = 1;
  4513  002F44  8881               	bsf	3969,4,c	;volatile
  4514  002F46                     L8:
  4515                           
  4516                           ;utils.c: 180: PORTBbits.RB5 = 0;
  4517  002F46  9A81               	bcf	3969,5,c	;volatile
  4518  002F48  D006               	goto	L9
  4519  002F4A                     l6229:
  4520                           
  4521                           ;utils.c: 183: else if(color == 6)
  4522  002F4A  0E06               	movlw	6
  4523  002F4C  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4524  002F4E  A4D8               	btfss	status,2,c
  4525  002F50  D004               	goto	l6233
  4526                           
  4527                           ;utils.c: 184: {
  4528                           ;utils.c: 185: PORTBbits.RB4 = 0;
  4529  002F52  9881               	bcf	3969,4,c	;volatile
  4530  002F54  D007               	goto	L10
  4531  002F56                     L9:
  4532                           
  4533                           ;utils.c: 187: PORTBbits.RB6 = 1;
  4534  002F56  8C81               	bsf	3969,6,c	;volatile
  4535                           
  4536                           ;utils.c: 188: }
  4537  002F58  D008               	goto	l1376
  4538  002F5A                     l6233:
  4539                           
  4540                           ;utils.c: 189: else if(color == 7)
  4541  002F5A  0E07               	movlw	7
  4542  002F5C  1811               	xorwf	Set_Alarm_RGB_Color@color,w,c
  4543  002F5E  A4D8               	btfss	status,2,c
  4544  002F60  D004               	goto	l1376
  4545                           
  4546                           ;utils.c: 190: {
  4547                           ;utils.c: 191: PORTBbits.RB4 = 1;
  4548  002F62  8881               	bsf	3969,4,c	;volatile
  4549  002F64                     L10:
  4550                           
  4551                           ;utils.c: 192: PORTBbits.RB5 = 1;
  4552  002F64  8A81               	bsf	3969,5,c	;volatile
  4553  002F66  D7F7               	goto	L9
  4554                           
  4555                           ;utils.c: 193: PORTBbits.RB6 = 1;
  4556  002F68  D000               	goto	l1376
  4557  002F6A                     l1376:
  4558  002F6A  0012               	return		;funcret
  4559  002F6C                     __end_of_Set_Alarm_RGB_Color:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1l	equ	0xFE1
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function ___ftge *****************
  4572 ;; Defined at:
  4573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  ff1             3   16[COMRAM] float 
  4576 ;;  ff2             3   19[COMRAM] float 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;		None               void
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4588 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;Total ram usage:        9 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    3
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_Test_Alarm
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text10
  4603  002904                     __ptext10:
  4604                           	opt stack 0
  4605  002904                     ___ftge:
  4606                           	opt stack 26
  4607                           
  4608                           ;incstack = 0
  4609  002904  AE13               	btfss	___ftge@ff1+2,7,c
  4610  002906  D017               	goto	l6863
  4611  002908  C011  F017         	movff	___ftge@ff1,??___ftge
  4612  00290C  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4613  002910  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4614  002914  1E17               	comf	??___ftge,f,c
  4615  002916  1E18               	comf	??___ftge+1,f,c
  4616  002918  1E19               	comf	??___ftge+2,f,c
  4617  00291A  2A17               	incf	??___ftge,f,c
  4618  00291C  0E00               	movlw	0
  4619  00291E  2218               	addwfc	??___ftge+1,f,c
  4620  002920  2219               	addwfc	??___ftge+2,f,c
  4621  002922  0E00               	movlw	0
  4622  002924  2417               	addwf	??___ftge,w,c
  4623  002926  6E11               	movwf	___ftge@ff1,c
  4624  002928  0E00               	movlw	0
  4625  00292A  2018               	addwfc	??___ftge+1,w,c
  4626  00292C  6E12               	movwf	___ftge@ff1+1,c
  4627  00292E  0E80               	movlw	128
  4628  002930  2019               	addwfc	??___ftge+2,w,c
  4629  002932  6E13               	movwf	___ftge@ff1+2,c
  4630  002934  D000               	goto	l6863
  4631  002936                     l6863:
  4632  002936  AE16               	btfss	___ftge@ff2+2,7,c
  4633  002938  D017               	goto	l6867
  4634  00293A  C014  F017         	movff	___ftge@ff2,??___ftge
  4635  00293E  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4636  002942  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4637  002946  1E17               	comf	??___ftge,f,c
  4638  002948  1E18               	comf	??___ftge+1,f,c
  4639  00294A  1E19               	comf	??___ftge+2,f,c
  4640  00294C  2A17               	incf	??___ftge,f,c
  4641  00294E  0E00               	movlw	0
  4642  002950  2218               	addwfc	??___ftge+1,f,c
  4643  002952  2219               	addwfc	??___ftge+2,f,c
  4644  002954  0E00               	movlw	0
  4645  002956  2417               	addwf	??___ftge,w,c
  4646  002958  6E14               	movwf	___ftge@ff2,c
  4647  00295A  0E00               	movlw	0
  4648  00295C  2018               	addwfc	??___ftge+1,w,c
  4649  00295E  6E15               	movwf	___ftge@ff2+1,c
  4650  002960  0E80               	movlw	128
  4651  002962  2019               	addwfc	??___ftge+2,w,c
  4652  002964  6E16               	movwf	___ftge@ff2+2,c
  4653  002966  D000               	goto	l6867
  4654  002968                     l6867:
  4655  002968  0E00               	movlw	0
  4656  00296A  1A11               	xorwf	___ftge@ff1,f,c
  4657  00296C  0E00               	movlw	0
  4658  00296E  1A12               	xorwf	___ftge@ff1+1,f,c
  4659  002970  0E80               	movlw	128
  4660  002972  1A13               	xorwf	___ftge@ff1+2,f,c
  4661  002974  0E00               	movlw	0
  4662  002976  1A14               	xorwf	___ftge@ff2,f,c
  4663  002978  0E00               	movlw	0
  4664  00297A  1A15               	xorwf	___ftge@ff2+1,f,c
  4665  00297C  0E80               	movlw	128
  4666  00297E  1A16               	xorwf	___ftge@ff2+2,f,c
  4667  002980  5014               	movf	___ftge@ff2,w,c
  4668  002982  5C11               	subwf	___ftge@ff1,w,c
  4669  002984  5015               	movf	___ftge@ff2+1,w,c
  4670  002986  5812               	subwfb	___ftge@ff1+1,w,c
  4671  002988  5016               	movf	___ftge@ff2+2,w,c
  4672  00298A  5813               	subwfb	___ftge@ff1+2,w,c
  4673  00298C  B0D8               	btfsc	status,0,c
  4674  00298E  D002               	goto	l6873
  4675  002990  90D8               	bcf	status,0,c
  4676  002992  D002               	goto	l1882
  4677  002994                     l6873:
  4678  002994  80D8               	bsf	status,0,c
  4679  002996  D000               	goto	l1882
  4680  002998                     l1882:
  4681  002998  0012               	return		;funcret
  4682  00299A                     __end_of___ftge:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           postdec1	equ	0xFE5
  4691                           fsr1l	equ	0xFE1
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _Wait_Half_Sec *****************
  4695 ;; Defined at:
  4696 ;;		line 89 in file "utils.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  k               2   16[COMRAM] int 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;		None               void
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;Total ram usage:        2 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    3
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_Test_Alarm
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text11
  4725  0039F0                     __ptext11:
  4726                           	opt stack 0
  4727  0039F0                     _Wait_Half_Sec:
  4728                           	opt stack 26
  4729                           
  4730                           ;utils.c: 91: for (int k=0;k<(0xffff/2);k++);
  4731                           
  4732                           ;incstack = 0
  4733  0039F0  0E00               	movlw	0
  4734  0039F2  6E12               	movwf	Wait_Half_Sec@k+1,c
  4735  0039F4  0E00               	movlw	0
  4736  0039F6  6E11               	movwf	Wait_Half_Sec@k,c
  4737  0039F8                     l6565:
  4738  0039F8  2811               	incf	Wait_Half_Sec@k,w,c
  4739  0039FA  0E7F               	movlw	127
  4740  0039FC  5812               	subwfb	Wait_Half_Sec@k+1,w,c
  4741  0039FE  B0D8               	btfsc	status,0,c
  4742  003A00  D005               	goto	l1339
  4743  003A02  D001               	goto	l6569
  4744  003A04  D003               	goto	l1339
  4745  003A06                     l6569:
  4746  003A06  4A11               	infsnz	Wait_Half_Sec@k,f,c
  4747  003A08  2A12               	incf	Wait_Half_Sec@k+1,f,c
  4748  003A0A  D7F6               	goto	l6565
  4749  003A0C                     l1339:
  4750  003A0C  0012               	return		;funcret
  4751  003A0E                     __end_of_Wait_Half_Sec:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           postdec1	equ	0xFE5
  4760                           fsr1l	equ	0xFE1
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4764 ;; Defined at:
  4765 ;;		line 210 in file "I2C_Support.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  Device          1   30[COMRAM] unsigned char 
  4770 ;;  control_F       1   29[COMRAM] unsigned char 
  4771 ;;  control_E       1   28[COMRAM] unsigned char 
  4772 ;;  Address_F       1   27[COMRAM] unsigned char 
  4773 ;;  Address_E       1   26[COMRAM] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;		None               void
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;Total ram usage:        5 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    8
  4790 ;; This function calls:
  4791 ;;		_DS3231_Init
  4792 ;;		_I2C_Write_Address_Read_One_Byte
  4793 ;;		_I2C_Write_Address_Write_One_Byte
  4794 ;; This function is called by:
  4795 ;;		_Test_Alarm
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text12
  4800  00328C                     __ptext12:
  4801                           	opt stack 0
  4802  00328C                     _DS3231_Turn_On_Alarm:
  4803                           	opt stack 21
  4804                           
  4805                           ;I2C_Support.c: 212: char Device = 0x68;
  4806                           
  4807                           ;incstack = 0
  4808  00328C  0E68               	movlw	104
  4809  00328E  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4810                           
  4811                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  4812  003290  0E0E               	movlw	14
  4813  003292  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4814                           
  4815                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  4816  003294  0E0F               	movlw	15
  4817  003296  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4818                           
  4819                           ;I2C_Support.c: 215: char control_E;
  4820                           ;I2C_Support.c: 216: char control_F;
  4821                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4822  003298  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4823  00329C  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4824  00329E  ECDB  F01B         	call	_I2C_Write_Address_Read_One_Byte
  4825  0032A2  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4826                           
  4827                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  4828  0032A4  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4829  0032A6  0901               	iorlw	1
  4830  0032A8  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4831                           
  4832                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4833  0032AA  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4834  0032AE  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4835  0032B2  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4836  0032B4  ECC8  F01C         	call	_I2C_Write_Address_Write_One_Byte
  4837                           
  4838                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4839  0032B8  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4840  0032BC  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4841  0032BE  ECDB  F01B         	call	_I2C_Write_Address_Read_One_Byte
  4842  0032C2  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4843                           
  4844                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  4845  0032C4  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4846  0032C6  0BFE               	andlw	254
  4847  0032C8  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4848                           
  4849                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4850  0032CA  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4851  0032CE  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4852  0032D2  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4853  0032D4  ECC8  F01C         	call	_I2C_Write_Address_Write_One_Byte
  4854                           
  4855                           ;I2C_Support.c: 225: DS3231_Init();
  4856  0032D8  EC86  F013         	call	_DS3231_Init	;wreg free
  4857  0032DC  0012               	return		;funcret
  4858  0032DE                     __end_of_DS3231_Turn_On_Alarm:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           fsr1l	equ	0xFE1
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4871 ;; Defined at:
  4872 ;;		line 193 in file "I2C_Support.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  Device          1   30[COMRAM] unsigned char 
  4877 ;;  control_F       1   29[COMRAM] unsigned char 
  4878 ;;  control_E       1   28[COMRAM] unsigned char 
  4879 ;;  Address_F       1   27[COMRAM] unsigned char 
  4880 ;;  Address_E       1   26[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;		None               void
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;Total ram usage:        5 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    8
  4897 ;; This function calls:
  4898 ;;		_DS3231_Init
  4899 ;;		_I2C_Write_Address_Read_One_Byte
  4900 ;;		_I2C_Write_Address_Write_One_Byte
  4901 ;; This function is called by:
  4902 ;;		_main
  4903 ;;		_Test_Alarm
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text13
  4908  0032DE                     __ptext13:
  4909                           	opt stack 0
  4910  0032DE                     _DS3231_Turn_Off_Alarm:
  4911                           	opt stack 21
  4912                           
  4913                           ;I2C_Support.c: 195: char Device = 0x68;
  4914                           
  4915                           ;incstack = 0
  4916  0032DE  0E68               	movlw	104
  4917  0032E0  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  4918                           
  4919                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  4920  0032E2  0E0E               	movlw	14
  4921  0032E4  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4922                           
  4923                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  4924  0032E6  0E0F               	movlw	15
  4925  0032E8  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4926                           
  4927                           ;I2C_Support.c: 198: char control_E;
  4928                           ;I2C_Support.c: 199: char control_F;
  4929                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4930  0032EA  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4931  0032EE  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4932  0032F0  ECDB  F01B         	call	_I2C_Write_Address_Read_One_Byte
  4933  0032F4  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4934                           
  4935                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  4936  0032F6  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4937  0032F8  0BFE               	andlw	254
  4938  0032FA  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4939                           
  4940                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4941  0032FC  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4942  003300  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4943  003304  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4944  003306  ECC8  F01C         	call	_I2C_Write_Address_Write_One_Byte
  4945                           
  4946                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4947  00330A  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4948  00330E  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4949  003310  ECDB  F01B         	call	_I2C_Write_Address_Read_One_Byte
  4950  003314  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4951                           
  4952                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  4953  003316  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4954  003318  0BFE               	andlw	254
  4955  00331A  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4956                           
  4957                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4958  00331C  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4959  003320  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4960  003324  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4961  003326  ECC8  F01C         	call	_I2C_Write_Address_Write_One_Byte
  4962                           
  4963                           ;I2C_Support.c: 207: DS3231_Init();
  4964  00332A  EC86  F013         	call	_DS3231_Init	;wreg free
  4965  00332E  0012               	return		;funcret
  4966  003330                     __end_of_DS3231_Turn_Off_Alarm:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           postinc0	equ	0xFEE
  4973                           wreg	equ	0xFE8
  4974                           postdec1	equ	0xFE5
  4975                           fsr1l	equ	0xFE1
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _DS3231_Init *****************
  4979 ;; Defined at:
  4980 ;;		line 132 in file "I2C_Support.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  Device          1   25[COMRAM] unsigned char 
  4985 ;;  control_E       1   24[COMRAM] unsigned char 
  4986 ;;  Address_E       1   23[COMRAM] unsigned char 
  4987 ;;  Address_7       1   22[COMRAM] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;		None               void
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;Total ram usage:        4 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    7
  5004 ;; This function calls:
  5005 ;;		_I2C_ReStart
  5006 ;;		_I2C_Read
  5007 ;;		_I2C_Start
  5008 ;;		_I2C_Stop
  5009 ;;		_I2C_Write
  5010 ;;		_I2C_Write_Address_Read_One_Byte
  5011 ;;		_I2C_Write_Address_Write_One_Byte
  5012 ;; This function is called by:
  5013 ;;		_DS3231_Turn_Off_Alarm
  5014 ;;		_DS3231_Turn_On_Alarm
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text14
  5019  00270C                     __ptext14:
  5020                           	opt stack 0
  5021  00270C                     _DS3231_Init:
  5022                           	opt stack 21
  5023                           
  5024                           ;I2C_Support.c: 134: char Device = 0x68;
  5025                           
  5026                           ;incstack = 0
  5027  00270C  0E68               	movlw	104
  5028  00270E  6E1A               	movwf	DS3231_Init@Device,c
  5029                           
  5030                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  5031  002710  0E07               	movlw	7
  5032  002712  6E17               	movwf	DS3231_Init@Address_7,c
  5033                           
  5034                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  5035  002714  0E0E               	movlw	14
  5036  002716  6E18               	movwf	DS3231_Init@Address_E,c
  5037                           
  5038                           ;I2C_Support.c: 137: char control_E;
  5039                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5040  002718  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5041  00271C  501A               	movf	DS3231_Init@Device,w,c
  5042  00271E  ECDB  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5043  002722  6E19               	movwf	DS3231_Init@control_E,c
  5044                           
  5045                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  5046  002724  5019               	movf	DS3231_Init@control_E,w,c
  5047  002726  0B01               	andlw	1
  5048  002728  6E19               	movwf	DS3231_Init@control_E,c
  5049                           
  5050                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  5051  00272A  5019               	movf	DS3231_Init@control_E,w,c
  5052  00272C  0925               	iorlw	37
  5053  00272E  6E19               	movwf	DS3231_Init@control_E,c
  5054                           
  5055                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5056  002730  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5057  002734  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5058  002738  501A               	movf	DS3231_Init@Device,w,c
  5059  00273A  ECC8  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5060                           
  5061                           ;I2C_Support.c: 143: I2C_Start();
  5062  00273E  ECEA  F01D         	call	_I2C_Start	;wreg free
  5063                           
  5064                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  5065  002742  501A               	movf	DS3231_Init@Device,w,c
  5066  002744  241A               	addwf	DS3231_Init@Device,w,c
  5067  002746  EC48  F01B         	call	_I2C_Write
  5068                           
  5069                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  5070  00274A  5017               	movf	DS3231_Init@Address_7,w,c
  5071  00274C  EC48  F01B         	call	_I2C_Write
  5072                           
  5073                           ;I2C_Support.c: 146: I2C_ReStart();
  5074  002750  EC6D  F01D         	call	_I2C_ReStart	;wreg free
  5075                           
  5076                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  5077  002754  80D8               	bsf	status,0,c
  5078  002756  341A               	rlcf	DS3231_Init@Device,w,c
  5079  002758  EC48  F01B         	call	_I2C_Write
  5080                           
  5081                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  5082  00275C  0E01               	movlw	1
  5083  00275E  ECA5  F01A         	call	_I2C_Read
  5084  002762  6E58               	movwf	_alarm_second,c
  5085                           
  5086                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  5087  002764  0E01               	movlw	1
  5088  002766  ECA5  F01A         	call	_I2C_Read
  5089  00276A  6E57               	movwf	_alarm_minute,c
  5090                           
  5091                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  5092  00276C  0E01               	movlw	1
  5093  00276E  ECA5  F01A         	call	_I2C_Read
  5094  002772  6E56               	movwf	_alarm_hour,c
  5095                           
  5096                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  5097  002774  0E00               	movlw	0
  5098  002776  ECA5  F01A         	call	_I2C_Read
  5099  00277A  6E55               	movwf	_alarm_date,c
  5100                           
  5101                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  5102  00277C  5058               	movf	_alarm_second,w,c
  5103  00277E  0B7F               	andlw	127
  5104  002780  6E58               	movwf	_alarm_second,c
  5105                           
  5106                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  5107  002782  5057               	movf	_alarm_minute,w,c
  5108  002784  0B7F               	andlw	127
  5109  002786  6E57               	movwf	_alarm_minute,c
  5110                           
  5111                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  5112  002788  5056               	movf	_alarm_hour,w,c
  5113  00278A  0B7F               	andlw	127
  5114  00278C  6E56               	movwf	_alarm_hour,c
  5115                           
  5116                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  5117  00278E  5055               	movf	_alarm_date,w,c
  5118  002790  0980               	iorlw	128
  5119  002792  6E55               	movwf	_alarm_date,c
  5120                           
  5121                           ;I2C_Support.c: 158: I2C_Start();
  5122  002794  ECEA  F01D         	call	_I2C_Start	;wreg free
  5123                           
  5124                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  5125  002798  501A               	movf	DS3231_Init@Device,w,c
  5126  00279A  241A               	addwf	DS3231_Init@Device,w,c
  5127  00279C  EC48  F01B         	call	_I2C_Write
  5128                           
  5129                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  5130  0027A0  5017               	movf	DS3231_Init@Address_7,w,c
  5131  0027A2  EC48  F01B         	call	_I2C_Write
  5132                           
  5133                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  5134  0027A6  5058               	movf	_alarm_second,w,c
  5135  0027A8  EC48  F01B         	call	_I2C_Write
  5136                           
  5137                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  5138  0027AC  5057               	movf	_alarm_minute,w,c
  5139  0027AE  EC48  F01B         	call	_I2C_Write
  5140                           
  5141                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  5142  0027B2  5056               	movf	_alarm_hour,w,c
  5143  0027B4  EC48  F01B         	call	_I2C_Write
  5144                           
  5145                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  5146  0027B8  5055               	movf	_alarm_date,w,c
  5147  0027BA  EC48  F01B         	call	_I2C_Write
  5148                           
  5149                           ;I2C_Support.c: 166: I2C_Stop();
  5150  0027BE  ECE1  F01D         	call	_I2C_Stop	;wreg free
  5151  0027C2  0012               	return		;funcret
  5152  0027C4                     __end_of_DS3231_Init:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           postdec1	equ	0xFE5
  5161                           fsr1l	equ	0xFE1
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5165 ;; Defined at:
  5166 ;;		line 131 in file "I2C.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  Device          1    wreg     unsigned char 
  5169 ;;  Address         1   18[COMRAM] unsigned char 
  5170 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  Device          1   20[COMRAM] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:        3 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    5
  5189 ;; This function calls:
  5190 ;;		_I2C_Start
  5191 ;;		_I2C_Stop
  5192 ;;		_I2C_Write
  5193 ;; This function is called by:
  5194 ;;		_DS3231_Init
  5195 ;;		_DS3231_Turn_Off_Alarm
  5196 ;;		_DS3231_Turn_On_Alarm
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text15
  5201  003990                     __ptext15:
  5202                           	opt stack 0
  5203  003990                     _I2C_Write_Address_Write_One_Byte:
  5204                           	opt stack 23
  5205                           
  5206                           ;incstack = 0
  5207                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5208  003990  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5209                           
  5210                           ;I2C.c: 133: I2C_Start();
  5211  003992  ECEA  F01D         	call	_I2C_Start	;wreg free
  5212                           
  5213                           ;I2C.c: 134: I2C_Write((Device << 1) | 0);
  5214  003996  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5215  003998  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5216  00399A  EC48  F01B         	call	_I2C_Write
  5217                           
  5218                           ;I2C.c: 135: I2C_Write(Address);
  5219  00399E  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5220  0039A0  EC48  F01B         	call	_I2C_Write
  5221                           
  5222                           ;I2C.c: 136: I2C_Write(Data_Out);
  5223  0039A4  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5224  0039A6  EC48  F01B         	call	_I2C_Write
  5225                           
  5226                           ;I2C.c: 137: I2C_Stop();
  5227  0039AA  ECE1  F01D         	call	_I2C_Stop	;wreg free
  5228  0039AE  0012               	return		;funcret
  5229  0039B0                     __end_of_I2C_Write_Address_Write_One_Byte:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           postinc0	equ	0xFEE
  5236                           wreg	equ	0xFE8
  5237                           postdec1	equ	0xFE5
  5238                           fsr1l	equ	0xFE1
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5242 ;; Defined at:
  5243 ;;		line 118 in file "I2C.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  Device          1    wreg     unsigned char 
  5246 ;;  Address         1   19[COMRAM] unsigned char 
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;  Device          1   21[COMRAM] unsigned char 
  5249 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      unsigned char 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5259 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;Total ram usage:        3 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    6
  5266 ;; This function calls:
  5267 ;;		_I2C_ReStart
  5268 ;;		_I2C_Read
  5269 ;;		_I2C_Start
  5270 ;;		_I2C_Stop
  5271 ;;		_I2C_Write
  5272 ;; This function is called by:
  5273 ;;		_DS3231_Init
  5274 ;;		_DS3231_Turn_Off_Alarm
  5275 ;;		_DS3231_Turn_On_Alarm
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text16
  5280  0037B6                     __ptext16:
  5281                           	opt stack 0
  5282  0037B6                     _I2C_Write_Address_Read_One_Byte:
  5283                           	opt stack 22
  5284                           
  5285                           ;incstack = 0
  5286                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5287  0037B6  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5288                           
  5289                           ;I2C.c: 120: char Data_Ret;
  5290                           ;I2C.c: 121: I2C_Start();
  5291  0037B8  ECEA  F01D         	call	_I2C_Start	;wreg free
  5292                           
  5293                           ;I2C.c: 122: I2C_Write((Device << 1) | 0);
  5294  0037BC  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5295  0037BE  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5296  0037C0  EC48  F01B         	call	_I2C_Write
  5297                           
  5298                           ;I2C.c: 123: I2C_Write(Address);
  5299  0037C4  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5300  0037C6  EC48  F01B         	call	_I2C_Write
  5301                           
  5302                           ;I2C.c: 124: I2C_ReStart();
  5303  0037CA  EC6D  F01D         	call	_I2C_ReStart	;wreg free
  5304                           
  5305                           ;I2C.c: 125: I2C_Write((Device << 1) | 1);
  5306  0037CE  80D8               	bsf	status,0,c
  5307  0037D0  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5308  0037D2  EC48  F01B         	call	_I2C_Write
  5309                           
  5310                           ;I2C.c: 126: Data_Ret = I2C_Read(0);
  5311  0037D6  0E00               	movlw	0
  5312  0037D8  ECA5  F01A         	call	_I2C_Read
  5313  0037DC  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5314                           
  5315                           ;I2C.c: 127: I2C_Stop();
  5316  0037DE  ECE1  F01D         	call	_I2C_Stop	;wreg free
  5317                           
  5318                           ;I2C.c: 128: return Data_Ret;
  5319  0037E2  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5320  0037E4  D000               	goto	l124
  5321  0037E6                     l124:
  5322  0037E6  0012               	return		;funcret
  5323  0037E8                     __end_of_I2C_Write_Address_Read_One_Byte:
  5324                           	opt stack 0
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _Activate_Buzzer *****************
  5336 ;; Defined at:
  5337 ;;		line 94 in file "utils.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;		None               void
  5344 ;; Registers used:
  5345 ;;		wreg, status,2
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    3
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_Test_Alarm
  5362 ;;		_Do_Beep
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text17
  5367  003B7A                     __ptext17:
  5368                           	opt stack 0
  5369  003B7A                     _Activate_Buzzer:
  5370                           	opt stack 26
  5371                           
  5372                           ;utils.c: 96: PR2 = 0b11111001 ;
  5373                           
  5374                           ;incstack = 0
  5375  003B7A  0EF9               	movlw	249
  5376  003B7C  6ECB               	movwf	4043,c	;volatile
  5377                           
  5378                           ;utils.c: 97: T2CON = 0b00000101 ;
  5379  003B7E  0E05               	movlw	5
  5380  003B80  6ECA               	movwf	4042,c	;volatile
  5381                           
  5382                           ;utils.c: 98: CCPR2L = 0b01001010 ;
  5383  003B82  0E4A               	movlw	74
  5384  003B84  6EBB               	movwf	4027,c	;volatile
  5385                           
  5386                           ;utils.c: 99: CCP2CON = 0b00111100 ;
  5387  003B86  0E3C               	movlw	60
  5388  003B88  6EBA               	movwf	4026,c	;volatile
  5389  003B8A  0012               	return		;funcret
  5390  003B8C                     __end_of_Activate_Buzzer:
  5391                           	opt stack 0
  5392                           tblptru	equ	0xFF8
  5393                           tblptrh	equ	0xFF7
  5394                           tblptrl	equ	0xFF6
  5395                           tablat	equ	0xFF5
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           postdec1	equ	0xFE5
  5399                           fsr1l	equ	0xFE1
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _Set_RPM_RGB *****************
  5403 ;; Defined at:
  5404 ;;		line 64 in file "Fan_Support.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  rpm             2   16[COMRAM] int 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;		None               void
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    3
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_main
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text18
  5433  002FDC                     __ptext18:
  5434                           	opt stack 0
  5435  002FDC                     _Set_RPM_RGB:
  5436                           	opt stack 27
  5437                           
  5438                           ;Fan_Support.c: 66: if(rpm == 0)
  5439                           
  5440                           ;incstack = 0
  5441  002FDC  5011               	movf	Set_RPM_RGB@rpm,w,c
  5442  002FDE  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  5443  002FE0  A4D8               	btfss	status,2,c
  5444  002FE2  D002               	goto	l6905
  5445                           
  5446                           ;Fan_Support.c: 67: {
  5447                           ;Fan_Support.c: 68: PORTEbits.RE0 = 0;
  5448  002FE4  9084               	bcf	3972,0,c	;volatile
  5449  002FE6  D010               	goto	L11
  5450  002FE8                     l6905:
  5451                           
  5452                           ;Fan_Support.c: 71: else if(rpm > 0 && rpm < 1800)
  5453  002FE8  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5454  002FEA  D010               	goto	l6911
  5455  002FEC  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  5456  002FEE  E103               	bnz	u4530
  5457  002FF0  0411               	decf	Set_RPM_RGB@rpm,w,c
  5458  002FF2  A0D8               	btfss	status,0,c
  5459  002FF4  D00B               	goto	l6911
  5460  002FF6                     u4530:
  5461  002FF6  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5462  002FF8  D006               	goto	l6909
  5463  002FFA  0E08               	movlw	8
  5464  002FFC  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5465  002FFE  0E07               	movlw	7
  5466  003000  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5467  003002  B0D8               	btfsc	status,0,c
  5468  003004  D003               	goto	l6911
  5469  003006                     l6909:
  5470                           
  5471                           ;Fan_Support.c: 72: {
  5472                           ;Fan_Support.c: 73: PORTEbits.RE0 = 1;
  5473  003006  8084               	bsf	3972,0,c	;volatile
  5474  003008                     L11:
  5475                           
  5476                           ;Fan_Support.c: 74: PORTEbits.RE1 = 0;
  5477  003008  9284               	bcf	3972,1,c	;volatile
  5478                           
  5479                           ;Fan_Support.c: 75: }
  5480  00300A  D01D               	goto	l57
  5481  00300C                     l6911:
  5482                           
  5483                           ;Fan_Support.c: 76: else if(rpm >= 1800 && rpm < 2700)
  5484  00300C  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5485  00300E  D010               	goto	l6917
  5486  003010  0E08               	movlw	8
  5487  003012  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5488  003014  0E07               	movlw	7
  5489  003016  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5490  003018  A0D8               	btfss	status,0,c
  5491  00301A  D00A               	goto	l6917
  5492  00301C  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5493  00301E  D006               	goto	l6915
  5494  003020  0E8C               	movlw	140
  5495  003022  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5496  003024  0E0A               	movlw	10
  5497  003026  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5498  003028  B0D8               	btfsc	status,0,c
  5499  00302A  D002               	goto	l6917
  5500  00302C                     l6915:
  5501                           
  5502                           ;Fan_Support.c: 77: {
  5503                           ;Fan_Support.c: 78: PORTEbits.RE0 = 1;
  5504  00302C  8084               	bsf	3972,0,c	;volatile
  5505  00302E  D009               	goto	L12
  5506  003030                     l6917:
  5507                           
  5508                           ;Fan_Support.c: 81: else if(rpm >= 2700)
  5509  003030  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5510  003032  D009               	goto	l57
  5511  003034  0E8C               	movlw	140
  5512  003036  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5513  003038  0E0A               	movlw	10
  5514  00303A  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5515  00303C  A0D8               	btfss	status,0,c
  5516  00303E  D003               	goto	l57
  5517                           
  5518                           ;Fan_Support.c: 82: {
  5519                           ;Fan_Support.c: 83: PORTEbits.RE0 = 0;
  5520  003040  9084               	bcf	3972,0,c	;volatile
  5521  003042                     L12:
  5522                           
  5523                           ;Fan_Support.c: 84: PORTEbits.RE1 = 1;
  5524  003042  8284               	bsf	3972,1,c	;volatile
  5525  003044  D000               	goto	l57
  5526  003046                     l57:
  5527  003046  0012               	return		;funcret
  5528  003048                     __end_of_Set_RPM_RGB:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postdec1	equ	0xFE5
  5537                           fsr1l	equ	0xFE1
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _Monitor_Heater *****************
  5541 ;; Defined at:
  5542 ;;		line 25 in file "Fan_Support.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;		None
  5547 ;; Return value:  Size  Location     Type
  5548 ;;		None               void
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:        0 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		_Turn_Off_Fan
  5565 ;;		_Turn_On_Fan
  5566 ;;		_do_update_pwm
  5567 ;;		_get_duty_cycle
  5568 ;; This function is called by:
  5569 ;;		_main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text19
  5574  00381A                     __ptext19:
  5575                           	opt stack 0
  5576  00381A                     _Monitor_Heater:
  5577                           	opt stack 23
  5578                           
  5579                           ;Fan_Support.c: 27: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5580                           
  5581                           ;incstack = 0
  5582  00381A  C045  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  5583  00381E  C046  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5584  003822  C06F  F013         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5585  003826  6A14               	clrf	get_duty_cycle@set_temp+1,c
  5586  003828  EC85  F01B         	call	_get_duty_cycle	;wreg free
  5587  00382C  5011               	movf	?_get_duty_cycle,w,c
  5588  00382E  6E5D               	movwf	_duty_cycle,c
  5589                           
  5590                           ;Fan_Support.c: 28: do_update_pwm(duty_cycle);
  5591  003830  505D               	movf	_duty_cycle,w,c
  5592  003832  ECC6  F012         	call	_do_update_pwm
  5593                           
  5594                           ;Fan_Support.c: 29: if (FAN == 0) Turn_Off_Fan();
  5595  003836  504D               	movf	_FAN,w,c
  5596  003838  A4D8               	btfss	status,2,c
  5597  00383A  D003               	goto	l9487
  5598  00383C  EC54  F01E         	call	_Turn_Off_Fan	;wreg free
  5599  003840  D003               	goto	l33
  5600  003842                     l9487:
  5601                           
  5602                           ;Fan_Support.c: 30: else Turn_On_Fan();
  5603  003842  ECFC  F01D         	call	_Turn_On_Fan	;wreg free
  5604  003846  D000               	goto	l33
  5605  003848                     l33:
  5606  003848  0012               	return		;funcret
  5607  00384A                     __end_of_Monitor_Heater:
  5608                           	opt stack 0
  5609                           tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           postdec1	equ	0xFE5
  5616                           fsr1l	equ	0xFE1
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _get_duty_cycle *****************
  5620 ;; Defined at:
  5621 ;;		line 16 in file "Fan_Support.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  temp            2   16[COMRAM] int 
  5624 ;;  set_temp        2   18[COMRAM] int 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  2   16[COMRAM] int 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5636 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;Total ram usage:        5 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    3
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_Monitor_Heater
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text20
  5651  00370A                     __ptext20:
  5652                           	opt stack 0
  5653  00370A                     _get_duty_cycle:
  5654                           	opt stack 26
  5655                           
  5656                           ;Fan_Support.c: 18: if(temp > set_temp) duty_cycle = 0;
  5657                           
  5658                           ;incstack = 0
  5659  00370A  5011               	movf	get_duty_cycle@temp,w,c
  5660  00370C  5C13               	subwf	get_duty_cycle@set_temp,w,c
  5661  00370E  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5662  003710  0A80               	xorlw	128
  5663  003712  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5664  003714  5012               	movf	get_duty_cycle@temp+1,w,c
  5665  003716  0A80               	xorlw	128
  5666  003718  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  5667  00371A  B0D8               	btfsc	status,0,c
  5668  00371C  D002               	goto	l6405
  5669  00371E  0E00               	movlw	0
  5670  003720  D006               	goto	L13
  5671  003722                     l6405:
  5672                           
  5673                           ;Fan_Support.c: 19: else duty_cycle = 2 * (set_temp - temp);
  5674  003722  5011               	movf	get_duty_cycle@temp,w,c
  5675  003724  0800               	sublw	0
  5676  003726  2413               	addwf	get_duty_cycle@set_temp,w,c
  5677  003728  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5678  00372A  90D8               	bcf	status,0,c
  5679  00372C  3415               	rlcf	??_get_duty_cycle,w,c
  5680  00372E                     L13:
  5681  00372E  6E5D               	movwf	_duty_cycle,c
  5682                           
  5683                           ;Fan_Support.c: 21: if(duty_cycle > 100) duty_cycle = 100;
  5684  003730  0E64               	movlw	100
  5685  003732  645D               	cpfsgt	_duty_cycle,c
  5686  003734  D003               	goto	l6409
  5687  003736  0E64               	movlw	100
  5688  003738  6E5D               	movwf	_duty_cycle,c
  5689  00373A  D000               	goto	l6409
  5690  00373C                     l6409:
  5691                           
  5692                           ;Fan_Support.c: 22: return duty_cycle;
  5693  00373C  C05D  F011         	movff	_duty_cycle,?_get_duty_cycle
  5694  003740  6A12               	clrf	?_get_duty_cycle+1,c
  5695  003742  D000               	goto	l28
  5696  003744                     l28:
  5697  003744  0012               	return		;funcret
  5698  003746                     __end_of_get_duty_cycle:
  5699                           	opt stack 0
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           postdec1	equ	0xFE5
  5707                           fsr1l	equ	0xFE1
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function _Turn_On_Fan *****************
  5711 ;; Defined at:
  5712 ;;		line 48 in file "Fan_Support.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;		None               void
  5719 ;; Registers used:
  5720 ;;		wreg, status,2, status,0, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    6
  5733 ;; This function calls:
  5734 ;;		_do_update_pwm
  5735 ;; This function is called by:
  5736 ;;		_Monitor_Heater
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text21
  5741  003BF8                     __ptext21:
  5742                           	opt stack 0
  5743  003BF8                     _Turn_On_Fan:
  5744                           	opt stack 23
  5745                           
  5746                           ;Fan_Support.c: 50: FAN = 1;
  5747                           
  5748                           ;incstack = 0
  5749  003BF8  0E01               	movlw	1
  5750  003BFA  6E4D               	movwf	_FAN,c
  5751                           
  5752                           ;Fan_Support.c: 51: do_update_pwm(duty_cycle);
  5753  003BFC  505D               	movf	_duty_cycle,w,c
  5754  003BFE  ECC6  F012         	call	_do_update_pwm
  5755                           
  5756                           ;Fan_Support.c: 52: PORTAbits.RA5 = 1;
  5757  003C02  8A80               	bsf	3968,5,c	;volatile
  5758                           
  5759                           ;Fan_Support.c: 53: PORTEbits.RE2 = 1;
  5760  003C04  8484               	bsf	3972,2,c	;volatile
  5761  003C06  0012               	return		;funcret
  5762  003C08                     __end_of_Turn_On_Fan:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           postinc0	equ	0xFEE
  5769                           wreg	equ	0xFE8
  5770                           postdec1	equ	0xFE5
  5771                           fsr1l	equ	0xFE1
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function _do_update_pwm *****************
  5775 ;; Defined at:
  5776 ;;		line 132 in file "utils.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  duty_cycle      1    wreg     unsigned char 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  duty_cycle      1    3[BANK1 ] unsigned char 
  5781 ;;  dc_f            3    0[BANK1 ] float 
  5782 ;;  dc_I            2    4[BANK1 ] int 
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, status,2, status,0, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Totals:         3       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;Total ram usage:        9 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    5
  5799 ;; This function calls:
  5800 ;;		___ftdiv
  5801 ;;		___ftmul
  5802 ;;		___fttol
  5803 ;;		___lbtoft
  5804 ;; This function is called by:
  5805 ;;		_Monitor_Heater
  5806 ;;		_Turn_On_Fan
  5807 ;;		_Do_Beep
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text22
  5812  00258C                     __ptext22:
  5813                           	opt stack 0
  5814  00258C                     _do_update_pwm:
  5815                           	opt stack 24
  5816                           
  5817                           ;incstack = 0
  5818                           ;do_update_pwm@duty_cycle stored from wreg
  5819  00258C  0101               	movlb	1	; () banked
  5820  00258E  6F37               	movwf	do_update_pwm@duty_cycle& (0+255),b
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;utils.c: 134: float dc_f;
  5824                           ;utils.c: 135: int dc_I;
  5825                           ;utils.c: 136: PR2 = 0b00000100 ;
  5826  002590  0E04               	movlw	4
  5827  002592  6ECB               	movwf	4043,c	;volatile
  5828                           
  5829                           ;utils.c: 137: T2CON = 0b00000111 ;
  5830  002594  0E07               	movlw	7
  5831  002596  6ECA               	movwf	4042,c	;volatile
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;utils.c: 138: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  5835  002598  0E00               	movlw	0
  5836  00259A  6E20               	movwf	___ftmul@f2,c
  5837  00259C  0E80               	movlw	128
  5838  00259E  6E21               	movwf	___ftmul@f2+1,c
  5839  0025A0  0E40               	movlw	64
  5840  0025A2  6E22               	movwf	___ftmul@f2+2,c
  5841  0025A4  0101               	movlb	1	; () banked
  5842  0025A6  5137               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5843  0025A8  ECA4  F01C         	call	___lbtoft
  5844  0025AC  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  5845  0025B0  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  5846  0025B4  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  5847  0025B8  ECCE  F00E         	call	___ftmul	;wreg free
  5848  0025BC  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  5849  0025C0  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  5850  0025C4  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  5851  0025C8  0E00               	movlw	0
  5852  0025CA  6E2F               	movwf	___ftdiv@f2,c
  5853  0025CC  0EA0               	movlw	160
  5854  0025CE  6E30               	movwf	___ftdiv@f2+1,c
  5855  0025D0  0E41               	movlw	65
  5856  0025D2  6E31               	movwf	___ftdiv@f2+2,c
  5857  0025D4  ECAF  F010         	call	___ftdiv	;wreg free
  5858  0025D8  C02C  F134         	movff	?___ftdiv,do_update_pwm@dc_f
  5859  0025DC  C02D  F135         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  5860  0025E0  C02E  F136         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  5861                           
  5862                           ;utils.c: 139: dc_I = (int) dc_f;
  5863  0025E4  C134  F02C         	movff	do_update_pwm@dc_f,___fttol@f1
  5864  0025E8  C135  F02D         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  5865  0025EC  C136  F02E         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  5866  0025F0  EC3C  F010         	call	___fttol	;wreg free
  5867  0025F4  C02C  F138         	movff	?___fttol,do_update_pwm@dc_I
  5868  0025F8  C02D  F139         	movff	?___fttol+1,do_update_pwm@dc_I+1
  5869                           
  5870                           ;utils.c: 140: if (dc_I > duty_cycle) dc_I++;
  5871  0025FC  0101               	movlb	1	; () banked
  5872  0025FE  5137               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5873  002600  6E3B               	movwf	??_do_update_pwm& (0+255),c
  5874  002602  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  5875  002604  0101               	movlb	1	; () banked
  5876  002606  5138               	movf	do_update_pwm@dc_I& (0+255),w,b
  5877  002608  5C3B               	subwf	??_do_update_pwm,w,c
  5878  00260A  503C               	movf	??_do_update_pwm+1,w,c
  5879  00260C  0A80               	xorlw	128
  5880  00260E  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  5881  002610  0101               	movlb	1	; () banked
  5882  002612  5139               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  5883  002614  0A80               	xorlw	128
  5884  002616  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  5885  002618  B0D8               	btfsc	status,0,c
  5886  00261A  D004               	goto	l8795
  5887                           
  5888                           ; BSR set to: 1
  5889  00261C  0101               	movlb	1	; () banked
  5890  00261E  4B38               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  5891  002620  2B39               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  5892  002622  D000               	goto	l8795
  5893  002624                     l8795:
  5894                           
  5895                           ; BSR set to: 1
  5896                           ;utils.c: 141: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  5897  002624  C138  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5898  002628  0E03               	movlw	3
  5899  00262A  163B               	andwf	??_do_update_pwm,f,c
  5900  00262C  383B               	swapf	??_do_update_pwm,w,c
  5901  00262E  0BF0               	andlw	240
  5902  002630  090C               	iorlw	12
  5903  002632  6EBD               	movwf	4029,c	;volatile
  5904                           
  5905                           ; BSR set to: 1
  5906                           ;utils.c: 142: CCPR1L = (dc_I) >> 2;
  5907  002634  C138  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5908  002638  C139  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  5909  00263C  343C               	rlcf	??_do_update_pwm+1,w,c
  5910  00263E  323C               	rrcf	??_do_update_pwm+1,f,c
  5911  002640  323B               	rrcf	??_do_update_pwm,f,c
  5912  002642  343C               	rlcf	??_do_update_pwm+1,w,c
  5913  002644  323C               	rrcf	??_do_update_pwm+1,f,c
  5914  002646  323B               	rrcf	??_do_update_pwm,f,c
  5915  002648  503B               	movf	??_do_update_pwm,w,c
  5916  00264A  6EBE               	movwf	4030,c	;volatile
  5917                           
  5918                           ; BSR set to: 1
  5919  00264C  0012               	return		;funcret
  5920  00264E                     __end_of_do_update_pwm:
  5921                           	opt stack 0
  5922                           tblptru	equ	0xFF8
  5923                           tblptrh	equ	0xFF7
  5924                           tblptrl	equ	0xFF6
  5925                           tablat	equ	0xFF5
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1l	equ	0xFE1
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function ___lbtoft *****************
  5933 ;; Defined at:
  5934 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  c               1    wreg     unsigned char 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;  c               1   27[COMRAM] unsigned char 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  3   24[COMRAM] float 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5948 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;Total ram usage:        4 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    4
  5955 ;; This function calls:
  5956 ;;		___ftpack
  5957 ;; This function is called by:
  5958 ;;		_do_update_pwm
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text23
  5963  003948                     __ptext23:
  5964                           	opt stack 0
  5965  003948                     ___lbtoft:
  5966                           	opt stack 24
  5967                           
  5968                           ; BSR set to: 1
  5969                           ;incstack = 0
  5970                           ;___lbtoft@c stored from wreg
  5971  003948  6E1C               	movwf	___lbtoft@c,c
  5972  00394A  501C               	movf	___lbtoft@c,w,c
  5973  00394C  6E11               	movwf	___ftpack@arg,c
  5974  00394E  6A12               	clrf	___ftpack@arg+1,c
  5975  003950  6A13               	clrf	___ftpack@arg+2,c
  5976  003952  0E8E               	movlw	142
  5977  003954  6E14               	movwf	___ftpack@exp,c
  5978  003956  0E00               	movlw	0
  5979  003958  6E15               	movwf	___ftpack@sign,c
  5980  00395A  EC63  F012         	call	___ftpack	;wreg free
  5981  00395E  C011  F019         	movff	?___ftpack,?___lbtoft
  5982  003962  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  5983  003966  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  5984  00396A  D000               	goto	l1950
  5985  00396C                     l1950:
  5986  00396C  0012               	return		;funcret
  5987  00396E                     __end_of___lbtoft:
  5988                           	opt stack 0
  5989                           tblptru	equ	0xFF8
  5990                           tblptrh	equ	0xFF7
  5991                           tblptrl	equ	0xFF6
  5992                           tablat	equ	0xFF5
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           postdec1	equ	0xFE5
  5996                           fsr1l	equ	0xFE1
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function ___fttol *****************
  6000 ;; Defined at:
  6001 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;  f1              3   43[COMRAM] float 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  lval            4   53[COMRAM] unsigned long 
  6006 ;;  exp1            1   57[COMRAM] unsigned char 
  6007 ;;  sign1           1   52[COMRAM] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  4   43[COMRAM] long 
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;Total ram usage:       15 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    3
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_Update_Screen
  6028 ;;		_do_update_pwm
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text24
  6033  002078                     __ptext24:
  6034                           	opt stack 0
  6035  002078                     ___fttol:
  6036                           	opt stack 26
  6037                           
  6038                           ;incstack = 0
  6039  002078  C02E  F030         	movff	___fttol@f1+2,??___fttol
  6040  00207C  6A31               	clrf	(??___fttol+1)& (0+255),c
  6041  00207E  6A32               	clrf	(??___fttol+2)& (0+255),c
  6042  002080  342D               	rlcf	___fttol@f1+1,w,c
  6043  002082  3630               	rlcf	??___fttol& (0+255),f,c
  6044  002084  E301               	bnc	u6451
  6045  002086  8031               	bsf	(??___fttol+1)& (0+255),0,c
  6046  002088                     u6451:
  6047  002088  5030               	movf	??___fttol,w,c
  6048  00208A  6E3A               	movwf	___fttol@exp1,c
  6049  00208C  503A               	movf	___fttol@exp1,w,c
  6050  00208E  A4D8               	btfss	status,2,c
  6051  002090  D002               	goto	l8741
  6052  002092  D039               	goto	l8765
  6053  002094  D063               	goto	l1909
  6054  002096                     l8741:
  6055  002096  0E17               	movlw	23
  6056  002098  6E30               	movwf	??___fttol& (0+255),c
  6057  00209A  C02C  F031         	movff	___fttol@f1,??___fttol+1
  6058  00209E  C02D  F032         	movff	___fttol@f1+1,??___fttol+2
  6059  0020A2  C02E  F033         	movff	___fttol@f1+2,??___fttol+3
  6060  0020A6  2830               	incf	??___fttol,w,c
  6061  0020A8  6E34               	movwf	(??___fttol+4)& (0+255),c
  6062  0020AA  D004               	goto	u6470
  6063  0020AC                     u6475:
  6064  0020AC  90D8               	bcf	status,0,c
  6065  0020AE  3233               	rrcf	??___fttol+3,f,c
  6066  0020B0  3232               	rrcf	??___fttol+2,f,c
  6067  0020B2  3231               	rrcf	??___fttol+1,f,c
  6068  0020B4                     u6470:
  6069  0020B4  2E34               	decfsz	(??___fttol+4)& (0+255),f,c
  6070  0020B6  D7FA               	goto	u6475
  6071  0020B8  5031               	movf	??___fttol+1,w,c
  6072  0020BA  6E35               	movwf	___fttol@sign1,c
  6073  0020BC  8E2D               	bsf	___fttol@f1+1,7,c
  6074  0020BE  0EFF               	movlw	255
  6075  0020C0  162C               	andwf	___fttol@f1,f,c
  6076  0020C2  0EFF               	movlw	255
  6077  0020C4  162D               	andwf	___fttol@f1+1,f,c
  6078  0020C6  0E00               	movlw	0
  6079  0020C8  162E               	andwf	___fttol@f1+2,f,c
  6080  0020CA  502C               	movf	___fttol@f1,w,c
  6081  0020CC  6E36               	movwf	___fttol@lval,c
  6082  0020CE  502D               	movf	___fttol@f1+1,w,c
  6083  0020D0  6E37               	movwf	___fttol@lval+1,c
  6084  0020D2  502E               	movf	___fttol@f1+2,w,c
  6085  0020D4  6E38               	movwf	___fttol@lval+2,c
  6086  0020D6  6A39               	clrf	___fttol@lval+3,c
  6087  0020D8  0E8E               	movlw	142
  6088  0020DA  5E3A               	subwf	___fttol@exp1,f,c
  6089  0020DC  AE3A               	btfss	___fttol@exp1,7,c
  6090  0020DE  D010               	goto	l8763
  6091  0020E0  503A               	movf	___fttol@exp1,w,c
  6092  0020E2  0A80               	xorlw	128
  6093  0020E4  0F8F               	addlw	143
  6094  0020E6  B0D8               	btfsc	status,0,c
  6095  0020E8  D003               	goto	l8759
  6096  0020EA  D00D               	goto	l8765
  6097  0020EC  D037               	goto	l1909
  6098  0020EE  D000               	goto	l8759
  6099  0020F0                     l8759:
  6100  0020F0  90D8               	bcf	status,0,c
  6101  0020F2  3239               	rrcf	___fttol@lval+3,f,c
  6102  0020F4  3238               	rrcf	___fttol@lval+2,f,c
  6103  0020F6  3237               	rrcf	___fttol@lval+1,f,c
  6104  0020F8  3236               	rrcf	___fttol@lval,f,c
  6105  0020FA  3E3A               	incfsz	___fttol@exp1,f,c
  6106  0020FC  D7F9               	goto	l8759
  6107  0020FE  D019               	goto	l8773
  6108  002100                     l8763:
  6109  002100  0E17               	movlw	23
  6110  002102  643A               	cpfsgt	___fttol@exp1,c
  6111  002104  D011               	goto	l8771
  6112  002106                     l8765:
  6113  002106  0E00               	movlw	0
  6114  002108  6E2C               	movwf	?___fttol,c
  6115  00210A  0E00               	movlw	0
  6116  00210C  6E2D               	movwf	?___fttol+1,c
  6117  00210E  0E00               	movlw	0
  6118  002110  6E2E               	movwf	?___fttol+2,c
  6119  002112  0E00               	movlw	0
  6120  002114  6E2F               	movwf	?___fttol+3,c
  6121  002116  D022               	goto	l1909
  6122  002118  D007               	goto	l8771
  6123  00211A                     l8769:
  6124  00211A  90D8               	bcf	status,0,c
  6125  00211C  3636               	rlcf	___fttol@lval,f,c
  6126  00211E  3637               	rlcf	___fttol@lval+1,f,c
  6127  002120  3638               	rlcf	___fttol@lval+2,f,c
  6128  002122  3639               	rlcf	___fttol@lval+3,f,c
  6129  002124  063A               	decf	___fttol@exp1,f,c
  6130  002126  D000               	goto	l8771
  6131  002128                     l8771:
  6132  002128  503A               	movf	___fttol@exp1,w,c
  6133  00212A  B4D8               	btfsc	status,2,c
  6134  00212C  D002               	goto	l8773
  6135  00212E  D7F5               	goto	l8769
  6136  002130  D000               	goto	l8773
  6137  002132                     l8773:
  6138  002132  5035               	movf	___fttol@sign1,w,c
  6139  002134  B4D8               	btfsc	status,2,c
  6140  002136  D009               	goto	l8777
  6141  002138  1E39               	comf	___fttol@lval+3,f,c
  6142  00213A  1E38               	comf	___fttol@lval+2,f,c
  6143  00213C  1E37               	comf	___fttol@lval+1,f,c
  6144  00213E  6C36               	negf	___fttol@lval,c
  6145  002140  0E00               	movlw	0
  6146  002142  2237               	addwfc	___fttol@lval+1,f,c
  6147  002144  2238               	addwfc	___fttol@lval+2,f,c
  6148  002146  2239               	addwfc	___fttol@lval+3,f,c
  6149  002148  D000               	goto	l8777
  6150  00214A                     l8777:
  6151  00214A  C036  F02C         	movff	___fttol@lval,?___fttol
  6152  00214E  C037  F02D         	movff	___fttol@lval+1,?___fttol+1
  6153  002152  C038  F02E         	movff	___fttol@lval+2,?___fttol+2
  6154  002156  C039  F02F         	movff	___fttol@lval+3,?___fttol+3
  6155  00215A  D000               	goto	l1909
  6156  00215C                     l1909:
  6157  00215C  0012               	return		;funcret
  6158  00215E                     __end_of___fttol:
  6159                           	opt stack 0
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postdec1	equ	0xFE5
  6167                           fsr1l	equ	0xFE1
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function ___ftmul *****************
  6171 ;; Defined at:
  6172 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  f1              3   28[COMRAM] float 
  6175 ;;  f2              3   31[COMRAM] float 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  6178 ;;  sign            1   42[COMRAM] unsigned char 
  6179 ;;  cntr            1   41[COMRAM] unsigned char 
  6180 ;;  exp             1   37[COMRAM] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  3   28[COMRAM] float 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6190 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;Total ram usage:       15 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    4
  6197 ;; This function calls:
  6198 ;;		___ftpack
  6199 ;; This function is called by:
  6200 ;;		_Update_Screen
  6201 ;;		_do_update_pwm
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           	psect	text25
  6206  001D9C                     __ptext25:
  6207                           	opt stack 0
  6208  001D9C                     ___ftmul:
  6209                           	opt stack 25
  6210                           
  6211                           ;incstack = 0
  6212  001D9C  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  6213  001DA0  6A24               	clrf	(??___ftmul+1)& (0+255),c
  6214  001DA2  6A25               	clrf	(??___ftmul+2)& (0+255),c
  6215  001DA4  341E               	rlcf	___ftmul@f1+1,w,c
  6216  001DA6  3623               	rlcf	??___ftmul& (0+255),f,c
  6217  001DA8  E301               	bnc	u6391
  6218  001DAA  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  6219  001DAC                     u6391:
  6220  001DAC  5023               	movf	??___ftmul,w,c
  6221  001DAE  6E26               	movwf	___ftmul@exp,c
  6222  001DB0  5026               	movf	___ftmul@exp,w,c
  6223  001DB2  A4D8               	btfss	status,2,c
  6224  001DB4  D002               	goto	l8693
  6225  001DB6  D00E               	goto	l8695
  6226  001DB8  D06C               	goto	l1888
  6227  001DBA                     l8693:
  6228  001DBA  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  6229  001DBE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  6230  001DC0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  6231  001DC2  3421               	rlcf	___ftmul@f2+1,w,c
  6232  001DC4  3623               	rlcf	??___ftmul& (0+255),f,c
  6233  001DC6  E301               	bnc	u6411
  6234  001DC8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  6235  001DCA                     u6411:
  6236  001DCA  5023               	movf	??___ftmul,w,c
  6237  001DCC  6E2B               	movwf	___ftmul@sign,c
  6238  001DCE  502B               	movf	___ftmul@sign,w,c
  6239  001DD0  A4D8               	btfss	status,2,c
  6240  001DD2  D007               	goto	l8699
  6241  001DD4                     l8695:
  6242  001DD4  0E00               	movlw	0
  6243  001DD6  6E1D               	movwf	?___ftmul,c
  6244  001DD8  0E00               	movlw	0
  6245  001DDA  6E1E               	movwf	?___ftmul+1,c
  6246  001DDC  0E00               	movlw	0
  6247  001DDE  6E1F               	movwf	?___ftmul+2,c
  6248  001DE0  D058               	goto	l1888
  6249  001DE2                     l8699:
  6250  001DE2  502B               	movf	___ftmul@sign,w,c
  6251  001DE4  0F7B               	addlw	123
  6252  001DE6  2626               	addwf	___ftmul@exp,f,c
  6253  001DE8  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  6254  001DEC  5022               	movf	___ftmul@f2+2,w,c
  6255  001DEE  1A2B               	xorwf	___ftmul@sign,f,c
  6256  001DF0  0E80               	movlw	128
  6257  001DF2  162B               	andwf	___ftmul@sign,f,c
  6258  001DF4  8E1E               	bsf	___ftmul@f1+1,7,c
  6259  001DF6  8E21               	bsf	___ftmul@f2+1,7,c
  6260  001DF8  0EFF               	movlw	255
  6261  001DFA  1620               	andwf	___ftmul@f2,f,c
  6262  001DFC  0EFF               	movlw	255
  6263  001DFE  1621               	andwf	___ftmul@f2+1,f,c
  6264  001E00  0E00               	movlw	0
  6265  001E02  1622               	andwf	___ftmul@f2+2,f,c
  6266  001E04  0E00               	movlw	0
  6267  001E06  6E27               	movwf	___ftmul@f3_as_product,c
  6268  001E08  0E00               	movlw	0
  6269  001E0A  6E28               	movwf	___ftmul@f3_as_product+1,c
  6270  001E0C  0E00               	movlw	0
  6271  001E0E  6E29               	movwf	___ftmul@f3_as_product+2,c
  6272  001E10  0E07               	movlw	7
  6273  001E12  6E2A               	movwf	___ftmul@cntr,c
  6274  001E14  D000               	goto	l8713
  6275  001E16                     l8713:
  6276  001E16  A01D               	btfss	___ftmul@f1,0,c
  6277  001E18  D007               	goto	l8717
  6278  001E1A  5020               	movf	___ftmul@f2,w,c
  6279  001E1C  2627               	addwf	___ftmul@f3_as_product,f,c
  6280  001E1E  5021               	movf	___ftmul@f2+1,w,c
  6281  001E20  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  6282  001E22  5022               	movf	___ftmul@f2+2,w,c
  6283  001E24  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  6284  001E26  D000               	goto	l8717
  6285  001E28                     l8717:
  6286  001E28  90D8               	bcf	status,0,c
  6287  001E2A  321F               	rrcf	___ftmul@f1+2,f,c
  6288  001E2C  321E               	rrcf	___ftmul@f1+1,f,c
  6289  001E2E  321D               	rrcf	___ftmul@f1,f,c
  6290  001E30  90D8               	bcf	status,0,c
  6291  001E32  3620               	rlcf	___ftmul@f2,f,c
  6292  001E34  3621               	rlcf	___ftmul@f2+1,f,c
  6293  001E36  3622               	rlcf	___ftmul@f2+2,f,c
  6294  001E38  2E2A               	decfsz	___ftmul@cntr,f,c
  6295  001E3A  D7ED               	goto	l8713
  6296  001E3C  D000               	goto	l8721
  6297  001E3E                     l8721:
  6298  001E3E  0E09               	movlw	9
  6299  001E40  6E2A               	movwf	___ftmul@cntr,c
  6300  001E42  D000               	goto	l8723
  6301  001E44                     l8723:
  6302  001E44  A01D               	btfss	___ftmul@f1,0,c
  6303  001E46  D007               	goto	l8727
  6304  001E48  5020               	movf	___ftmul@f2,w,c
  6305  001E4A  2627               	addwf	___ftmul@f3_as_product,f,c
  6306  001E4C  5021               	movf	___ftmul@f2+1,w,c
  6307  001E4E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  6308  001E50  5022               	movf	___ftmul@f2+2,w,c
  6309  001E52  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  6310  001E54  D000               	goto	l8727
  6311  001E56                     l8727:
  6312  001E56  90D8               	bcf	status,0,c
  6313  001E58  321F               	rrcf	___ftmul@f1+2,f,c
  6314  001E5A  321E               	rrcf	___ftmul@f1+1,f,c
  6315  001E5C  321D               	rrcf	___ftmul@f1,f,c
  6316  001E5E  90D8               	bcf	status,0,c
  6317  001E60  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  6318  001E62  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  6319  001E64  3227               	rrcf	___ftmul@f3_as_product,f,c
  6320  001E66  2E2A               	decfsz	___ftmul@cntr,f,c
  6321  001E68  D7ED               	goto	l8723
  6322  001E6A  D000               	goto	l8731
  6323  001E6C                     l8731:
  6324  001E6C  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  6325  001E70  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6326  001E74  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6327  001E78  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  6328  001E7C  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  6329  001E80  EC63  F012         	call	___ftpack	;wreg free
  6330  001E84  C011  F01D         	movff	?___ftpack,?___ftmul
  6331  001E88  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  6332  001E8C  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  6333  001E90  D000               	goto	l1888
  6334  001E92                     l1888:
  6335  001E92  0012               	return		;funcret
  6336  001E94                     __end_of___ftmul:
  6337                           	opt stack 0
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           postinc0	equ	0xFEE
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1l	equ	0xFE1
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function ___ftdiv *****************
  6349 ;; Defined at:
  6350 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  f1              3   43[COMRAM] float 
  6353 ;;  f2              3   46[COMRAM] float 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  f3              3   53[COMRAM] float 
  6356 ;;  sign            1   57[COMRAM] unsigned char 
  6357 ;;  exp             1   56[COMRAM] unsigned char 
  6358 ;;  cntr            1   52[COMRAM] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  3   43[COMRAM] float 
  6361 ;; Registers used:
  6362 ;;		wreg, status,2, status,0, cstack
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6368 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;Total ram usage:       15 bytes
  6373 ;; Hardware stack levels used:    1
  6374 ;; Hardware stack levels required when called:    4
  6375 ;; This function calls:
  6376 ;;		___ftpack
  6377 ;; This function is called by:
  6378 ;;		_do_update_pwm
  6379 ;;		_read_volt
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text26
  6384  00215E                     __ptext26:
  6385                           	opt stack 0
  6386  00215E                     ___ftdiv:
  6387                           	opt stack 25
  6388                           
  6389                           ;incstack = 0
  6390  00215E  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  6391  002162  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  6392  002164  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  6393  002166  342D               	rlcf	___ftdiv@f1+1,w,c
  6394  002168  3632               	rlcf	??___ftdiv& (0+255),f,c
  6395  00216A  E301               	bnc	u6341
  6396  00216C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  6397  00216E                     u6341:
  6398  00216E  5032               	movf	??___ftdiv,w,c
  6399  002170  6E39               	movwf	___ftdiv@exp,c
  6400  002172  5039               	movf	___ftdiv@exp,w,c
  6401  002174  A4D8               	btfss	status,2,c
  6402  002176  D002               	goto	l8647
  6403  002178  D00E               	goto	l8649
  6404  00217A  D061               	goto	l1873
  6405  00217C                     l8647:
  6406  00217C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  6407  002180  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  6408  002182  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  6409  002184  3430               	rlcf	___ftdiv@f2+1,w,c
  6410  002186  3632               	rlcf	??___ftdiv& (0+255),f,c
  6411  002188  E301               	bnc	u6361
  6412  00218A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  6413  00218C                     u6361:
  6414  00218C  5032               	movf	??___ftdiv,w,c
  6415  00218E  6E3A               	movwf	___ftdiv@sign,c
  6416  002190  503A               	movf	___ftdiv@sign,w,c
  6417  002192  A4D8               	btfss	status,2,c
  6418  002194  D007               	goto	l8653
  6419  002196                     l8649:
  6420  002196  0E00               	movlw	0
  6421  002198  6E2C               	movwf	?___ftdiv,c
  6422  00219A  0E00               	movlw	0
  6423  00219C  6E2D               	movwf	?___ftdiv+1,c
  6424  00219E  0E00               	movlw	0
  6425  0021A0  6E2E               	movwf	?___ftdiv+2,c
  6426  0021A2  D04D               	goto	l1873
  6427  0021A4                     l8653:
  6428  0021A4  0E00               	movlw	0
  6429  0021A6  6E36               	movwf	___ftdiv@f3,c
  6430  0021A8  0E00               	movlw	0
  6431  0021AA  6E37               	movwf	___ftdiv@f3+1,c
  6432  0021AC  0E00               	movlw	0
  6433  0021AE  6E38               	movwf	___ftdiv@f3+2,c
  6434  0021B0  503A               	movf	___ftdiv@sign,w,c
  6435  0021B2  0F89               	addlw	137
  6436  0021B4  5E39               	subwf	___ftdiv@exp,f,c
  6437  0021B6  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  6438  0021BA  5031               	movf	___ftdiv@f2+2,w,c
  6439  0021BC  1A3A               	xorwf	___ftdiv@sign,f,c
  6440  0021BE  0E80               	movlw	128
  6441  0021C0  163A               	andwf	___ftdiv@sign,f,c
  6442  0021C2  8E2D               	bsf	___ftdiv@f1+1,7,c
  6443  0021C4  0EFF               	movlw	255
  6444  0021C6  162C               	andwf	___ftdiv@f1,f,c
  6445  0021C8  0EFF               	movlw	255
  6446  0021CA  162D               	andwf	___ftdiv@f1+1,f,c
  6447  0021CC  0E00               	movlw	0
  6448  0021CE  162E               	andwf	___ftdiv@f1+2,f,c
  6449  0021D0  8E30               	bsf	___ftdiv@f2+1,7,c
  6450  0021D2  0EFF               	movlw	255
  6451  0021D4  162F               	andwf	___ftdiv@f2,f,c
  6452  0021D6  0EFF               	movlw	255
  6453  0021D8  1630               	andwf	___ftdiv@f2+1,f,c
  6454  0021DA  0E00               	movlw	0
  6455  0021DC  1631               	andwf	___ftdiv@f2+2,f,c
  6456  0021DE  0E18               	movlw	24
  6457  0021E0  6E35               	movwf	___ftdiv@cntr,c
  6458  0021E2  D000               	goto	l8673
  6459  0021E4                     l8673:
  6460  0021E4  90D8               	bcf	status,0,c
  6461  0021E6  3636               	rlcf	___ftdiv@f3,f,c
  6462  0021E8  3637               	rlcf	___ftdiv@f3+1,f,c
  6463  0021EA  3638               	rlcf	___ftdiv@f3+2,f,c
  6464  0021EC  502F               	movf	___ftdiv@f2,w,c
  6465  0021EE  5C2C               	subwf	___ftdiv@f1,w,c
  6466  0021F0  5030               	movf	___ftdiv@f2+1,w,c
  6467  0021F2  582D               	subwfb	___ftdiv@f1+1,w,c
  6468  0021F4  5031               	movf	___ftdiv@f2+2,w,c
  6469  0021F6  582E               	subwfb	___ftdiv@f1+2,w,c
  6470  0021F8  A0D8               	btfss	status,0,c
  6471  0021FA  D007               	goto	l1876
  6472  0021FC  502F               	movf	___ftdiv@f2,w,c
  6473  0021FE  5E2C               	subwf	___ftdiv@f1,f,c
  6474  002200  5030               	movf	___ftdiv@f2+1,w,c
  6475  002202  5A2D               	subwfb	___ftdiv@f1+1,f,c
  6476  002204  5031               	movf	___ftdiv@f2+2,w,c
  6477  002206  5A2E               	subwfb	___ftdiv@f1+2,f,c
  6478  002208  8036               	bsf	___ftdiv@f3,0,c
  6479  00220A                     l1876:
  6480  00220A  90D8               	bcf	status,0,c
  6481  00220C  362C               	rlcf	___ftdiv@f1,f,c
  6482  00220E  362D               	rlcf	___ftdiv@f1+1,f,c
  6483  002210  362E               	rlcf	___ftdiv@f1+2,f,c
  6484  002212  2E35               	decfsz	___ftdiv@cntr,f,c
  6485  002214  D7E7               	goto	l8673
  6486  002216  D000               	goto	l8683
  6487  002218                     l8683:
  6488  002218  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  6489  00221C  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6490  002220  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6491  002224  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  6492  002228  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  6493  00222C  EC63  F012         	call	___ftpack	;wreg free
  6494  002230  C011  F02C         	movff	?___ftpack,?___ftdiv
  6495  002234  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  6496  002238  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  6497  00223C  D000               	goto	l1873
  6498  00223E                     l1873:
  6499  00223E  0012               	return		;funcret
  6500  002240                     __end_of___ftdiv:
  6501                           	opt stack 0
  6502                           tblptru	equ	0xFF8
  6503                           tblptrh	equ	0xFF7
  6504                           tblptrl	equ	0xFF6
  6505                           tablat	equ	0xFF5
  6506                           postinc0	equ	0xFEE
  6507                           wreg	equ	0xFE8
  6508                           postdec1	equ	0xFE5
  6509                           fsr1l	equ	0xFE1
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function ___ftpack *****************
  6513 ;; Defined at:
  6514 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  arg             3   16[COMRAM] unsigned um
  6517 ;;  exp             1   19[COMRAM] unsigned char 
  6518 ;;  sign            1   20[COMRAM] unsigned char 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;		None
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  3   16[COMRAM] float 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6530 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;Total ram usage:        8 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    3
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		___awtoft
  6541 ;;		___ftdiv
  6542 ;;		___ftmul
  6543 ;;		___lbtoft
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text27
  6548  0024C6                     __ptext27:
  6549                           	opt stack 0
  6550  0024C6                     ___ftpack:
  6551                           	opt stack 25
  6552                           
  6553                           ;incstack = 0
  6554  0024C6  5014               	movf	___ftpack@exp,w,c
  6555  0024C8  B4D8               	btfsc	status,2,c
  6556  0024CA  D005               	goto	l8227
  6557  0024CC  5011               	movf	___ftpack@arg,w,c
  6558  0024CE  1012               	iorwf	___ftpack@arg+1,w,c
  6559  0024D0  1013               	iorwf	___ftpack@arg+2,w,c
  6560  0024D2  A4D8               	btfss	status,2,c
  6561  0024D4  D00E               	goto	l8233
  6562  0024D6                     l8227:
  6563  0024D6  0E00               	movlw	0
  6564  0024D8  6E11               	movwf	?___ftpack,c
  6565  0024DA  0E00               	movlw	0
  6566  0024DC  6E12               	movwf	?___ftpack+1,c
  6567  0024DE  0E00               	movlw	0
  6568  0024E0  6E13               	movwf	?___ftpack+2,c
  6569  0024E2  D053               	goto	l1801
  6570  0024E4  D006               	goto	l8233
  6571  0024E6                     l8231:
  6572  0024E6  2A14               	incf	___ftpack@exp,f,c
  6573  0024E8  90D8               	bcf	status,0,c
  6574  0024EA  3213               	rrcf	___ftpack@arg+2,f,c
  6575  0024EC  3212               	rrcf	___ftpack@arg+1,f,c
  6576  0024EE  3211               	rrcf	___ftpack@arg,f,c
  6577  0024F0  D000               	goto	l8233
  6578  0024F2                     l8233:
  6579  0024F2  0E00               	movlw	0
  6580  0024F4  1411               	andwf	___ftpack@arg,w,c
  6581  0024F6  6E16               	movwf	??___ftpack& (0+255),c
  6582  0024F8  0E00               	movlw	0
  6583  0024FA  1412               	andwf	___ftpack@arg+1,w,c
  6584  0024FC  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6585  0024FE  0EFE               	movlw	254
  6586  002500  1413               	andwf	___ftpack@arg+2,w,c
  6587  002502  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6588  002504  5016               	movf	??___ftpack,w,c
  6589  002506  1017               	iorwf	??___ftpack+1,w,c
  6590  002508  1018               	iorwf	??___ftpack+2,w,c
  6591  00250A  B4D8               	btfsc	status,2,c
  6592  00250C  D00E               	goto	l8239
  6593  00250E  D7EB               	goto	l8231
  6594  002510  D00C               	goto	l8239
  6595  002512                     l8235:
  6596  002512  2A14               	incf	___ftpack@exp,f,c
  6597  002514  0E01               	movlw	1
  6598  002516  2611               	addwf	___ftpack@arg,f,c
  6599  002518  0E00               	movlw	0
  6600  00251A  2212               	addwfc	___ftpack@arg+1,f,c
  6601  00251C  0E00               	movlw	0
  6602  00251E  2213               	addwfc	___ftpack@arg+2,f,c
  6603  002520  90D8               	bcf	status,0,c
  6604  002522  3213               	rrcf	___ftpack@arg+2,f,c
  6605  002524  3212               	rrcf	___ftpack@arg+1,f,c
  6606  002526  3211               	rrcf	___ftpack@arg,f,c
  6607  002528  D000               	goto	l8239
  6608  00252A                     l8239:
  6609  00252A  0E00               	movlw	0
  6610  00252C  1411               	andwf	___ftpack@arg,w,c
  6611  00252E  6E16               	movwf	??___ftpack& (0+255),c
  6612  002530  0E00               	movlw	0
  6613  002532  1412               	andwf	___ftpack@arg+1,w,c
  6614  002534  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6615  002536  0EFF               	movlw	255
  6616  002538  1413               	andwf	___ftpack@arg+2,w,c
  6617  00253A  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6618  00253C  5016               	movf	??___ftpack,w,c
  6619  00253E  1017               	iorwf	??___ftpack+1,w,c
  6620  002540  1018               	iorwf	??___ftpack+2,w,c
  6621  002542  B4D8               	btfsc	status,2,c
  6622  002544  D008               	goto	l8243
  6623  002546  D7E5               	goto	l8235
  6624  002548  D006               	goto	l8243
  6625  00254A                     l8241:
  6626  00254A  0614               	decf	___ftpack@exp,f,c
  6627  00254C  90D8               	bcf	status,0,c
  6628  00254E  3611               	rlcf	___ftpack@arg,f,c
  6629  002550  3612               	rlcf	___ftpack@arg+1,f,c
  6630  002552  3613               	rlcf	___ftpack@arg+2,f,c
  6631  002554  D000               	goto	l8243
  6632  002556                     l8243:
  6633  002556  BE12               	btfsc	___ftpack@arg+1,7,c
  6634  002558  D004               	goto	l1812
  6635  00255A  0E02               	movlw	2
  6636  00255C  6014               	cpfslt	___ftpack@exp,c
  6637  00255E  D7F5               	goto	l8241
  6638  002560  D000               	goto	l1812
  6639  002562                     l1812:
  6640  002562  B014               	btfsc	___ftpack@exp,0,c
  6641  002564  D002               	goto	l8249
  6642  002566  9E12               	bcf	___ftpack@arg+1,7,c
  6643  002568  D000               	goto	l8249
  6644  00256A                     l8249:
  6645  00256A  90D8               	bcf	status,0,c
  6646  00256C  3214               	rrcf	___ftpack@exp,f,c
  6647  00256E  5014               	movf	___ftpack@exp,w,c
  6648  002570  1213               	iorwf	___ftpack@arg+2,f,c
  6649  002572  5015               	movf	___ftpack@sign,w,c
  6650  002574  B4D8               	btfsc	status,2,c
  6651  002576  D002               	goto	l8255
  6652  002578  8E13               	bsf	___ftpack@arg+2,7,c
  6653  00257A  D000               	goto	l8255
  6654  00257C                     l8255:
  6655  00257C  C011  F011         	movff	___ftpack@arg,?___ftpack
  6656  002580  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  6657  002584  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  6658  002588  D000               	goto	l1801
  6659  00258A                     l1801:
  6660  00258A  0012               	return		;funcret
  6661  00258C                     __end_of___ftpack:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1l	equ	0xFE1
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _Do_Setup_Time *****************
  6674 ;; Defined at:
  6675 ;;		line 33 in file "Setup_Time.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  2  383[None  ] int 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;Total ram usage:        0 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:   12
  6696 ;; This function calls:
  6697 ;;		_DS3231_Read_Time
  6698 ;;		_Decrease_Time
  6699 ;;		_Do_Beep_Bad
  6700 ;;		_Do_Beep_Good
  6701 ;;		_Do_Save_New_Time
  6702 ;;		_Exit_Time_Setup
  6703 ;;		_Go_Next_Field
  6704 ;;		_Go_Prev_Field
  6705 ;;		_Increase_Time
  6706 ;;		_Initialize_Setup_Time_Screen
  6707 ;;		_Update_Setup_Time_Screen
  6708 ;;		_bcd_2_dec
  6709 ;;		_check_for_button_input
  6710 ;; This function is called by:
  6711 ;;		_main
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text28
  6716  0023FC                     __ptext28:
  6717                           	opt stack 0
  6718  0023FC                     _Do_Setup_Time:
  6719                           	opt stack 18
  6720                           
  6721                           ;Setup_Time.c: 36: Select_Field = 0;
  6722                           
  6723                           ;incstack = 0
  6724  0023FC  0E00               	movlw	0
  6725  0023FE  6E53               	movwf	_Select_Field,c
  6726                           
  6727                           ;Setup_Time.c: 38: DS3231_Read_Time();
  6728  002400  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  6729                           
  6730                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  6731  002404  5063               	movf	_second,w,c
  6732  002406  EC53  F01C         	call	_bcd_2_dec
  6733  00240A  6E6C               	movwf	_setup_second,c
  6734                           
  6735                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6736  00240C  5060               	movf	_minute,w,c
  6737  00240E  EC53  F01C         	call	_bcd_2_dec
  6738  002412  6E6A               	movwf	_setup_minute,c
  6739                           
  6740                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6741  002414  505F               	movf	_hour,w,c
  6742  002416  EC53  F01C         	call	_bcd_2_dec
  6743  00241A  6E69               	movwf	_setup_hour,c
  6744                           
  6745                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6746  00241C  505B               	movf	_day,w,c
  6747  00241E  EC53  F01C         	call	_bcd_2_dec
  6748  002422  6E67               	movwf	_setup_day,c
  6749                           
  6750                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6751  002424  5061               	movf	_month,w,c
  6752  002426  EC53  F01C         	call	_bcd_2_dec
  6753  00242A  6E6B               	movwf	_setup_month,c
  6754                           
  6755                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6756  00242C  506E               	movf	_year,w,c
  6757  00242E  EC53  F01C         	call	_bcd_2_dec
  6758  002432  6E6D               	movwf	_setup_year,c
  6759                           
  6760                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6761  002434  EC40  F00D         	call	_Initialize_Setup_Time_Screen	;wreg free
  6762                           
  6763                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6764  002438  EC05  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6765                           
  6766                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6767  00243C  0E01               	movlw	1
  6768  00243E  0100               	movlb	0	; () banked
  6769  002440  6FF9               	movwf	_In_Time_Setup& (0+255),b
  6770                           
  6771                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6772  002442  D03C               	goto	l9799
  6773  002444                     l9763:
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;Setup_Time.c: 51: {
  6777                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6778  002444  ECAA  F015         	call	_check_for_button_input	;wreg free
  6779  002448  06E8               	decf	wreg,f,c
  6780  00244A  A4D8               	btfss	status,2,c
  6781  00244C  D037               	goto	l9799
  6782                           
  6783                           ;Setup_Time.c: 53: {
  6784                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  6785  00244E  0E02               	movlw	2
  6786  002450  645E               	cpfsgt	_found,c
  6787  002452  D031               	goto	l9797
  6788  002454  0E09               	movlw	9
  6789  002456  605E               	cpfslt	_found,c
  6790  002458  D02E               	goto	l9797
  6791                           
  6792                           ;Setup_Time.c: 56: {
  6793                           ;Setup_Time.c: 57: Do_Beep_Good();
  6794  00245A  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  6795                           
  6796                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  6797  00245E  0E03               	movlw	3
  6798  002460  185E               	xorwf	_found,w,c
  6799  002462  A4D8               	btfss	status,2,c
  6800  002464  D003               	goto	l9775
  6801  002466  EC31  F01D         	call	_Go_Prev_Field	;wreg free
  6802  00246A  D000               	goto	l9775
  6803  00246C                     l9775:
  6804                           
  6805                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  6806  00246C  0E04               	movlw	4
  6807  00246E  185E               	xorwf	_found,w,c
  6808  002470  A4D8               	btfss	status,2,c
  6809  002472  D003               	goto	l9779
  6810  002474  EC3D  F01D         	call	_Go_Next_Field	;wreg free
  6811  002478  D000               	goto	l9779
  6812  00247A                     l9779:
  6813                           
  6814                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  6815  00247A  0E05               	movlw	5
  6816  00247C  185E               	xorwf	_found,w,c
  6817  00247E  A4D8               	btfss	status,2,c
  6818  002480  D003               	goto	l9783
  6819  002482  EC78  F01D         	call	_Do_Save_New_Time	;wreg free
  6820  002486  D000               	goto	l9783
  6821  002488                     l9783:
  6822                           
  6823                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  6824  002488  0E06               	movlw	6
  6825  00248A  185E               	xorwf	_found,w,c
  6826  00248C  A4D8               	btfss	status,2,c
  6827  00248E  D003               	goto	l9787
  6828  002490  EC62  F015         	call	_Decrease_Time	;wreg free
  6829  002494  D000               	goto	l9787
  6830  002496                     l9787:
  6831                           
  6832                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  6833  002496  0E07               	movlw	7
  6834  002498  185E               	xorwf	_found,w,c
  6835  00249A  A4D8               	btfss	status,2,c
  6836  00249C  D003               	goto	l9791
  6837  00249E  EC7E  F016         	call	_Increase_Time	;wreg free
  6838  0024A2  D000               	goto	l9791
  6839  0024A4                     l9791:
  6840                           
  6841                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  6842  0024A4  0E08               	movlw	8
  6843  0024A6  185E               	xorwf	_found,w,c
  6844  0024A8  A4D8               	btfss	status,2,c
  6845  0024AA  D003               	goto	l9795
  6846  0024AC  EC04  F01E         	call	_Exit_Time_Setup	;wreg free
  6847  0024B0  D000               	goto	l9795
  6848  0024B2                     l9795:
  6849                           
  6850                           ;Setup_Time.c: 64: found = 0xff;
  6851  0024B2  685E               	setf	_found,c
  6852                           
  6853                           ;Setup_Time.c: 65: }
  6854  0024B4  D003               	goto	l9799
  6855  0024B6                     l9797:
  6856                           
  6857                           ;Setup_Time.c: 66: else
  6858                           ;Setup_Time.c: 67: {
  6859                           ;Setup_Time.c: 68: Do_Beep_Bad();
  6860  0024B6  EC33  F01E         	call	_Do_Beep_Bad	;wreg free
  6861  0024BA  D000               	goto	l9799
  6862  0024BC                     l9799:
  6863  0024BC  0100               	movlb	0	; () banked
  6864  0024BE  05F9               	decf	_In_Time_Setup& (0+255),w,b
  6865  0024C0  B4D8               	btfsc	status,2,c
  6866  0024C2  D7C0               	goto	l9763
  6867                           
  6868                           ; BSR set to: 0
  6869                           
  6870                           ; BSR set to: 0
  6871  0024C4  0012               	return		;funcret
  6872  0024C6                     __end_of_Do_Setup_Time:
  6873                           	opt stack 0
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           postinc0	equ	0xFEE
  6879                           wreg	equ	0xFE8
  6880                           postdec1	equ	0xFE5
  6881                           fsr1l	equ	0xFE1
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6885 ;; Defined at:
  6886 ;;		line 172 in file "Setup_Time.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;		None
  6891 ;; Return value:  Size  Location     Type
  6892 ;;		None               void
  6893 ;; Registers used:
  6894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:        0 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:   10
  6907 ;; This function calls:
  6908 ;;		_drawtext
  6909 ;;		_fillRect
  6910 ;;		_fillScreen
  6911 ;;		_strcpy
  6912 ;; This function is called by:
  6913 ;;		_Do_Setup_Time
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text29
  6918  001A80                     __ptext29:
  6919                           	opt stack 0
  6920  001A80                     _Initialize_Setup_Time_Screen:
  6921                           	opt stack 19
  6922                           
  6923                           ;Setup_Time.c: 174: fillScreen(0x0000);
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;incstack = 0
  6927  001A80  0E00               	movlw	0
  6928  001A82  6E25               	movwf	fillScreen@color+1,c
  6929  001A84  0E00               	movlw	0
  6930  001A86  6E24               	movwf	fillScreen@color,c
  6931  001A88  EC16  F01D         	call	_fillScreen	;wreg free
  6932                           
  6933                           ;Setup_Time.c: 176: strcpy(txt, "ECE3301L F;21 Final\0");
  6934  001A8C  C04B  F011         	movff	_txt,strcpy@to
  6935  001A90  C04C  F012         	movff	_txt+1,strcpy@to+1
  6936  001A94  0EEC               	movlw	low STR_32
  6937  001A96  6E13               	movwf	strcpy@from,c
  6938  001A98  0EFE               	movlw	high STR_32
  6939  001A9A  6E14               	movwf	strcpy@from+1,c
  6940  001A9C  ECF4  F01B         	call	_strcpy	;wreg free
  6941                           
  6942                           ;Setup_Time.c: 177: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6943  001AA0  0E01               	movlw	1
  6944  001AA2  6E39               	movwf	drawtext@y,c
  6945  001AA4  C04B  F03A         	movff	_txt,drawtext@_text
  6946  001AA8  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  6947  001AAC  0EFF               	movlw	255
  6948  001AAE  6E3D               	movwf	drawtext@color+1,c
  6949  001AB0  683C               	setf	drawtext@color,c
  6950  001AB2  0E00               	movlw	0
  6951  001AB4  6E3F               	movwf	drawtext@bg+1,c
  6952  001AB6  0E00               	movlw	0
  6953  001AB8  6E3E               	movwf	drawtext@bg,c
  6954  001ABA  0E01               	movlw	1
  6955  001ABC  6E40               	movwf	drawtext@size,c
  6956  001ABE  0E01               	movlw	1
  6957  001AC0  EC2B  F00C         	call	_drawtext
  6958                           
  6959                           ;Setup_Time.c: 180: strcpy(txt, "Time Setup\0");
  6960  001AC4  C04B  F011         	movff	_txt,strcpy@to
  6961  001AC8  C04C  F012         	movff	_txt+1,strcpy@to+1
  6962  001ACC  0E89               	movlw	low STR_33
  6963  001ACE  6E13               	movwf	strcpy@from,c
  6964  001AD0  0EFF               	movlw	high STR_33
  6965  001AD2  6E14               	movwf	strcpy@from+1,c
  6966  001AD4  ECF4  F01B         	call	_strcpy	;wreg free
  6967                           
  6968                           ;Setup_Time.c: 181: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6969  001AD8  0E10               	movlw	16
  6970  001ADA  6E39               	movwf	drawtext@y,c
  6971  001ADC  C04B  F03A         	movff	_txt,drawtext@_text
  6972  001AE0  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  6973  001AE4  0EF8               	movlw	248
  6974  001AE6  6E3D               	movwf	drawtext@color+1,c
  6975  001AE8  0E1F               	movlw	31
  6976  001AEA  6E3C               	movwf	drawtext@color,c
  6977  001AEC  0E00               	movlw	0
  6978  001AEE  6E3F               	movwf	drawtext@bg+1,c
  6979  001AF0  0E00               	movlw	0
  6980  001AF2  6E3E               	movwf	drawtext@bg,c
  6981  001AF4  0E02               	movlw	2
  6982  001AF6  6E40               	movwf	drawtext@size,c
  6983  001AF8  0E04               	movlw	4
  6984  001AFA  EC2B  F00C         	call	_drawtext
  6985                           
  6986                           ;Setup_Time.c: 183: strcpy(txt, "Time");
  6987  001AFE  C04B  F011         	movff	_txt,strcpy@to
  6988  001B02  C04C  F012         	movff	_txt+1,strcpy@to+1
  6989  001B06  0EB1               	movlw	low (STR_11+6)
  6990  001B08  6E13               	movwf	strcpy@from,c
  6991  001B0A  0EFF               	movlw	high (STR_11+6)
  6992  001B0C  6E14               	movwf	strcpy@from+1,c
  6993  001B0E  ECF4  F01B         	call	_strcpy	;wreg free
  6994                           
  6995                           ;Setup_Time.c: 184: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6996  001B12  0E28               	movlw	40
  6997  001B14  6E39               	movwf	drawtext@y,c
  6998  001B16  C04B  F03A         	movff	_txt,drawtext@_text
  6999  001B1A  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  7000  001B1E  0E00               	movlw	0
  7001  001B20  6E3D               	movwf	drawtext@color+1,c
  7002  001B22  0E1F               	movlw	31
  7003  001B24  6E3C               	movwf	drawtext@color,c
  7004  001B26  0E00               	movlw	0
  7005  001B28  6E3F               	movwf	drawtext@bg+1,c
  7006  001B2A  0E00               	movlw	0
  7007  001B2C  6E3E               	movwf	drawtext@bg,c
  7008  001B2E  0E01               	movlw	1
  7009  001B30  6E40               	movwf	drawtext@size,c
  7010  001B32  0E32               	movlw	50
  7011  001B34  EC2B  F00C         	call	_drawtext
  7012                           
  7013                           ;Setup_Time.c: 186: fillRect(15-1, 52+16, 25,2,0x07FF);
  7014  001B38  0E44               	movlw	68
  7015  001B3A  6E23               	movwf	fillRect@y,c
  7016  001B3C  0E19               	movlw	25
  7017  001B3E  6E24               	movwf	fillRect@w,c
  7018  001B40  0E02               	movlw	2
  7019  001B42  6E25               	movwf	fillRect@h,c
  7020  001B44  0E07               	movlw	7
  7021  001B46  6E27               	movwf	fillRect@color+1,c
  7022  001B48  6826               	setf	fillRect@color,c
  7023  001B4A  0E0E               	movlw	14
  7024  001B4C  EC80  F01A         	call	_fillRect
  7025                           
  7026                           ;Setup_Time.c: 187: strcpy(txt, "Date");
  7027  001B50  C04B  F011         	movff	_txt,strcpy@to
  7028  001B54  C04C  F012         	movff	_txt+1,strcpy@to+1
  7029  001B58  0EE0               	movlw	low STR_10
  7030  001B5A  6E13               	movwf	strcpy@from,c
  7031  001B5C  0EFF               	movlw	high STR_10
  7032  001B5E  6E14               	movwf	strcpy@from+1,c
  7033  001B60  ECF4  F01B         	call	_strcpy	;wreg free
  7034                           
  7035                           ;Setup_Time.c: 188: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7036  001B64  0E47               	movlw	71
  7037  001B66  6E39               	movwf	drawtext@y,c
  7038  001B68  C04B  F03A         	movff	_txt,drawtext@_text
  7039  001B6C  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  7040  001B70  0EF8               	movlw	248
  7041  001B72  6E3D               	movwf	drawtext@color+1,c
  7042  001B74  0E00               	movlw	0
  7043  001B76  6E3C               	movwf	drawtext@color,c
  7044  001B78  0E00               	movlw	0
  7045  001B7A  6E3F               	movwf	drawtext@bg+1,c
  7046  001B7C  0E00               	movlw	0
  7047  001B7E  6E3E               	movwf	drawtext@bg,c
  7048  001B80  0E01               	movlw	1
  7049  001B82  6E40               	movwf	drawtext@size,c
  7050  001B84  0E32               	movlw	50
  7051  001B86  EC2B  F00C         	call	_drawtext
  7052  001B8A  0012               	return		;funcret
  7053  001B8C                     __end_of_Initialize_Setup_Time_Screen:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           postinc0	equ	0xFEE
  7060                           wreg	equ	0xFE8
  7061                           postdec1	equ	0xFE5
  7062                           fsr1l	equ	0xFE1
  7063                           status	equ	0xFD8
  7064                           
  7065 ;; *************** function _Increase_Time *****************
  7066 ;; Defined at:
  7067 ;;		line 74 in file "Setup_Time.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;		None
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;		None               void
  7074 ;; Registers used:
  7075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 0/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;Total ram usage:        0 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:   11
  7088 ;; This function calls:
  7089 ;;		_Update_Setup_Time_Screen
  7090 ;; This function is called by:
  7091 ;;		_Do_Setup_Time
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text30
  7096  002CFC                     __ptext30:
  7097                           	opt stack 0
  7098  002CFC                     _Increase_Time:
  7099                           	opt stack 18
  7100                           
  7101                           ;Setup_Time.c: 76: switch (Select_Field)
  7102                           
  7103                           ;incstack = 0
  7104  002CFC  D02A               	goto	l9471
  7105  002CFE                     l9433:
  7106                           
  7107                           ;Setup_Time.c: 79: setup_hour++;
  7108  002CFE  2A69               	incf	_setup_hour,f,c
  7109                           
  7110                           ;Setup_Time.c: 80: if (setup_hour > 23) setup_hour = 0;
  7111  002D00  0E17               	movlw	23
  7112  002D02  6469               	cpfsgt	_setup_hour,c
  7113  002D04  D03A               	goto	l9473
  7114  002D06  0E00               	movlw	0
  7115  002D08  6E69               	movwf	_setup_hour,c
  7116                           
  7117                           ;Setup_Time.c: 81: break;
  7118  002D0A  D037               	goto	l9473
  7119  002D0C                     l9439:
  7120                           
  7121                           ;Setup_Time.c: 83: setup_minute++;
  7122  002D0C  2A6A               	incf	_setup_minute,f,c
  7123                           
  7124                           ;Setup_Time.c: 84: if (setup_minute > 59) setup_minute = 0;
  7125  002D0E  0E3B               	movlw	59
  7126  002D10  646A               	cpfsgt	_setup_minute,c
  7127  002D12  D033               	goto	l9473
  7128  002D14  0E00               	movlw	0
  7129  002D16  6E6A               	movwf	_setup_minute,c
  7130                           
  7131                           ;Setup_Time.c: 85: break;
  7132  002D18  D030               	goto	l9473
  7133  002D1A                     l9445:
  7134                           
  7135                           ;Setup_Time.c: 87: setup_second++;
  7136  002D1A  2A6C               	incf	_setup_second,f,c
  7137                           
  7138                           ;Setup_Time.c: 88: if (setup_second > 59) setup_second = 0;
  7139  002D1C  0E3B               	movlw	59
  7140  002D1E  646C               	cpfsgt	_setup_second,c
  7141  002D20  D02C               	goto	l9473
  7142  002D22  0E00               	movlw	0
  7143  002D24  6E6C               	movwf	_setup_second,c
  7144                           
  7145                           ;Setup_Time.c: 89: break;
  7146  002D26  D029               	goto	l9473
  7147  002D28                     l9451:
  7148                           
  7149                           ;Setup_Time.c: 91: setup_month++;
  7150  002D28  2A6B               	incf	_setup_month,f,c
  7151                           
  7152                           ;Setup_Time.c: 92: if (setup_month > 12) setup_month = 1;
  7153  002D2A  0E0C               	movlw	12
  7154  002D2C  646B               	cpfsgt	_setup_month,c
  7155  002D2E  D025               	goto	l9473
  7156  002D30  0E01               	movlw	1
  7157  002D32  6E6B               	movwf	_setup_month,c
  7158                           
  7159                           ;Setup_Time.c: 93: break;
  7160  002D34  D022               	goto	l9473
  7161  002D36                     l9457:
  7162                           
  7163                           ;Setup_Time.c: 95: setup_day++;
  7164  002D36  2A67               	incf	_setup_day,f,c
  7165                           
  7166                           ;Setup_Time.c: 96: if (setup_day > 30) setup_day = 1;
  7167  002D38  0E1E               	movlw	30
  7168  002D3A  6467               	cpfsgt	_setup_day,c
  7169  002D3C  D01E               	goto	l9473
  7170  002D3E  0E01               	movlw	1
  7171  002D40  6E67               	movwf	_setup_day,c
  7172                           
  7173                           ;Setup_Time.c: 97: break;
  7174  002D42  D01B               	goto	l9473
  7175  002D44                     l9463:
  7176                           
  7177                           ;Setup_Time.c: 99: setup_year++;
  7178  002D44  2A6D               	incf	_setup_year,f,c
  7179                           
  7180                           ;Setup_Time.c: 100: if (setup_year > 98) setup_year = 0;
  7181  002D46  0E62               	movlw	98
  7182  002D48  646D               	cpfsgt	_setup_year,c
  7183  002D4A  D017               	goto	l9473
  7184  002D4C  0E00               	movlw	0
  7185  002D4E  6E6D               	movwf	_setup_year,c
  7186                           
  7187                           ;Setup_Time.c: 104: }
  7188                           
  7189                           ;Setup_Time.c: 103: break;
  7190                           
  7191                           ;Setup_Time.c: 102: default:
  7192                           
  7193                           ;Setup_Time.c: 101: break;
  7194  002D50  D014               	goto	l9473
  7195  002D52                     l9471:
  7196  002D52  5053               	movf	_Select_Field,w,c
  7197                           
  7198                           ; Switch size 1, requested type "space"
  7199                           ; Number of cases is 6, Range of values is 0 to 5
  7200                           ; switch strategies available:
  7201                           ; Name         Instructions Cycles
  7202                           ; simple_byte           19    10 (average)
  7203                           ;	Chosen strategy is simple_byte
  7204  002D54  0A00               	xorlw	0	; case 0
  7205  002D56  B4D8               	btfsc	status,2,c
  7206  002D58  D7D2               	goto	l9433
  7207  002D5A  0A01               	xorlw	1	; case 1
  7208  002D5C  B4D8               	btfsc	status,2,c
  7209  002D5E  D7D6               	goto	l9439
  7210  002D60  0A03               	xorlw	3	; case 2
  7211  002D62  B4D8               	btfsc	status,2,c
  7212  002D64  D7DA               	goto	l9445
  7213  002D66  0A01               	xorlw	1	; case 3
  7214  002D68  B4D8               	btfsc	status,2,c
  7215  002D6A  D7DE               	goto	l9451
  7216  002D6C  0A07               	xorlw	7	; case 4
  7217  002D6E  B4D8               	btfsc	status,2,c
  7218  002D70  D7E2               	goto	l9457
  7219  002D72  0A01               	xorlw	1	; case 5
  7220  002D74  B4D8               	btfsc	status,2,c
  7221  002D76  D7E6               	goto	l9463
  7222  002D78  D000               	goto	l9473
  7223  002D7A                     l9473:
  7224                           
  7225                           ;Setup_Time.c: 105: Update_Setup_Time_Screen();
  7226  002D7A  EC05  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7227  002D7E  0012               	return		;funcret
  7228  002D80                     __end_of_Increase_Time:
  7229                           	opt stack 0
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           postinc0	equ	0xFEE
  7235                           wreg	equ	0xFE8
  7236                           postdec1	equ	0xFE5
  7237                           fsr1l	equ	0xFE1
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _Go_Prev_Field *****************
  7241 ;; Defined at:
  7242 ;;		line 151 in file "Setup_Time.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;		None               void
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;Total ram usage:        0 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    9
  7263 ;; This function calls:
  7264 ;;		_Update_Setup_Screen_Cursor_Backward
  7265 ;; This function is called by:
  7266 ;;		_Do_Setup_Time
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text31
  7271  003A62                     __ptext31:
  7272                           	opt stack 0
  7273  003A62                     _Go_Prev_Field:
  7274                           	opt stack 20
  7275                           
  7276                           ;Setup_Time.c: 153: if (Select_Field == 0) Select_Field = 5;
  7277                           
  7278                           ;incstack = 0
  7279  003A62  5053               	movf	_Select_Field,w,c
  7280  003A64  A4D8               	btfss	status,2,c
  7281  003A66  D003               	goto	l9369
  7282  003A68  0E05               	movlw	5
  7283  003A6A  6E53               	movwf	_Select_Field,c
  7284  003A6C  D002               	goto	l9371
  7285  003A6E                     l9369:
  7286                           
  7287                           ;Setup_Time.c: 154: else Select_Field--;
  7288  003A6E  0653               	decf	_Select_Field,f,c
  7289  003A70  D000               	goto	l9371
  7290  003A72                     l9371:
  7291                           
  7292                           ;Setup_Time.c: 155: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7293  003A72  5053               	movf	_Select_Field,w,c
  7294  003A74  EC54  F008         	call	_Update_Setup_Screen_Cursor_Backward
  7295  003A78  0012               	return		;funcret
  7296  003A7A                     __end_of_Go_Prev_Field:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           postinc0	equ	0xFEE
  7303                           wreg	equ	0xFE8
  7304                           postdec1	equ	0xFE5
  7305                           fsr1l	equ	0xFE1
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _Go_Next_Field *****************
  7309 ;; Defined at:
  7310 ;;		line 142 in file "Setup_Time.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;		None               void
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        0 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    9
  7331 ;; This function calls:
  7332 ;;		_Update_Setup_Screen_Cursor_Forward
  7333 ;; This function is called by:
  7334 ;;		_Do_Setup_Time
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text32
  7339  003A7A                     __ptext32:
  7340                           	opt stack 0
  7341  003A7A                     _Go_Next_Field:
  7342                           	opt stack 20
  7343                           
  7344                           ;Setup_Time.c: 145: Select_Field++;
  7345                           
  7346                           ;incstack = 0
  7347  003A7A  2A53               	incf	_Select_Field,f,c
  7348                           
  7349                           ;Setup_Time.c: 146: if (Select_Field == 6) Select_Field = 0;
  7350  003A7C  0E06               	movlw	6
  7351  003A7E  1853               	xorwf	_Select_Field,w,c
  7352  003A80  A4D8               	btfss	status,2,c
  7353  003A82  D003               	goto	l9379
  7354  003A84  0E00               	movlw	0
  7355  003A86  6E53               	movwf	_Select_Field,c
  7356  003A88  D000               	goto	l9379
  7357  003A8A                     l9379:
  7358                           
  7359                           ;Setup_Time.c: 147: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7360  003A8A  5053               	movf	_Select_Field,w,c
  7361  003A8C  EC77  F007         	call	_Update_Setup_Screen_Cursor_Forward
  7362  003A90  0012               	return		;funcret
  7363  003A92                     __end_of_Go_Next_Field:
  7364                           	opt stack 0
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           postinc0	equ	0xFEE
  7370                           wreg	equ	0xFE8
  7371                           postdec1	equ	0xFE5
  7372                           fsr1l	equ	0xFE1
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _Exit_Time_Setup *****************
  7376 ;; Defined at:
  7377 ;;		line 166 in file "Setup_Time.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;		None               void
  7384 ;; Registers used:
  7385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;Total ram usage:        0 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:   11
  7398 ;; This function calls:
  7399 ;;		_DS3231_Read_Time
  7400 ;;		_Initialize_Screen
  7401 ;; This function is called by:
  7402 ;;		_Do_Setup_Time
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	text33
  7407  003C08                     __ptext33:
  7408                           	opt stack 0
  7409  003C08                     _Exit_Time_Setup:
  7410                           	opt stack 18
  7411                           
  7412                           ;Setup_Time.c: 168: DS3231_Read_Time();
  7413                           
  7414                           ;incstack = 0
  7415  003C08  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  7416                           
  7417                           ;Setup_Time.c: 169: Initialize_Screen();
  7418  003C0C  EC1E  F003         	call	_Initialize_Screen	;wreg free
  7419                           
  7420                           ;Setup_Time.c: 170: In_Time_Setup = 0;
  7421  003C10  0E00               	movlw	0
  7422  003C12  0100               	movlb	0	; () banked
  7423  003C14  6FF9               	movwf	_In_Time_Setup& (0+255),b
  7424                           
  7425                           ; BSR set to: 0
  7426  003C16  0012               	return		;funcret
  7427  003C18                     __end_of_Exit_Time_Setup:
  7428                           	opt stack 0
  7429                           tblptru	equ	0xFF8
  7430                           tblptrh	equ	0xFF7
  7431                           tblptrl	equ	0xFF6
  7432                           tablat	equ	0xFF5
  7433                           postinc0	equ	0xFEE
  7434                           wreg	equ	0xFE8
  7435                           postdec1	equ	0xFE5
  7436                           fsr1l	equ	0xFE1
  7437                           status	equ	0xFD8
  7438                           
  7439 ;; *************** function _Do_Save_New_Time *****************
  7440 ;; Defined at:
  7441 ;;		line 158 in file "Setup_Time.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;		None
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;		None
  7446 ;; Return value:  Size  Location     Type
  7447 ;;		None               void
  7448 ;; Registers used:
  7449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;Total ram usage:        0 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:   11
  7462 ;; This function calls:
  7463 ;;		_DS3231_Read_Time
  7464 ;;		_DS3231_Write_Time
  7465 ;;		_Initialize_Screen
  7466 ;; This function is called by:
  7467 ;;		_Do_Setup_Time
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	text34
  7472  003AF0                     __ptext34:
  7473                           	opt stack 0
  7474  003AF0                     _Do_Save_New_Time:
  7475                           	opt stack 18
  7476                           
  7477                           ;Setup_Time.c: 160: DS3231_Write_Time();
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;incstack = 0
  7481  003AF0  EC33  F014         	call	_DS3231_Write_Time	;wreg free
  7482                           
  7483                           ;Setup_Time.c: 161: DS3231_Read_Time();
  7484  003AF4  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  7485                           
  7486                           ;Setup_Time.c: 162: Initialize_Screen();
  7487  003AF8  EC1E  F003         	call	_Initialize_Screen	;wreg free
  7488                           
  7489                           ;Setup_Time.c: 163: In_Time_Setup = 0;
  7490  003AFC  0E00               	movlw	0
  7491  003AFE  0100               	movlb	0	; () banked
  7492  003B00  6FF9               	movwf	_In_Time_Setup& (0+255),b
  7493                           
  7494                           ; BSR set to: 0
  7495  003B02  0012               	return		;funcret
  7496  003B04                     __end_of_Do_Save_New_Time:
  7497                           	opt stack 0
  7498                           tblptru	equ	0xFF8
  7499                           tblptrh	equ	0xFF7
  7500                           tblptrl	equ	0xFF6
  7501                           tablat	equ	0xFF5
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           postdec1	equ	0xFE5
  7505                           fsr1l	equ	0xFE1
  7506                           status	equ	0xFD8
  7507                           
  7508 ;; *************** function _DS3231_Write_Time *****************
  7509 ;; Defined at:
  7510 ;;		line 90 in file "I2C_Support.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  Address         1    4[BANK1 ] unsigned char 
  7515 ;;  Device          1    3[BANK1 ] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;		None               void
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;Total ram usage:        2 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    5
  7532 ;; This function calls:
  7533 ;;		_I2C_Start
  7534 ;;		_I2C_Stop
  7535 ;;		_I2C_Write
  7536 ;;		_dec_2_bcd
  7537 ;; This function is called by:
  7538 ;;		_Do_Save_New_Time
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           	psect	text35
  7543  002866                     __ptext35:
  7544                           	opt stack 0
  7545  002866                     _DS3231_Write_Time:
  7546                           	opt stack 23
  7547                           
  7548                           ;I2C_Support.c: 92: char Device = 0x68;
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;incstack = 0
  7552  002866  0E68               	movlw	104
  7553  002868  0101               	movlb	1	; () banked
  7554  00286A  6F37               	movwf	DS3231_Write_Time@Device& (0+255),b
  7555                           
  7556                           ;I2C_Support.c: 93: char Address = 0x00;
  7557  00286C  0E00               	movlw	0
  7558  00286E  0101               	movlb	1	; () banked
  7559  002870  6F38               	movwf	DS3231_Write_Time@Address& (0+255),b
  7560                           
  7561                           ; BSR set to: 1
  7562                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  7563  002872  506C               	movf	_setup_second,w,c
  7564  002874  EC56  F018         	call	_dec_2_bcd
  7565  002878  0100               	movlb	0	; () banked
  7566  00287A  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7567  00287C  6E63               	movwf	_second,c
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  7571  00287E  506A               	movf	_setup_minute,w,c
  7572  002880  EC56  F018         	call	_dec_2_bcd
  7573  002884  0100               	movlb	0	; () banked
  7574  002886  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7575  002888  6E60               	movwf	_minute,c
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  7579  00288A  5069               	movf	_setup_hour,w,c
  7580  00288C  EC56  F018         	call	_dec_2_bcd
  7581  002890  0100               	movlb	0	; () banked
  7582  002892  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7583  002894  6E5F               	movwf	_hour,c
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;I2C_Support.c: 97: dow = 0x01;
  7587  002896  0E01               	movlw	1
  7588  002898  6E5C               	movwf	_dow,c
  7589                           
  7590                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  7591  00289A  5067               	movf	_setup_day,w,c
  7592  00289C  EC56  F018         	call	_dec_2_bcd
  7593  0028A0  0100               	movlb	0	; () banked
  7594  0028A2  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7595  0028A4  6E5B               	movwf	_day,c
  7596                           
  7597                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  7598  0028A6  506B               	movf	_setup_month,w,c
  7599  0028A8  EC56  F018         	call	_dec_2_bcd
  7600  0028AC  0100               	movlb	0	; () banked
  7601  0028AE  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7602  0028B0  6E61               	movwf	_month,c
  7603                           
  7604                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  7605  0028B2  506D               	movf	_setup_year,w,c
  7606  0028B4  EC56  F018         	call	_dec_2_bcd
  7607  0028B8  0100               	movlb	0	; () banked
  7608  0028BA  51FB               	movf	?_dec_2_bcd& (0+255),w,b
  7609  0028BC  6E6E               	movwf	_year,c
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;I2C_Support.c: 101: I2C_Start();
  7613  0028BE  ECEA  F01D         	call	_I2C_Start	;wreg free
  7614                           
  7615                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  7616  0028C2  0101               	movlb	1	; () banked
  7617  0028C4  5137               	movf	DS3231_Write_Time@Device& (0+255),w,b
  7618  0028C6  2537               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  7619  0028C8  EC48  F01B         	call	_I2C_Write
  7620                           
  7621                           ;I2C_Support.c: 103: I2C_Write(Address);
  7622  0028CC  0101               	movlb	1	; () banked
  7623  0028CE  5138               	movf	DS3231_Write_Time@Address& (0+255),w,b
  7624  0028D0  EC48  F01B         	call	_I2C_Write
  7625                           
  7626                           ;I2C_Support.c: 104: I2C_Write(second);
  7627  0028D4  5063               	movf	_second,w,c
  7628  0028D6  EC48  F01B         	call	_I2C_Write
  7629                           
  7630                           ;I2C_Support.c: 105: I2C_Write(minute);
  7631  0028DA  5060               	movf	_minute,w,c
  7632  0028DC  EC48  F01B         	call	_I2C_Write
  7633                           
  7634                           ;I2C_Support.c: 106: I2C_Write(hour);
  7635  0028E0  505F               	movf	_hour,w,c
  7636  0028E2  EC48  F01B         	call	_I2C_Write
  7637                           
  7638                           ;I2C_Support.c: 107: I2C_Write(dow);
  7639  0028E6  505C               	movf	_dow,w,c
  7640  0028E8  EC48  F01B         	call	_I2C_Write
  7641                           
  7642                           ;I2C_Support.c: 108: I2C_Write(day);
  7643  0028EC  505B               	movf	_day,w,c
  7644  0028EE  EC48  F01B         	call	_I2C_Write
  7645                           
  7646                           ;I2C_Support.c: 109: I2C_Write(month);
  7647  0028F2  5061               	movf	_month,w,c
  7648  0028F4  EC48  F01B         	call	_I2C_Write
  7649                           
  7650                           ;I2C_Support.c: 110: I2C_Write(year);
  7651  0028F8  506E               	movf	_year,w,c
  7652  0028FA  EC48  F01B         	call	_I2C_Write
  7653                           
  7654                           ;I2C_Support.c: 111: I2C_Stop();
  7655  0028FE  ECE1  F01D         	call	_I2C_Stop	;wreg free
  7656  002902  0012               	return		;funcret
  7657  002904                     __end_of_DS3231_Write_Time:
  7658                           	opt stack 0
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1l	equ	0xFE1
  7667                           status	equ	0xFD8
  7668                           
  7669 ;; *************** function _Decrease_Time *****************
  7670 ;; Defined at:
  7671 ;;		line 108 in file "Setup_Time.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;		None
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;		None               void
  7678 ;; Registers used:
  7679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;Total ram usage:        0 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:   11
  7692 ;; This function calls:
  7693 ;;		_Update_Setup_Time_Screen
  7694 ;; This function is called by:
  7695 ;;		_Do_Setup_Time
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text36
  7700  002AC4                     __ptext36:
  7701                           	opt stack 0
  7702  002AC4                     _Decrease_Time:
  7703                           	opt stack 18
  7704                           
  7705                           ;Setup_Time.c: 110: switch (Select_Field)
  7706                           
  7707                           ;incstack = 0
  7708  002AC4  D030               	goto	l9427
  7709  002AC6                     l9389:
  7710                           
  7711                           ;Setup_Time.c: 113: if (setup_hour < 1) setup_hour = 23;
  7712  002AC6  5069               	movf	_setup_hour,w,c
  7713  002AC8  A4D8               	btfss	status,2,c
  7714  002ACA  D003               	goto	l9393
  7715  002ACC  0E17               	movlw	23
  7716  002ACE  6E69               	movwf	_setup_hour,c
  7717  002AD0  D03E               	goto	l9429
  7718  002AD2                     l9393:
  7719                           
  7720                           ;Setup_Time.c: 114: else --setup_hour;
  7721  002AD2  0669               	decf	_setup_hour,f,c
  7722                           
  7723                           ;Setup_Time.c: 115: break;
  7724  002AD4  D03C               	goto	l9429
  7725  002AD6                     l9395:
  7726                           
  7727                           ;Setup_Time.c: 117: if (setup_minute < 1) setup_minute = 59;
  7728  002AD6  506A               	movf	_setup_minute,w,c
  7729  002AD8  A4D8               	btfss	status,2,c
  7730  002ADA  D003               	goto	l9399
  7731  002ADC  0E3B               	movlw	59
  7732  002ADE  6E6A               	movwf	_setup_minute,c
  7733  002AE0  D036               	goto	l9429
  7734  002AE2                     l9399:
  7735                           
  7736                           ;Setup_Time.c: 118: else --setup_minute;
  7737  002AE2  066A               	decf	_setup_minute,f,c
  7738                           
  7739                           ;Setup_Time.c: 119: break;
  7740  002AE4  D034               	goto	l9429
  7741  002AE6                     l9401:
  7742                           
  7743                           ;Setup_Time.c: 121: if (setup_second < 1) setup_second = 59;
  7744  002AE6  506C               	movf	_setup_second,w,c
  7745  002AE8  A4D8               	btfss	status,2,c
  7746  002AEA  D003               	goto	l9405
  7747  002AEC  0E3B               	movlw	59
  7748  002AEE  6E6C               	movwf	_setup_second,c
  7749  002AF0  D02E               	goto	l9429
  7750  002AF2                     l9405:
  7751                           
  7752                           ;Setup_Time.c: 122: else --setup_second;
  7753  002AF2  066C               	decf	_setup_second,f,c
  7754                           
  7755                           ;Setup_Time.c: 123: break;
  7756  002AF4  D02C               	goto	l9429
  7757  002AF6                     l9407:
  7758                           
  7759                           ;Setup_Time.c: 125: if (setup_month < 2) setup_month = 12;
  7760  002AF6  0E02               	movlw	2
  7761  002AF8  606B               	cpfslt	_setup_month,c
  7762  002AFA  D003               	goto	l9411
  7763  002AFC  0E0C               	movlw	12
  7764  002AFE  6E6B               	movwf	_setup_month,c
  7765  002B00  D026               	goto	l9429
  7766  002B02                     l9411:
  7767                           
  7768                           ;Setup_Time.c: 126: else --setup_month;
  7769  002B02  066B               	decf	_setup_month,f,c
  7770                           
  7771                           ;Setup_Time.c: 127: break;
  7772  002B04  D024               	goto	l9429
  7773  002B06                     l9413:
  7774                           
  7775                           ;Setup_Time.c: 129: if (setup_day < 2) setup_day = 30;
  7776  002B06  0E02               	movlw	2
  7777  002B08  6067               	cpfslt	_setup_day,c
  7778  002B0A  D003               	goto	l9417
  7779  002B0C  0E1E               	movlw	30
  7780  002B0E  6E67               	movwf	_setup_day,c
  7781  002B10  D01E               	goto	l9429
  7782  002B12                     l9417:
  7783                           
  7784                           ;Setup_Time.c: 130: else --setup_day;
  7785  002B12  0667               	decf	_setup_day,f,c
  7786                           
  7787                           ;Setup_Time.c: 131: break;
  7788  002B14  D01C               	goto	l9429
  7789  002B16                     l9419:
  7790                           
  7791                           ;Setup_Time.c: 133: if (setup_year < 1) setup_year = 99;
  7792  002B16  506D               	movf	_setup_year,w,c
  7793  002B18  A4D8               	btfss	status,2,c
  7794  002B1A  D003               	goto	l9423
  7795  002B1C  0E63               	movlw	99
  7796  002B1E  6E6D               	movwf	_setup_year,c
  7797  002B20  D016               	goto	l9429
  7798  002B22                     l9423:
  7799                           
  7800                           ;Setup_Time.c: 134: else --setup_year;
  7801  002B22  066D               	decf	_setup_year,f,c
  7802                           
  7803                           ;Setup_Time.c: 138: }
  7804                           
  7805                           ;Setup_Time.c: 137: break;
  7806                           
  7807                           ;Setup_Time.c: 136: default:
  7808                           
  7809                           ;Setup_Time.c: 135: break;
  7810  002B24  D014               	goto	l9429
  7811  002B26                     l9427:
  7812  002B26  5053               	movf	_Select_Field,w,c
  7813                           
  7814                           ; Switch size 1, requested type "space"
  7815                           ; Number of cases is 6, Range of values is 0 to 5
  7816                           ; switch strategies available:
  7817                           ; Name         Instructions Cycles
  7818                           ; simple_byte           19    10 (average)
  7819                           ;	Chosen strategy is simple_byte
  7820  002B28  0A00               	xorlw	0	; case 0
  7821  002B2A  B4D8               	btfsc	status,2,c
  7822  002B2C  D7CC               	goto	l9389
  7823  002B2E  0A01               	xorlw	1	; case 1
  7824  002B30  B4D8               	btfsc	status,2,c
  7825  002B32  D7D1               	goto	l9395
  7826  002B34  0A03               	xorlw	3	; case 2
  7827  002B36  B4D8               	btfsc	status,2,c
  7828  002B38  D7D6               	goto	l9401
  7829  002B3A  0A01               	xorlw	1	; case 3
  7830  002B3C  B4D8               	btfsc	status,2,c
  7831  002B3E  D7DB               	goto	l9407
  7832  002B40  0A07               	xorlw	7	; case 4
  7833  002B42  B4D8               	btfsc	status,2,c
  7834  002B44  D7E0               	goto	l9413
  7835  002B46  0A01               	xorlw	1	; case 5
  7836  002B48  B4D8               	btfsc	status,2,c
  7837  002B4A  D7E5               	goto	l9419
  7838  002B4C  D000               	goto	l9429
  7839  002B4E                     l9429:
  7840                           
  7841                           ;Setup_Time.c: 139: Update_Setup_Time_Screen();
  7842  002B4E  EC05  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7843  002B52  0012               	return		;funcret
  7844  002B54                     __end_of_Decrease_Time:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           postdec1	equ	0xFE5
  7853                           fsr1l	equ	0xFE1
  7854                           status	equ	0xFD8
  7855                           
  7856 ;; *************** function _Update_Setup_Time_Screen *****************
  7857 ;; Defined at:
  7858 ;;		line 191 in file "Setup_Time.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;		None               void
  7865 ;; Registers used:
  7866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;Total ram usage:        0 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:   10
  7879 ;; This function calls:
  7880 ;;		___awdiv
  7881 ;;		___awmod
  7882 ;;		_drawtext
  7883 ;; This function is called by:
  7884 ;;		_Do_Setup_Time
  7885 ;;		_Increase_Time
  7886 ;;		_Decrease_Time
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text37
  7891  00140A                     __ptext37:
  7892                           	opt stack 0
  7893  00140A                     _Update_Setup_Time_Screen:
  7894                           	opt stack 19
  7895                           
  7896                           ;Setup_Time.c: 193: setup_time[0] = (setup_hour/10) + '0';
  7897                           
  7898                           ;incstack = 0
  7899  00140A  C069  F017         	movff	_setup_hour,___awdiv@dividend
  7900  00140E  6A18               	clrf	___awdiv@dividend+1,c
  7901  001410  0E00               	movlw	0
  7902  001412  6E1A               	movwf	___awdiv@divisor+1,c
  7903  001414  0E0A               	movlw	10
  7904  001416  6E19               	movwf	___awdiv@divisor,c
  7905  001418  ECCD  F014         	call	___awdiv	;wreg free
  7906  00141C  5017               	movf	?___awdiv,w,c
  7907  00141E  0F30               	addlw	48
  7908  001420  0100               	movlb	0	; () banked
  7909  001422  6FA6               	movwf	_setup_time& (0+255),b
  7910                           
  7911                           ;Setup_Time.c: 194: setup_time[1] = (setup_hour%10) + '0';
  7912  001424  C069  F03B         	movff	_setup_hour,___awmod@dividend
  7913  001428  6A3C               	clrf	___awmod@dividend+1,c
  7914  00142A  0E00               	movlw	0
  7915  00142C  6E3E               	movwf	___awmod@divisor+1,c
  7916  00142E  0E0A               	movlw	10
  7917  001430  6E3D               	movwf	___awmod@divisor,c
  7918  001432  EC02  F017         	call	___awmod	;wreg free
  7919  001436  503B               	movf	?___awmod,w,c
  7920  001438  0F30               	addlw	48
  7921  00143A  0100               	movlb	0	; () banked
  7922  00143C  6FA7               	movwf	(_setup_time+1)& (0+255),b
  7923                           
  7924                           ;Setup_Time.c: 196: setup_time[3] = (setup_minute/10) + '0';
  7925  00143E  C06A  F017         	movff	_setup_minute,___awdiv@dividend
  7926  001442  6A18               	clrf	___awdiv@dividend+1,c
  7927  001444  0E00               	movlw	0
  7928  001446  6E1A               	movwf	___awdiv@divisor+1,c
  7929  001448  0E0A               	movlw	10
  7930  00144A  6E19               	movwf	___awdiv@divisor,c
  7931  00144C  ECCD  F014         	call	___awdiv	;wreg free
  7932  001450  5017               	movf	?___awdiv,w,c
  7933  001452  0F30               	addlw	48
  7934  001454  0100               	movlb	0	; () banked
  7935  001456  6FA9               	movwf	(_setup_time+3)& (0+255),b
  7936                           
  7937                           ;Setup_Time.c: 197: setup_time[4] = (setup_minute%10) + '0';
  7938  001458  C06A  F03B         	movff	_setup_minute,___awmod@dividend
  7939  00145C  6A3C               	clrf	___awmod@dividend+1,c
  7940  00145E  0E00               	movlw	0
  7941  001460  6E3E               	movwf	___awmod@divisor+1,c
  7942  001462  0E0A               	movlw	10
  7943  001464  6E3D               	movwf	___awmod@divisor,c
  7944  001466  EC02  F017         	call	___awmod	;wreg free
  7945  00146A  503B               	movf	?___awmod,w,c
  7946  00146C  0F30               	addlw	48
  7947  00146E  0100               	movlb	0	; () banked
  7948  001470  6FAA               	movwf	(_setup_time+4)& (0+255),b
  7949                           
  7950                           ;Setup_Time.c: 199: setup_time[6] = (setup_second/10) + '0';
  7951  001472  C06C  F017         	movff	_setup_second,___awdiv@dividend
  7952  001476  6A18               	clrf	___awdiv@dividend+1,c
  7953  001478  0E00               	movlw	0
  7954  00147A  6E1A               	movwf	___awdiv@divisor+1,c
  7955  00147C  0E0A               	movlw	10
  7956  00147E  6E19               	movwf	___awdiv@divisor,c
  7957  001480  ECCD  F014         	call	___awdiv	;wreg free
  7958  001484  5017               	movf	?___awdiv,w,c
  7959  001486  0F30               	addlw	48
  7960  001488  0100               	movlb	0	; () banked
  7961  00148A  6FAC               	movwf	(_setup_time+6)& (0+255),b
  7962                           
  7963                           ;Setup_Time.c: 200: setup_time[7] = (setup_second%10) + '0';
  7964  00148C  C06C  F03B         	movff	_setup_second,___awmod@dividend
  7965  001490  6A3C               	clrf	___awmod@dividend+1,c
  7966  001492  0E00               	movlw	0
  7967  001494  6E3E               	movwf	___awmod@divisor+1,c
  7968  001496  0E0A               	movlw	10
  7969  001498  6E3D               	movwf	___awmod@divisor,c
  7970  00149A  EC02  F017         	call	___awmod	;wreg free
  7971  00149E  503B               	movf	?___awmod,w,c
  7972  0014A0  0F30               	addlw	48
  7973  0014A2  0100               	movlb	0	; () banked
  7974  0014A4  6FAD               	movwf	(_setup_time+7)& (0+255),b
  7975                           
  7976                           ;Setup_Time.c: 202: setup_date[0] = (setup_month/10) + '0';
  7977  0014A6  C06B  F017         	movff	_setup_month,___awdiv@dividend
  7978  0014AA  6A18               	clrf	___awdiv@dividend+1,c
  7979  0014AC  0E00               	movlw	0
  7980  0014AE  6E1A               	movwf	___awdiv@divisor+1,c
  7981  0014B0  0E0A               	movlw	10
  7982  0014B2  6E19               	movwf	___awdiv@divisor,c
  7983  0014B4  ECCD  F014         	call	___awdiv	;wreg free
  7984  0014B8  5017               	movf	?___awdiv,w,c
  7985  0014BA  0F30               	addlw	48
  7986  0014BC  0100               	movlb	0	; () banked
  7987  0014BE  6F9D               	movwf	_setup_date& (0+255),b
  7988                           
  7989                           ;Setup_Time.c: 203: setup_date[1] = (setup_month%10) + '0';
  7990  0014C0  C06B  F03B         	movff	_setup_month,___awmod@dividend
  7991  0014C4  6A3C               	clrf	___awmod@dividend+1,c
  7992  0014C6  0E00               	movlw	0
  7993  0014C8  6E3E               	movwf	___awmod@divisor+1,c
  7994  0014CA  0E0A               	movlw	10
  7995  0014CC  6E3D               	movwf	___awmod@divisor,c
  7996  0014CE  EC02  F017         	call	___awmod	;wreg free
  7997  0014D2  503B               	movf	?___awmod,w,c
  7998  0014D4  0F30               	addlw	48
  7999  0014D6  0100               	movlb	0	; () banked
  8000  0014D8  6F9E               	movwf	(_setup_date+1)& (0+255),b
  8001                           
  8002                           ;Setup_Time.c: 205: setup_date[3] = (setup_day/10) + '0';
  8003  0014DA  C067  F017         	movff	_setup_day,___awdiv@dividend
  8004  0014DE  6A18               	clrf	___awdiv@dividend+1,c
  8005  0014E0  0E00               	movlw	0
  8006  0014E2  6E1A               	movwf	___awdiv@divisor+1,c
  8007  0014E4  0E0A               	movlw	10
  8008  0014E6  6E19               	movwf	___awdiv@divisor,c
  8009  0014E8  ECCD  F014         	call	___awdiv	;wreg free
  8010  0014EC  5017               	movf	?___awdiv,w,c
  8011  0014EE  0F30               	addlw	48
  8012  0014F0  0100               	movlb	0	; () banked
  8013  0014F2  6FA0               	movwf	(_setup_date+3)& (0+255),b
  8014                           
  8015                           ;Setup_Time.c: 206: setup_date[4] = (setup_day%10) + '0';
  8016  0014F4  C067  F03B         	movff	_setup_day,___awmod@dividend
  8017  0014F8  6A3C               	clrf	___awmod@dividend+1,c
  8018  0014FA  0E00               	movlw	0
  8019  0014FC  6E3E               	movwf	___awmod@divisor+1,c
  8020  0014FE  0E0A               	movlw	10
  8021  001500  6E3D               	movwf	___awmod@divisor,c
  8022  001502  EC02  F017         	call	___awmod	;wreg free
  8023  001506  503B               	movf	?___awmod,w,c
  8024  001508  0F30               	addlw	48
  8025  00150A  0100               	movlb	0	; () banked
  8026  00150C  6FA1               	movwf	(_setup_date+4)& (0+255),b
  8027                           
  8028                           ;Setup_Time.c: 208: setup_date[6] = (setup_year/10) + '0';
  8029  00150E  C06D  F017         	movff	_setup_year,___awdiv@dividend
  8030  001512  6A18               	clrf	___awdiv@dividend+1,c
  8031  001514  0E00               	movlw	0
  8032  001516  6E1A               	movwf	___awdiv@divisor+1,c
  8033  001518  0E0A               	movlw	10
  8034  00151A  6E19               	movwf	___awdiv@divisor,c
  8035  00151C  ECCD  F014         	call	___awdiv	;wreg free
  8036  001520  5017               	movf	?___awdiv,w,c
  8037  001522  0F30               	addlw	48
  8038  001524  0100               	movlb	0	; () banked
  8039  001526  6FA3               	movwf	(_setup_date+6)& (0+255),b
  8040                           
  8041                           ;Setup_Time.c: 209: setup_date[7] = (setup_year%10) + '0';
  8042  001528  C06D  F03B         	movff	_setup_year,___awmod@dividend
  8043  00152C  6A3C               	clrf	___awmod@dividend+1,c
  8044  00152E  0E00               	movlw	0
  8045  001530  6E3E               	movwf	___awmod@divisor+1,c
  8046  001532  0E0A               	movlw	10
  8047  001534  6E3D               	movwf	___awmod@divisor,c
  8048  001536  EC02  F017         	call	___awmod	;wreg free
  8049  00153A  503B               	movf	?___awmod,w,c
  8050  00153C  0F30               	addlw	48
  8051  00153E  0100               	movlb	0	; () banked
  8052  001540  6FA4               	movwf	(_setup_date+7)& (0+255),b
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;Setup_Time.c: 211: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  8056  001542  0E34               	movlw	52
  8057  001544  6E39               	movwf	drawtext@y,c
  8058  001546  0EA6               	movlw	low _setup_time
  8059  001548  6E3A               	movwf	drawtext@_text,c
  8060  00154A  0E00               	movlw	high _setup_time
  8061  00154C  6E3B               	movwf	drawtext@_text+1,c
  8062  00154E  0E07               	movlw	7
  8063  001550  6E3D               	movwf	drawtext@color+1,c
  8064  001552  683C               	setf	drawtext@color,c
  8065  001554  0E00               	movlw	0
  8066  001556  6E3F               	movwf	drawtext@bg+1,c
  8067  001558  0E00               	movlw	0
  8068  00155A  6E3E               	movwf	drawtext@bg,c
  8069  00155C  0E02               	movlw	2
  8070  00155E  6E40               	movwf	drawtext@size,c
  8071  001560  0E0F               	movlw	15
  8072  001562  EC2B  F00C         	call	_drawtext
  8073                           
  8074                           ;Setup_Time.c: 212: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  8075  001566  0E52               	movlw	82
  8076  001568  6E39               	movwf	drawtext@y,c
  8077  00156A  0E9D               	movlw	low _setup_date
  8078  00156C  6E3A               	movwf	drawtext@_text,c
  8079  00156E  0E00               	movlw	high _setup_date
  8080  001570  6E3B               	movwf	drawtext@_text+1,c
  8081  001572  0E07               	movlw	7
  8082  001574  6E3D               	movwf	drawtext@color+1,c
  8083  001576  0EE0               	movlw	224
  8084  001578  6E3C               	movwf	drawtext@color,c
  8085  00157A  0E00               	movlw	0
  8086  00157C  6E3F               	movwf	drawtext@bg+1,c
  8087  00157E  0E00               	movlw	0
  8088  001580  6E3E               	movwf	drawtext@bg,c
  8089  001582  0E02               	movlw	2
  8090  001584  6E40               	movwf	drawtext@size,c
  8091  001586  0E0F               	movlw	15
  8092  001588  EC2B  F00C         	call	_drawtext
  8093  00158C  0012               	return		;funcret
  8094  00158E                     __end_of_Update_Setup_Time_Screen:
  8095                           	opt stack 0
  8096                           tblptru	equ	0xFF8
  8097                           tblptrh	equ	0xFF7
  8098                           tblptrl	equ	0xFF6
  8099                           tablat	equ	0xFF5
  8100                           postinc0	equ	0xFEE
  8101                           wreg	equ	0xFE8
  8102                           postdec1	equ	0xFE5
  8103                           fsr1l	equ	0xFE1
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _Do_Setup_Heater_Temp *****************
  8107 ;; Defined at:
  8108 ;;		line 24 in file "Setup_Heater_Temp.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  2  387[None  ] int 
  8115 ;; Registers used:
  8116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;Total ram usage:        2 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:   12
  8129 ;; This function calls:
  8130 ;;		_Decrease_Heater_Temp
  8131 ;;		_Do_Beep_Bad
  8132 ;;		_Do_Beep_Good
  8133 ;;		_Do_Save_New_Heater_Temp
  8134 ;;		_Exit_Setup_Heater_Temp
  8135 ;;		_Increase_Heater_Temp
  8136 ;;		_Initialize_Setup_Heater_Screen
  8137 ;;		_Update_Setup_Heater_Screen
  8138 ;;		_check_for_button_input
  8139 ;; This function is called by:
  8140 ;;		_main
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text38
  8145  002A30                     __ptext38:
  8146                           	opt stack 0
  8147  002A30                     _Do_Setup_Heater_Temp:
  8148                           	opt stack 18
  8149                           
  8150                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  8151                           
  8152                           ;incstack = 0
  8153  002A30  0E01               	movlw	1
  8154  002A32  0100               	movlb	0	; () banked
  8155  002A34  6FF8               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  8159  002A36  C06F  F068         	movff	_heater_set_temp,_setup_heater_set_temp
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  8163  002A3A  EC4A  F00F         	call	_Initialize_Setup_Heater_Screen	;wreg free
  8164                           
  8165                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  8166  002A3E  ECE2  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  8167                           
  8168                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  8169  002A42  D03B               	goto	l9897
  8170  002A44                     l9867:
  8171                           
  8172                           ;Setup_Heater_Temp.c: 33: {
  8173                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  8174  002A44  0E01               	movlw	1
  8175  002A46  0101               	movlb	1	; () banked
  8176  002A48  6F3B               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  8177  002A4A  0E00               	movlw	0
  8178  002A4C  0101               	movlb	1	; () banked
  8179  002A4E  6F3C               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  8180  002A50  ECAA  F015         	call	_check_for_button_input	;wreg free
  8181  002A54  0101               	movlb	1	; () banked
  8182  002A56  193B               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  8183  002A58  113C               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  8184  002A5A  A4D8               	btfss	status,2,c
  8185  002A5C  D02E               	goto	l9897
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;Setup_Heater_Temp.c: 35: {
  8189                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  8190  002A5E  0E00               	movlw	0
  8191  002A60  0100               	movlb	0	; () banked
  8192  002A62  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  8193  002A64  0E00               	movlw	0
  8194  002A66  6FF2               	movwf	_nec_ok& (0+255),b
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  8198  002A68  0E04               	movlw	4
  8199  002A6A  645E               	cpfsgt	_found,c
  8200  002A6C  D023               	goto	l9895
  8201                           
  8202                           ; BSR set to: 0
  8203  002A6E  0E09               	movlw	9
  8204  002A70  605E               	cpfslt	_found,c
  8205  002A72  D020               	goto	l9895
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;Setup_Heater_Temp.c: 38: {
  8209                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  8210  002A74  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  8211                           
  8212                           ;Setup_Heater_Temp.c: 41: if (found == 5) Do_Save_New_Heater_Temp();
  8213  002A78  0E05               	movlw	5
  8214  002A7A  185E               	xorwf	_found,w,c
  8215  002A7C  A4D8               	btfss	status,2,c
  8216  002A7E  D003               	goto	l9881
  8217  002A80  EC8C  F01D         	call	_Do_Save_New_Heater_Temp	;wreg free
  8218  002A84  D000               	goto	l9881
  8219  002A86                     l9881:
  8220                           
  8221                           ;Setup_Heater_Temp.c: 42: if (found == 6) Decrease_Heater_Temp();
  8222  002A86  0E06               	movlw	6
  8223  002A88  185E               	xorwf	_found,w,c
  8224  002A8A  A4D8               	btfss	status,2,c
  8225  002A8C  D003               	goto	l9885
  8226  002A8E  EC96  F01D         	call	_Decrease_Heater_Temp	;wreg free
  8227  002A92  D000               	goto	l9885
  8228  002A94                     l9885:
  8229                           
  8230                           ;Setup_Heater_Temp.c: 43: if (found == 7) Increase_Heater_Temp();
  8231  002A94  0E07               	movlw	7
  8232  002A96  185E               	xorwf	_found,w,c
  8233  002A98  A4D8               	btfss	status,2,c
  8234  002A9A  D003               	goto	l9889
  8235  002A9C  EC82  F01D         	call	_Increase_Heater_Temp	;wreg free
  8236  002AA0  D000               	goto	l9889
  8237  002AA2                     l9889:
  8238                           
  8239                           ;Setup_Heater_Temp.c: 44: if (found == 8) Exit_Setup_Heater_Temp();
  8240  002AA2  0E08               	movlw	8
  8241  002AA4  185E               	xorwf	_found,w,c
  8242  002AA6  A4D8               	btfss	status,2,c
  8243  002AA8  D003               	goto	l9893
  8244  002AAA  EC0C  F01E         	call	_Exit_Setup_Heater_Temp	;wreg free
  8245  002AAE  D000               	goto	l9893
  8246  002AB0                     l9893:
  8247                           
  8248                           ;Setup_Heater_Temp.c: 45: found = 0xff;
  8249  002AB0  685E               	setf	_found,c
  8250                           
  8251                           ;Setup_Heater_Temp.c: 46: }
  8252  002AB2  D003               	goto	l9897
  8253  002AB4                     l9895:
  8254                           
  8255                           ;Setup_Heater_Temp.c: 47: else
  8256                           ;Setup_Heater_Temp.c: 48: {
  8257                           ;Setup_Heater_Temp.c: 49: Do_Beep_Bad();
  8258  002AB4  EC33  F01E         	call	_Do_Beep_Bad	;wreg free
  8259  002AB8  D000               	goto	l9897
  8260  002ABA                     l9897:
  8261  002ABA  0100               	movlb	0	; () banked
  8262  002ABC  05F8               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  8263  002ABE  B4D8               	btfsc	status,2,c
  8264  002AC0  D7C1               	goto	l9867
  8265                           
  8266                           ; BSR set to: 0
  8267                           
  8268                           ; BSR set to: 0
  8269  002AC2  0012               	return		;funcret
  8270  002AC4                     __end_of_Do_Setup_Heater_Temp:
  8271                           	opt stack 0
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           postinc0	equ	0xFEE
  8277                           wreg	equ	0xFE8
  8278                           postdec1	equ	0xFE5
  8279                           fsr1l	equ	0xFE1
  8280                           status	equ	0xFD8
  8281                           
  8282 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  8283 ;; Defined at:
  8284 ;;		line 84 in file "Setup_Heater_Temp.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;		None               void
  8291 ;; Registers used:
  8292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;Total ram usage:        0 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:   10
  8305 ;; This function calls:
  8306 ;;		_drawtext
  8307 ;;		_fillScreen
  8308 ;;		_strcpy
  8309 ;; This function is called by:
  8310 ;;		_Do_Setup_Heater_Temp
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           	psect	text39
  8315  001E94                     __ptext39:
  8316                           	opt stack 0
  8317  001E94                     _Initialize_Setup_Heater_Screen:
  8318                           	opt stack 19
  8319                           
  8320                           ;Setup_Heater_Temp.c: 86: fillScreen(0x0000);
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;incstack = 0
  8324  001E94  0E00               	movlw	0
  8325  001E96  6E25               	movwf	fillScreen@color+1,c
  8326  001E98  0E00               	movlw	0
  8327  001E9A  6E24               	movwf	fillScreen@color,c
  8328  001E9C  EC16  F01D         	call	_fillScreen	;wreg free
  8329                           
  8330                           ;Setup_Heater_Temp.c: 88: strcpy(txt, "ECE3301L F'21 Final\0");
  8331  001EA0  C04B  F011         	movff	_txt,strcpy@to
  8332  001EA4  C04C  F012         	movff	_txt+1,strcpy@to+1
  8333  001EA8  0ED7               	movlw	low (STR_5+1)
  8334  001EAA  6E13               	movwf	strcpy@from,c
  8335  001EAC  0EFE               	movlw	high (STR_5+1)
  8336  001EAE  6E14               	movwf	strcpy@from+1,c
  8337  001EB0  ECF4  F01B         	call	_strcpy	;wreg free
  8338                           
  8339                           ;Setup_Heater_Temp.c: 89: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8340  001EB4  0E01               	movlw	1
  8341  001EB6  6E39               	movwf	drawtext@y,c
  8342  001EB8  C04B  F03A         	movff	_txt,drawtext@_text
  8343  001EBC  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  8344  001EC0  0EFF               	movlw	255
  8345  001EC2  6E3D               	movwf	drawtext@color+1,c
  8346  001EC4  683C               	setf	drawtext@color,c
  8347  001EC6  0E00               	movlw	0
  8348  001EC8  6E3F               	movwf	drawtext@bg+1,c
  8349  001ECA  0E00               	movlw	0
  8350  001ECC  6E3E               	movwf	drawtext@bg,c
  8351  001ECE  0E01               	movlw	1
  8352  001ED0  6E40               	movwf	drawtext@size,c
  8353  001ED2  0E01               	movlw	1
  8354  001ED4  EC2B  F00C         	call	_drawtext
  8355                           
  8356                           ;Setup_Heater_Temp.c: 91: strcpy(txt, "  Heater\0 ");
  8357  001ED8  C04B  F011         	movff	_txt,strcpy@to
  8358  001EDC  C04C  F012         	movff	_txt+1,strcpy@to+1
  8359  001EE0  0E95               	movlw	low STR_29
  8360  001EE2  6E13               	movwf	strcpy@from,c
  8361  001EE4  0EFF               	movlw	high STR_29
  8362  001EE6  6E14               	movwf	strcpy@from+1,c
  8363  001EE8  ECF4  F01B         	call	_strcpy	;wreg free
  8364                           
  8365                           ;Setup_Heater_Temp.c: 92: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  8366  001EEC  0E1A               	movlw	26
  8367  001EEE  6E39               	movwf	drawtext@y,c
  8368  001EF0  C04B  F03A         	movff	_txt,drawtext@_text
  8369  001EF4  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  8370  001EF8  0EFF               	movlw	255
  8371  001EFA  6E3D               	movwf	drawtext@color+1,c
  8372  001EFC  0EE0               	movlw	224
  8373  001EFE  6E3C               	movwf	drawtext@color,c
  8374  001F00  0E00               	movlw	0
  8375  001F02  6E3F               	movwf	drawtext@bg+1,c
  8376  001F04  0E00               	movlw	0
  8377  001F06  6E3E               	movwf	drawtext@bg,c
  8378  001F08  0E02               	movlw	2
  8379  001F0A  6E40               	movwf	drawtext@size,c
  8380  001F0C  0E01               	movlw	1
  8381  001F0E  EC2B  F00C         	call	_drawtext
  8382                           
  8383                           ;Setup_Heater_Temp.c: 93: strcpy(txt, "  Setup\0 ");
  8384  001F12  C04B  F011         	movff	_txt,strcpy@to
  8385  001F16  C04C  F012         	movff	_txt+1,strcpy@to+1
  8386  001F1A  0EB6               	movlw	low STR_30
  8387  001F1C  6E13               	movwf	strcpy@from,c
  8388  001F1E  0EFF               	movlw	high STR_30
  8389  001F20  6E14               	movwf	strcpy@from+1,c
  8390  001F22  ECF4  F01B         	call	_strcpy	;wreg free
  8391                           
  8392                           ;Setup_Heater_Temp.c: 94: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  8393  001F26  0E29               	movlw	41
  8394  001F28  6E39               	movwf	drawtext@y,c
  8395  001F2A  C04B  F03A         	movff	_txt,drawtext@_text
  8396  001F2E  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  8397  001F32  0EFF               	movlw	255
  8398  001F34  6E3D               	movwf	drawtext@color+1,c
  8399  001F36  0EE0               	movlw	224
  8400  001F38  6E3C               	movwf	drawtext@color,c
  8401  001F3A  0E00               	movlw	0
  8402  001F3C  6E3F               	movwf	drawtext@bg+1,c
  8403  001F3E  0E00               	movlw	0
  8404  001F40  6E3E               	movwf	drawtext@bg,c
  8405  001F42  0E02               	movlw	2
  8406  001F44  6E40               	movwf	drawtext@size,c
  8407  001F46  0E01               	movlw	1
  8408  001F48  EC2B  F00C         	call	_drawtext
  8409                           
  8410                           ;Setup_Heater_Temp.c: 95: strcpy(txt, "Set Heater Temp");
  8411  001F4C  C04B  F011         	movff	_txt,strcpy@to
  8412  001F50  C04C  F012         	movff	_txt+1,strcpy@to+1
  8413  001F54  0E5F               	movlw	low STR_31
  8414  001F56  6E13               	movwf	strcpy@from,c
  8415  001F58  0EFF               	movlw	high STR_31
  8416  001F5A  6E14               	movwf	strcpy@from+1,c
  8417  001F5C  ECF4  F01B         	call	_strcpy	;wreg free
  8418                           
  8419                           ;Setup_Heater_Temp.c: 96: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  8420  001F60  0E3C               	movlw	60
  8421  001F62  6E39               	movwf	drawtext@y,c
  8422  001F64  C04B  F03A         	movff	_txt,drawtext@_text
  8423  001F68  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  8424  001F6C  0E07               	movlw	7
  8425  001F6E  6E3D               	movwf	drawtext@color+1,c
  8426  001F70  683C               	setf	drawtext@color,c
  8427  001F72  0E00               	movlw	0
  8428  001F74  6E3F               	movwf	drawtext@bg+1,c
  8429  001F76  0E00               	movlw	0
  8430  001F78  6E3E               	movwf	drawtext@bg,c
  8431  001F7A  0E01               	movlw	1
  8432  001F7C  6E40               	movwf	drawtext@size,c
  8433  001F7E  0E0F               	movlw	15
  8434  001F80  EC2B  F00C         	call	_drawtext
  8435  001F84  0012               	return		;funcret
  8436  001F86                     __end_of_Initialize_Setup_Heater_Screen:
  8437                           	opt stack 0
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           postdec1	equ	0xFE5
  8445                           fsr1l	equ	0xFE1
  8446                           status	equ	0xFD8
  8447                           
  8448 ;; *************** function _Increase_Heater_Temp *****************
  8449 ;; Defined at:
  8450 ;;		line 55 in file "Setup_Heater_Temp.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;		None
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;		None
  8455 ;; Return value:  Size  Location     Type
  8456 ;;		None               void
  8457 ;; Registers used:
  8458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;Total ram usage:        0 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:   11
  8471 ;; This function calls:
  8472 ;;		_Update_Setup_Heater_Screen
  8473 ;; This function is called by:
  8474 ;;		_Do_Setup_Heater_Temp
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text40
  8479  003B04                     __ptext40:
  8480                           	opt stack 0
  8481  003B04                     _Increase_Heater_Temp:
  8482                           	opt stack 18
  8483                           
  8484                           ;Setup_Heater_Temp.c: 57: setup_heater_set_temp++;
  8485                           
  8486                           ;incstack = 0
  8487  003B04  2A68               	incf	_setup_heater_set_temp,f,c
  8488                           
  8489                           ;Setup_Heater_Temp.c: 58: if (setup_heater_set_temp > 110) setup_heater_set_temp = 110;
  8490  003B06  0E6E               	movlw	110
  8491  003B08  6468               	cpfsgt	_setup_heater_set_temp,c
  8492  003B0A  D003               	goto	l9339
  8493  003B0C  0E6E               	movlw	110
  8494  003B0E  6E68               	movwf	_setup_heater_set_temp,c
  8495  003B10  D000               	goto	l9339
  8496  003B12                     l9339:
  8497                           
  8498                           ;Setup_Heater_Temp.c: 59: Update_Setup_Heater_Screen();
  8499  003B12  ECE2  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  8500  003B16  0012               	return		;funcret
  8501  003B18                     __end_of_Increase_Heater_Temp:
  8502                           	opt stack 0
  8503                           tblptru	equ	0xFF8
  8504                           tblptrh	equ	0xFF7
  8505                           tblptrl	equ	0xFF6
  8506                           tablat	equ	0xFF5
  8507                           postinc0	equ	0xFEE
  8508                           wreg	equ	0xFE8
  8509                           postdec1	equ	0xFE5
  8510                           fsr1l	equ	0xFE1
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _Exit_Setup_Heater_Temp *****************
  8514 ;; Defined at:
  8515 ;;		line 69 in file "Setup_Heater_Temp.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;		None
  8520 ;; Return value:  Size  Location     Type
  8521 ;;		None               void
  8522 ;; Registers used:
  8523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;Total ram usage:        0 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:   11
  8536 ;; This function calls:
  8537 ;;		_DS3231_Read_Time
  8538 ;;		_Initialize_Screen
  8539 ;; This function is called by:
  8540 ;;		_Do_Setup_Heater_Temp
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           	psect	text41
  8545  003C18                     __ptext41:
  8546                           	opt stack 0
  8547  003C18                     _Exit_Setup_Heater_Temp:
  8548                           	opt stack 18
  8549                           
  8550                           ;Setup_Heater_Temp.c: 71: DS3231_Read_Time();
  8551                           
  8552                           ;incstack = 0
  8553  003C18  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  8554                           
  8555                           ;Setup_Heater_Temp.c: 72: Initialize_Screen();
  8556  003C1C  EC1E  F003         	call	_Initialize_Screen	;wreg free
  8557                           
  8558                           ;Setup_Heater_Temp.c: 73: In_Heater_Temp_Setup = 0;
  8559  003C20  0E00               	movlw	0
  8560  003C22  0100               	movlb	0	; () banked
  8561  003C24  6FF8               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8562                           
  8563                           ; BSR set to: 0
  8564  003C26  0012               	return		;funcret
  8565  003C28                     __end_of_Exit_Setup_Heater_Temp:
  8566                           	opt stack 0
  8567                           tblptru	equ	0xFF8
  8568                           tblptrh	equ	0xFF7
  8569                           tblptrl	equ	0xFF6
  8570                           tablat	equ	0xFF5
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1l	equ	0xFE1
  8575                           status	equ	0xFD8
  8576                           
  8577 ;; *************** function _Do_Save_New_Heater_Temp *****************
  8578 ;; Defined at:
  8579 ;;		line 76 in file "Setup_Heater_Temp.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;		None
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;		None
  8584 ;; Return value:  Size  Location     Type
  8585 ;;		None               void
  8586 ;; Registers used:
  8587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;Total ram usage:        0 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:   11
  8600 ;; This function calls:
  8601 ;;		_DS3231_Read_Time
  8602 ;;		_Initialize_Screen
  8603 ;; This function is called by:
  8604 ;;		_Do_Setup_Heater_Temp
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text42
  8609  003B18                     __ptext42:
  8610                           	opt stack 0
  8611  003B18                     _Do_Save_New_Heater_Temp:
  8612                           	opt stack 18
  8613                           
  8614                           ;Setup_Heater_Temp.c: 78: heater_set_temp = setup_heater_set_temp;
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;incstack = 0
  8618  003B18  C068  F06F         	movff	_setup_heater_set_temp,_heater_set_temp
  8619                           
  8620                           ;Setup_Heater_Temp.c: 79: DS3231_Read_Time();
  8621  003B1C  EC88  F018         	call	_DS3231_Read_Time	;wreg free
  8622                           
  8623                           ;Setup_Heater_Temp.c: 80: Initialize_Screen();
  8624  003B20  EC1E  F003         	call	_Initialize_Screen	;wreg free
  8625                           
  8626                           ;Setup_Heater_Temp.c: 81: In_Heater_Temp_Setup = 0;
  8627  003B24  0E00               	movlw	0
  8628  003B26  0100               	movlb	0	; () banked
  8629  003B28  6FF8               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8630                           
  8631                           ; BSR set to: 0
  8632  003B2A  0012               	return		;funcret
  8633  003B2C                     __end_of_Do_Save_New_Heater_Temp:
  8634                           	opt stack 0
  8635                           tblptru	equ	0xFF8
  8636                           tblptrh	equ	0xFF7
  8637                           tblptrl	equ	0xFF6
  8638                           tablat	equ	0xFF5
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1l	equ	0xFE1
  8643                           status	equ	0xFD8
  8644                           
  8645 ;; *************** function _Decrease_Heater_Temp *****************
  8646 ;; Defined at:
  8647 ;;		line 62 in file "Setup_Heater_Temp.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;		None
  8652 ;; Return value:  Size  Location     Type
  8653 ;;		None               void
  8654 ;; Registers used:
  8655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;Total ram usage:        0 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:   11
  8668 ;; This function calls:
  8669 ;;		_Update_Setup_Heater_Screen
  8670 ;; This function is called by:
  8671 ;;		_Do_Setup_Heater_Temp
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           	psect	text43
  8676  003B2C                     __ptext43:
  8677                           	opt stack 0
  8678  003B2C                     _Decrease_Heater_Temp:
  8679                           	opt stack 18
  8680                           
  8681                           ;Setup_Heater_Temp.c: 64: --setup_heater_set_temp;
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;incstack = 0
  8685  003B2C  0668               	decf	_setup_heater_set_temp,f,c
  8686                           
  8687                           ;Setup_Heater_Temp.c: 65: if (setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  8688  003B2E  0E32               	movlw	50
  8689  003B30  6068               	cpfslt	_setup_heater_set_temp,c
  8690  003B32  D003               	goto	l9331
  8691  003B34  0E32               	movlw	50
  8692  003B36  6E68               	movwf	_setup_heater_set_temp,c
  8693  003B38  D000               	goto	l9331
  8694  003B3A                     l9331:
  8695                           
  8696                           ;Setup_Heater_Temp.c: 66: Update_Setup_Heater_Screen();
  8697  003B3A  ECE2  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  8698  003B3E  0012               	return		;funcret
  8699  003B40                     __end_of_Decrease_Heater_Temp:
  8700                           	opt stack 0
  8701                           tblptru	equ	0xFF8
  8702                           tblptrh	equ	0xFF7
  8703                           tblptrl	equ	0xFF6
  8704                           tablat	equ	0xFF5
  8705                           postinc0	equ	0xFEE
  8706                           wreg	equ	0xFE8
  8707                           postdec1	equ	0xFE5
  8708                           fsr1l	equ	0xFE1
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _Update_Setup_Heater_Screen *****************
  8712 ;; Defined at:
  8713 ;;		line 99 in file "Setup_Heater_Temp.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;		None
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  dc_char3        1    4[BANK0 ] unsigned char 
  8718 ;;  dc_char2        1    3[BANK0 ] unsigned char 
  8719 ;;  dc_char1        1    2[BANK0 ] unsigned char 
  8720 ;; Return value:  Size  Location     Type
  8721 ;;		None               void
  8722 ;; Registers used:
  8723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;Total ram usage:        3 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:   10
  8736 ;; This function calls:
  8737 ;;		___awdiv
  8738 ;;		___awmod
  8739 ;;		_drawtext
  8740 ;; This function is called by:
  8741 ;;		_Do_Setup_Heater_Temp
  8742 ;;		_Increase_Heater_Temp
  8743 ;;		_Decrease_Heater_Temp
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           	psect	text44
  8748  0027C4                     __ptext44:
  8749                           	opt stack 0
  8750  0027C4                     _Update_Setup_Heater_Screen:
  8751                           	opt stack 19
  8752                           
  8753                           ;Setup_Heater_Temp.c: 101: char dc_char1 = setup_heater_set_temp/100;
  8754                           
  8755                           ;incstack = 0
  8756  0027C4  C068  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8757  0027C8  6A18               	clrf	___awdiv@dividend+1,c
  8758  0027CA  0E00               	movlw	0
  8759  0027CC  6E1A               	movwf	___awdiv@divisor+1,c
  8760  0027CE  0E64               	movlw	100
  8761  0027D0  6E19               	movwf	___awdiv@divisor,c
  8762  0027D2  ECCD  F014         	call	___awdiv	;wreg free
  8763  0027D6  5017               	movf	?___awdiv,w,c
  8764  0027D8  0100               	movlb	0	; () banked
  8765  0027DA  6FFD               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  8766                           
  8767                           ;Setup_Heater_Temp.c: 102: char dc_char2 = (setup_heater_set_temp/10)%10;
  8768  0027DC  0E00               	movlw	0
  8769  0027DE  6E1A               	movwf	___awdiv@divisor+1,c
  8770  0027E0  0E0A               	movlw	10
  8771  0027E2  6E19               	movwf	___awdiv@divisor,c
  8772  0027E4  C068  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8773  0027E8  6A18               	clrf	___awdiv@dividend+1,c
  8774  0027EA  ECCD  F014         	call	___awdiv	;wreg free
  8775  0027EE  C017  F03B         	movff	?___awdiv,___awmod@dividend
  8776  0027F2  C018  F03C         	movff	?___awdiv+1,___awmod@dividend+1
  8777  0027F6  0E00               	movlw	0
  8778  0027F8  6E3E               	movwf	___awmod@divisor+1,c
  8779  0027FA  0E0A               	movlw	10
  8780  0027FC  6E3D               	movwf	___awmod@divisor,c
  8781  0027FE  EC02  F017         	call	___awmod	;wreg free
  8782  002802  503B               	movf	?___awmod,w,c
  8783  002804  0100               	movlb	0	; () banked
  8784  002806  6FFE               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  8785                           
  8786                           ;Setup_Heater_Temp.c: 103: char dc_char3 = setup_heater_set_temp%10;
  8787  002808  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  8788  00280C  6A3C               	clrf	___awmod@dividend+1,c
  8789  00280E  0E00               	movlw	0
  8790  002810  6E3E               	movwf	___awmod@divisor+1,c
  8791  002812  0E0A               	movlw	10
  8792  002814  6E3D               	movwf	___awmod@divisor,c
  8793  002816  EC02  F017         	call	___awmod	;wreg free
  8794  00281A  503B               	movf	?___awmod,w,c
  8795  00281C  0100               	movlb	0	; () banked
  8796  00281E  6FFF               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;Setup_Heater_Temp.c: 104: setup_heater_set_text[0] = dc_char1 + '0';
  8800  002820  0100               	movlb	0	; () banked
  8801  002822  51FD               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  8802  002824  0F30               	addlw	48
  8803  002826  0100               	movlb	0	; () banked
  8804  002828  6FC8               	movwf	_setup_heater_set_text& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;Setup_Heater_Temp.c: 105: setup_heater_set_text[1] = dc_char2 + '0';
  8808  00282A  0100               	movlb	0	; () banked
  8809  00282C  51FE               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  8810  00282E  0F30               	addlw	48
  8811  002830  0100               	movlb	0	; () banked
  8812  002832  6FC9               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;Setup_Heater_Temp.c: 106: setup_heater_set_text[2] = dc_char3 + '0';
  8816  002834  0100               	movlb	0	; () banked
  8817  002836  51FF               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  8818  002838  0F30               	addlw	48
  8819  00283A  0100               	movlb	0	; () banked
  8820  00283C  6FCA               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;Setup_Heater_Temp.c: 107: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  8824  00283E  0E4A               	movlw	74
  8825  002840  6E39               	movwf	drawtext@y,c
  8826  002842  0EC8               	movlw	low _setup_heater_set_text
  8827  002844  6E3A               	movwf	drawtext@_text,c
  8828  002846  0E00               	movlw	high _setup_heater_set_text
  8829  002848  6E3B               	movwf	drawtext@_text+1,c
  8830  00284A  0EF8               	movlw	248
  8831  00284C  6E3D               	movwf	drawtext@color+1,c
  8832  00284E  0E00               	movlw	0
  8833  002850  6E3C               	movwf	drawtext@color,c
  8834  002852  0E00               	movlw	0
  8835  002854  6E3F               	movwf	drawtext@bg+1,c
  8836  002856  0E00               	movlw	0
  8837  002858  6E3E               	movwf	drawtext@bg,c
  8838  00285A  0E02               	movlw	2
  8839  00285C  6E40               	movwf	drawtext@size,c
  8840  00285E  0E28               	movlw	40
  8841  002860  EC2B  F00C         	call	_drawtext
  8842  002864  0012               	return		;funcret
  8843  002866                     __end_of_Update_Setup_Heater_Screen:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           postdec1	equ	0xFE5
  8852                           fsr1l	equ	0xFE1
  8853                           status	equ	0xFD8
  8854                           
  8855 ;; *************** function _Do_Setup_Alarm_Time *****************
  8856 ;; Defined at:
  8857 ;;		line 24 in file "Setup_Alarm_Time.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  2  385[None  ] int 
  8864 ;; Registers used:
  8865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;Total ram usage:        0 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:   12
  8878 ;; This function calls:
  8879 ;;		_DS3231_Read_Alarm_Time
  8880 ;;		_Decrease_Alarm_Time
  8881 ;;		_Do_Beep_Bad
  8882 ;;		_Do_Beep_Good
  8883 ;;		_Do_Save_New_Alarm_Time
  8884 ;;		_Exit_Setup_Alarm_Time
  8885 ;;		_Go_Next_Alarm_Field
  8886 ;;		_Go_Prev_Alarm_Field
  8887 ;;		_Increase_Alarm_Time
  8888 ;;		_Initialize_Setup_Alarm_Time_Screen
  8889 ;;		_Update_Setup_Alarm_Time_Screen
  8890 ;;		_bcd_2_dec
  8891 ;;		_check_for_button_input
  8892 ;; This function is called by:
  8893 ;;		_main
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text45
  8898  00264E                     __ptext45:
  8899                           	opt stack 0
  8900  00264E                     _Do_Setup_Alarm_Time:
  8901                           	opt stack 18
  8902                           
  8903                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8904                           
  8905                           ;incstack = 0
  8906  00264E  0E00               	movlw	0
  8907  002650  6E52               	movwf	_Select_Alarm_Field,c
  8908                           
  8909                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8910  002652  0E01               	movlw	1
  8911  002654  0100               	movlb	0	; () banked
  8912  002656  6FF7               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8916  002658  EC0F  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  8917                           
  8918                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8919  00265C  5058               	movf	_alarm_second,w,c
  8920  00265E  EC53  F01C         	call	_bcd_2_dec
  8921  002662  6E58               	movwf	_alarm_second,c
  8922                           
  8923                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8924  002664  5057               	movf	_alarm_minute,w,c
  8925  002666  EC53  F01C         	call	_bcd_2_dec
  8926  00266A  6E57               	movwf	_alarm_minute,c
  8927                           
  8928                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8929  00266C  5056               	movf	_alarm_hour,w,c
  8930  00266E  EC53  F01C         	call	_bcd_2_dec
  8931  002672  6E56               	movwf	_alarm_hour,c
  8932                           
  8933                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8934  002674  C058  F066         	movff	_alarm_second,_setup_alarm_second
  8935                           
  8936                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8937  002678  C057  F065         	movff	_alarm_minute,_setup_alarm_minute
  8938                           
  8939                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8940  00267C  C056  F064         	movff	_alarm_hour,_setup_alarm_hour
  8941                           
  8942                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8943  002680  ECC6  F00D         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8944                           
  8945                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8946  002684  EC20  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8947                           
  8948                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8949  002688  D03C               	goto	l9857
  8950  00268A                     l9821:
  8951                           
  8952                           ;Setup_Alarm_Time.c: 38: {
  8953                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8954  00268A  ECAA  F015         	call	_check_for_button_input	;wreg free
  8955  00268E  06E8               	decf	wreg,f,c
  8956  002690  A4D8               	btfss	status,2,c
  8957  002692  D037               	goto	l9857
  8958                           
  8959                           ;Setup_Alarm_Time.c: 40: {
  8960                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8961  002694  0E02               	movlw	2
  8962  002696  645E               	cpfsgt	_found,c
  8963  002698  D031               	goto	l9855
  8964  00269A  0E09               	movlw	9
  8965  00269C  605E               	cpfslt	_found,c
  8966  00269E  D02E               	goto	l9855
  8967                           
  8968                           ;Setup_Alarm_Time.c: 42: {
  8969                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8970  0026A0  EC2C  F01E         	call	_Do_Beep_Good	;wreg free
  8971                           
  8972                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8973  0026A4  0E03               	movlw	3
  8974  0026A6  185E               	xorwf	_found,w,c
  8975  0026A8  A4D8               	btfss	status,2,c
  8976  0026AA  D003               	goto	l9833
  8977  0026AC  EC49  F01D         	call	_Go_Prev_Alarm_Field	;wreg free
  8978  0026B0  D000               	goto	l9833
  8979  0026B2                     l9833:
  8980                           
  8981                           ;Setup_Alarm_Time.c: 45: if (found == 4) Go_Next_Alarm_Field();
  8982  0026B2  0E04               	movlw	4
  8983  0026B4  185E               	xorwf	_found,w,c
  8984  0026B6  A4D8               	btfss	status,2,c
  8985  0026B8  D003               	goto	l9837
  8986  0026BA  EC55  F01D         	call	_Go_Next_Alarm_Field	;wreg free
  8987  0026BE  D000               	goto	l9837
  8988  0026C0                     l9837:
  8989                           
  8990                           ;Setup_Alarm_Time.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  8991  0026C0  0E05               	movlw	5
  8992  0026C2  185E               	xorwf	_found,w,c
  8993  0026C4  A4D8               	btfss	status,2,c
  8994  0026C6  D003               	goto	l9841
  8995  0026C8  EC61  F01D         	call	_Do_Save_New_Alarm_Time	;wreg free
  8996  0026CC  D000               	goto	l9841
  8997  0026CE                     l9841:
  8998                           
  8999                           ;Setup_Alarm_Time.c: 47: if (found == 6) Decrease_Alarm_Time();
  9000  0026CE  0E06               	movlw	6
  9001  0026D0  185E               	xorwf	_found,w,c
  9002  0026D2  A4D8               	btfss	status,2,c
  9003  0026D4  D003               	goto	l9845
  9004  0026D6  ECC1  F019         	call	_Decrease_Alarm_Time	;wreg free
  9005  0026DA  D000               	goto	l9845
  9006  0026DC                     l9845:
  9007                           
  9008                           ;Setup_Alarm_Time.c: 48: if (found == 7) Increase_Alarm_Time();
  9009  0026DC  0E07               	movlw	7
  9010  0026DE  185E               	xorwf	_found,w,c
  9011  0026E0  A4D8               	btfss	status,2,c
  9012  0026E2  D003               	goto	l9849
  9013  0026E4  EC5B  F01A         	call	_Increase_Alarm_Time	;wreg free
  9014  0026E8  D000               	goto	l9849
  9015  0026EA                     l9849:
  9016                           
  9017                           ;Setup_Alarm_Time.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  9018  0026EA  0E08               	movlw	8
  9019  0026EC  185E               	xorwf	_found,w,c
  9020  0026EE  A4D8               	btfss	status,2,c
  9021  0026F0  D003               	goto	l9853
  9022  0026F2  EC14  F01E         	call	_Exit_Setup_Alarm_Time	;wreg free
  9023  0026F6  D000               	goto	l9853
  9024  0026F8                     l9853:
  9025                           
  9026                           ;Setup_Alarm_Time.c: 50: found = 0xff;
  9027  0026F8  685E               	setf	_found,c
  9028                           
  9029                           ;Setup_Alarm_Time.c: 51: }
  9030  0026FA  D003               	goto	l9857
  9031  0026FC                     l9855:
  9032                           
  9033                           ;Setup_Alarm_Time.c: 52: else
  9034                           ;Setup_Alarm_Time.c: 53: {
  9035                           ;Setup_Alarm_Time.c: 54: Do_Beep_Bad();
  9036  0026FC  EC33  F01E         	call	_Do_Beep_Bad	;wreg free
  9037  002700  D000               	goto	l9857
  9038  002702                     l9857:
  9039  002702  0100               	movlb	0	; () banked
  9040  002704  05F7               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  9041  002706  B4D8               	btfsc	status,2,c
  9042  002708  D7C0               	goto	l9821
  9043                           
  9044                           ; BSR set to: 0
  9045                           
  9046                           ; BSR set to: 0
  9047  00270A  0012               	return		;funcret
  9048  00270C                     __end_of_Do_Setup_Alarm_Time:
  9049                           	opt stack 0
  9050                           tblptru	equ	0xFF8
  9051                           tblptrh	equ	0xFF7
  9052                           tblptrl	equ	0xFF6
  9053                           tablat	equ	0xFF5
  9054                           postinc0	equ	0xFEE
  9055                           wreg	equ	0xFE8
  9056                           postdec1	equ	0xFE5
  9057                           fsr1l	equ	0xFE1
  9058                           status	equ	0xFD8
  9059                           
  9060 ;; *************** function _check_for_button_input *****************
  9061 ;; Defined at:
  9062 ;;		line 18 in file "utils.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  i               2   57[COMRAM] int 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  1    wreg      unsigned char 
  9069 ;; Registers used:
  9070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9080 ;;Total ram usage:        3 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    5
  9083 ;; This function calls:
  9084 ;;		_printf
  9085 ;; This function is called by:
  9086 ;;		_main
  9087 ;;		_Do_Setup_Alarm_Time
  9088 ;;		_Do_Setup_Heater_Temp
  9089 ;;		_Do_Setup_Time
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text46
  9094  002B54                     __ptext46:
  9095                           	opt stack 0
  9096  002B54                     _check_for_button_input:
  9097                           	opt stack 25
  9098                           
  9099                           ;utils.c: 20: if (nec_ok == 1)
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;incstack = 0
  9103  002B54  0100               	movlb	0	; () banked
  9104  002B56  05F2               	decf	_nec_ok& (0+255),w,b
  9105  002B58  0100               	movlb	0	; () banked
  9106  002B5A  11F3               	iorwf	(_nec_ok+1)& (0+255),w,b
  9107  002B5C  A4D8               	btfss	status,2,c
  9108  002B5E  D041               	goto	l1313
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;utils.c: 21: {
  9112                           ;utils.c: 22: nec_ok = 0;
  9113  002B60  0E00               	movlw	0
  9114  002B62  0100               	movlb	0	; () banked
  9115  002B64  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  9116  002B66  0E00               	movlw	0
  9117  002B68  6FF2               	movwf	_nec_ok& (0+255),b
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;utils.c: 24: INTCONbits.INT0IE = 1;
  9121  002B6A  88F2               	bsf	intcon,4,c	;volatile
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;utils.c: 25: INTCON2bits.INTEDG0 = 0;
  9125  002B6C  9CF1               	bcf	intcon2,6,c	;volatile
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;utils.c: 27: found = 0xff;
  9129  002B6E  685E               	setf	_found,c
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;utils.c: 28: printf("Nec_code1:%x\r\n ", Nec_code1);
  9133  002B70  0E4F               	movlw	low STR_36
  9134  002B72  6E1D               	movwf	printf@f,c
  9135  002B74  0EFF               	movlw	high STR_36
  9136  002B76  6E1E               	movwf	printf@f+1,c
  9137  002B78  C050  F01F         	movff	_Nec_code1,?_printf+2
  9138  002B7C  6A20               	clrf	?_printf+3,c
  9139  002B7E  ECDE  F004         	call	_printf	;wreg free
  9140                           
  9141                           ;utils.c: 29: for (int i=0; i < 21;i++)
  9142  002B82  0E00               	movlw	0
  9143  002B84  6E3B               	movwf	check_for_button_input@i+1,c
  9144  002B86  0E00               	movlw	0
  9145  002B88  6E3A               	movwf	check_for_button_input@i,c
  9146  002B8A                     l9173:
  9147  002B8A  BE3B               	btfsc	check_for_button_input@i+1,7,c
  9148  002B8C  D008               	goto	l9177
  9149  002B8E  503B               	movf	check_for_button_input@i+1,w,c
  9150  002B90  E11B               	bnz	l9187
  9151  002B92  0E15               	movlw	21
  9152  002B94  5C3A               	subwf	check_for_button_input@i,w,c
  9153  002B96  B0D8               	btfsc	status,0,c
  9154  002B98  D017               	goto	l9187
  9155  002B9A  D001               	goto	l9177
  9156  002B9C  D015               	goto	l9187
  9157  002B9E                     l9177:
  9158                           
  9159                           ;utils.c: 30: {
  9160                           ;utils.c: 31: if(Nec_code1 == array1[i])
  9161  002B9E  0E1F               	movlw	low _array1
  9162  002BA0  243A               	addwf	check_for_button_input@i,w,c
  9163  002BA2  6ED9               	movwf	fsr2l,c
  9164  002BA4  0E01               	movlw	high _array1
  9165  002BA6  203B               	addwfc	check_for_button_input@i+1,w,c
  9166  002BA8  6EDA               	movwf	fsr2h,c
  9167  002BAA  5050               	movf	_Nec_code1,w,c
  9168  002BAC  18DE               	xorwf	postinc2,w,c
  9169  002BAE  A4D8               	btfss	status,2,c
  9170  002BB0  D007               	goto	l9183
  9171                           
  9172                           ;utils.c: 32: {
  9173                           ;utils.c: 33: found = i;
  9174  002BB2  C03A  F05E         	movff	check_for_button_input@i,_found
  9175                           
  9176                           ;utils.c: 34: i = 21;
  9177  002BB6  0E00               	movlw	0
  9178  002BB8  6E3B               	movwf	check_for_button_input@i+1,c
  9179  002BBA  0E15               	movlw	21
  9180  002BBC  6E3A               	movwf	check_for_button_input@i,c
  9181  002BBE  D000               	goto	l9183
  9182  002BC0                     l9183:
  9183  002BC0  4A3A               	infsnz	check_for_button_input@i,f,c
  9184  002BC2  2A3B               	incf	check_for_button_input@i+1,f,c
  9185  002BC4  D7E2               	goto	l9173
  9186  002BC6  D000               	goto	l9187
  9187  002BC8                     l9187:
  9188                           
  9189                           ;utils.c: 35: }
  9190                           ;utils.c: 36: }
  9191                           ;utils.c: 38: if (found == 0xff)
  9192  002BC8  285E               	incf	_found,w,c
  9193  002BCA  A4D8               	btfss	status,2,c
  9194  002BCC  D008               	goto	l9197
  9195                           
  9196                           ;utils.c: 39: {
  9197                           ;utils.c: 40: printf ("Cannot find button \r\n");
  9198  002BCE  0EC0               	movlw	low STR_37
  9199  002BD0  6E1D               	movwf	printf@f,c
  9200  002BD2  0EFE               	movlw	high STR_37
  9201  002BD4  6E1E               	movwf	printf@f+1,c
  9202  002BD6  ECDE  F004         	call	_printf	;wreg free
  9203                           
  9204                           ;utils.c: 41: return (0);
  9205  002BDA  0E00               	movlw	0
  9206                           
  9207                           ;utils.c: 42: }
  9208  002BDC  D002               	goto	l1313
  9209  002BDE                     l9197:
  9210                           
  9211                           ;utils.c: 43: else return (1);
  9212  002BDE  0E01               	movlw	1
  9213  002BE0  D000               	goto	l1313
  9214  002BE2                     l1313:
  9215  002BE2  0012               	return		;funcret
  9216  002BE4                     __end_of_check_for_button_input:
  9217                           	opt stack 0
  9218                           tblptru	equ	0xFF8
  9219                           tblptrh	equ	0xFF7
  9220                           tblptrl	equ	0xFF6
  9221                           tablat	equ	0xFF5
  9222                           intcon	equ	0xFF2
  9223                           intcon2	equ	0xFF1
  9224                           postinc0	equ	0xFEE
  9225                           wreg	equ	0xFE8
  9226                           postdec1	equ	0xFE5
  9227                           fsr1l	equ	0xFE1
  9228                           postinc2	equ	0xFDE
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _bcd_2_dec *****************
  9234 ;; Defined at:
  9235 ;;		line 47 in file "utils.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;  bcd             1    wreg     unsigned char 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  bcd             1   20[COMRAM] unsigned char 
  9240 ;;  dec             2   18[COMRAM] int 
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      unsigned char 
  9243 ;; Registers used:
  9244 ;;		wreg, status,2, status,0, prodl, prodh
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;Total ram usage:        5 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    3
  9257 ;; This function calls:
  9258 ;;		Nothing
  9259 ;; This function is called by:
  9260 ;;		_Do_Setup_Alarm_Time
  9261 ;;		_Do_Setup_Time
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text47
  9266  0038A6                     __ptext47:
  9267                           	opt stack 0
  9268  0038A6                     _bcd_2_dec:
  9269                           	opt stack 26
  9270                           
  9271                           ;incstack = 0
  9272                           ;bcd_2_dec@bcd stored from wreg
  9273  0038A6  6E15               	movwf	bcd_2_dec@bcd,c
  9274                           
  9275                           ;utils.c: 49: int dec;
  9276                           ;utils.c: 50: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  9277  0038A8  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  9278  0038AC  0E0F               	movlw	15
  9279  0038AE  1611               	andwf	??_bcd_2_dec,f,c
  9280  0038B0  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  9281  0038B4  3A12               	swapf	??_bcd_2_dec+1,f,c
  9282  0038B6  0E0F               	movlw	15
  9283  0038B8  1612               	andwf	??_bcd_2_dec+1,f,c
  9284  0038BA  5012               	movf	??_bcd_2_dec+1,w,c
  9285  0038BC  0D0A               	mullw	10
  9286  0038BE  5011               	movf	??_bcd_2_dec,w,c
  9287  0038C0  24F3               	addwf	prodl,w,c
  9288  0038C2  6E13               	movwf	bcd_2_dec@dec,c
  9289  0038C4  0E00               	movlw	0
  9290  0038C6  20F4               	addwfc	prodh,w,c
  9291  0038C8  6E14               	movwf	bcd_2_dec@dec+1,c
  9292                           
  9293                           ;utils.c: 51: return dec;
  9294  0038CA  5013               	movf	bcd_2_dec@dec,w,c
  9295  0038CC  D000               	goto	l1317
  9296  0038CE                     l1317:
  9297  0038CE  0012               	return		;funcret
  9298  0038D0                     __end_of_bcd_2_dec:
  9299                           	opt stack 0
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           intcon2	equ	0xFF1
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           postdec1	equ	0xFE5
  9311                           fsr1l	equ	0xFE1
  9312                           postinc2	equ	0xFDE
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  9318 ;; Defined at:
  9319 ;;		line 139 in file "Setup_Alarm_Time.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;		None               void
  9326 ;; Registers used:
  9327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        0 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:   10
  9340 ;; This function calls:
  9341 ;;		_drawtext
  9342 ;;		_fillRect
  9343 ;;		_fillScreen
  9344 ;;		_strcpy
  9345 ;; This function is called by:
  9346 ;;		_Do_Setup_Alarm_Time
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           	psect	text48
  9351  001B8C                     __ptext48:
  9352                           	opt stack 0
  9353  001B8C                     _Initialize_Setup_Alarm_Time_Screen:
  9354                           	opt stack 19
  9355                           
  9356                           ;Setup_Alarm_Time.c: 141: fillScreen(0x0000);
  9357                           
  9358                           ;incstack = 0
  9359  001B8C  0E00               	movlw	0
  9360  001B8E  6E25               	movwf	fillScreen@color+1,c
  9361  001B90  0E00               	movlw	0
  9362  001B92  6E24               	movwf	fillScreen@color,c
  9363  001B94  EC16  F01D         	call	_fillScreen	;wreg free
  9364                           
  9365                           ;Setup_Alarm_Time.c: 143: strcpy(txt, "ECE3301L F'21 Final");
  9366  001B98  C04B  F011         	movff	_txt,strcpy@to
  9367  001B9C  C04C  F012         	movff	_txt+1,strcpy@to+1
  9368  001BA0  0E16               	movlw	low STR_23
  9369  001BA2  6E13               	movwf	strcpy@from,c
  9370  001BA4  0EFF               	movlw	high STR_23
  9371  001BA6  6E14               	movwf	strcpy@from+1,c
  9372  001BA8  ECF4  F01B         	call	_strcpy	;wreg free
  9373                           
  9374                           ;Setup_Alarm_Time.c: 144: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9375  001BAC  0E01               	movlw	1
  9376  001BAE  6E39               	movwf	drawtext@y,c
  9377  001BB0  C04B  F03A         	movff	_txt,drawtext@_text
  9378  001BB4  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  9379  001BB8  0EFF               	movlw	255
  9380  001BBA  6E3D               	movwf	drawtext@color+1,c
  9381  001BBC  683C               	setf	drawtext@color,c
  9382  001BBE  0E00               	movlw	0
  9383  001BC0  6E3F               	movwf	drawtext@bg+1,c
  9384  001BC2  0E00               	movlw	0
  9385  001BC4  6E3E               	movwf	drawtext@bg,c
  9386  001BC6  0E01               	movlw	1
  9387  001BC8  6E40               	movwf	drawtext@size,c
  9388  001BCA  0E01               	movlw	1
  9389  001BCC  EC2B  F00C         	call	_drawtext
  9390                           
  9391                           ;Setup_Alarm_Time.c: 147: strcpy(txt, "  Alarm");
  9392  001BD0  C04B  F011         	movff	_txt,strcpy@to
  9393  001BD4  C04C  F012         	movff	_txt+1,strcpy@to+1
  9394  001BD8  0EC9               	movlw	low STR_24
  9395  001BDA  6E13               	movwf	strcpy@from,c
  9396  001BDC  0EFF               	movlw	high STR_24
  9397  001BDE  6E14               	movwf	strcpy@from+1,c
  9398  001BE0  ECF4  F01B         	call	_strcpy	;wreg free
  9399                           
  9400                           ;Setup_Alarm_Time.c: 148: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  9401  001BE4  0E0B               	movlw	11
  9402  001BE6  6E39               	movwf	drawtext@y,c
  9403  001BE8  C04B  F03A         	movff	_txt,drawtext@_text
  9404  001BEC  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  9405  001BF0  0EF8               	movlw	248
  9406  001BF2  6E3D               	movwf	drawtext@color+1,c
  9407  001BF4  0E1F               	movlw	31
  9408  001BF6  6E3C               	movwf	drawtext@color,c
  9409  001BF8  0E00               	movlw	0
  9410  001BFA  6E3F               	movwf	drawtext@bg+1,c
  9411  001BFC  0E00               	movlw	0
  9412  001BFE  6E3E               	movwf	drawtext@bg,c
  9413  001C00  0E02               	movlw	2
  9414  001C02  6E40               	movwf	drawtext@size,c
  9415  001C04  0E06               	movlw	6
  9416  001C06  EC2B  F00C         	call	_drawtext
  9417                           
  9418                           ;Setup_Alarm_Time.c: 149: strcpy(txt, "  Setup");
  9419  001C0A  C04B  F011         	movff	_txt,strcpy@to
  9420  001C0E  C04C  F012         	movff	_txt+1,strcpy@to+1
  9421  001C12  0ED1               	movlw	low STR_25
  9422  001C14  6E13               	movwf	strcpy@from,c
  9423  001C16  0EFF               	movlw	high STR_25
  9424  001C18  6E14               	movwf	strcpy@from+1,c
  9425  001C1A  ECF4  F01B         	call	_strcpy	;wreg free
  9426                           
  9427                           ;Setup_Alarm_Time.c: 150: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  9428  001C1E  0E1A               	movlw	26
  9429  001C20  6E39               	movwf	drawtext@y,c
  9430  001C22  C04B  F03A         	movff	_txt,drawtext@_text
  9431  001C26  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  9432  001C2A  0EF8               	movlw	248
  9433  001C2C  6E3D               	movwf	drawtext@color+1,c
  9434  001C2E  0E1F               	movlw	31
  9435  001C30  6E3C               	movwf	drawtext@color,c
  9436  001C32  0E00               	movlw	0
  9437  001C34  6E3F               	movwf	drawtext@bg+1,c
  9438  001C36  0E00               	movlw	0
  9439  001C38  6E3E               	movwf	drawtext@bg,c
  9440  001C3A  0E02               	movlw	2
  9441  001C3C  6E40               	movwf	drawtext@size,c
  9442  001C3E  0E06               	movlw	6
  9443  001C40  EC2B  F00C         	call	_drawtext
  9444                           
  9445                           ;Setup_Alarm_Time.c: 152: strcpy(txt, "Time");
  9446  001C44  C04B  F011         	movff	_txt,strcpy@to
  9447  001C48  C04C  F012         	movff	_txt+1,strcpy@to+1
  9448  001C4C  0EB1               	movlw	low (STR_11+6)
  9449  001C4E  6E13               	movwf	strcpy@from,c
  9450  001C50  0EFF               	movlw	high (STR_11+6)
  9451  001C52  6E14               	movwf	strcpy@from+1,c
  9452  001C54  ECF4  F01B         	call	_strcpy	;wreg free
  9453                           
  9454                           ;Setup_Alarm_Time.c: 153: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  9455  001C58  0E28               	movlw	40
  9456  001C5A  6E39               	movwf	drawtext@y,c
  9457  001C5C  C04B  F03A         	movff	_txt,drawtext@_text
  9458  001C60  C04C  F03B         	movff	_txt+1,drawtext@_text+1
  9459  001C64  0E00               	movlw	0
  9460  001C66  6E3D               	movwf	drawtext@color+1,c
  9461  001C68  0E1F               	movlw	31
  9462  001C6A  6E3C               	movwf	drawtext@color,c
  9463  001C6C  0E00               	movlw	0
  9464  001C6E  6E3F               	movwf	drawtext@bg+1,c
  9465  001C70  0E00               	movlw	0
  9466  001C72  6E3E               	movwf	drawtext@bg,c
  9467  001C74  0E01               	movlw	1
  9468  001C76  6E40               	movwf	drawtext@size,c
  9469  001C78  0E32               	movlw	50
  9470  001C7A  EC2B  F00C         	call	_drawtext
  9471                           
  9472                           ;Setup_Alarm_Time.c: 154: fillRect(15-1, 52+16, 25,2,0x07FF);
  9473  001C7E  0E44               	movlw	68
  9474  001C80  6E23               	movwf	fillRect@y,c
  9475  001C82  0E19               	movlw	25
  9476  001C84  6E24               	movwf	fillRect@w,c
  9477  001C86  0E02               	movlw	2
  9478  001C88  6E25               	movwf	fillRect@h,c
  9479  001C8A  0E07               	movlw	7
  9480  001C8C  6E27               	movwf	fillRect@color+1,c
  9481  001C8E  6826               	setf	fillRect@color,c
  9482  001C90  0E0E               	movlw	14
  9483  001C92  EC80  F01A         	call	_fillRect
  9484  001C96  0012               	return		;funcret
  9485  001C98                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  9486                           	opt stack 0
  9487                           tblptru	equ	0xFF8
  9488                           tblptrh	equ	0xFF7
  9489                           tblptrl	equ	0xFF6
  9490                           tablat	equ	0xFF5
  9491                           prodh	equ	0xFF4
  9492                           prodl	equ	0xFF3
  9493                           intcon	equ	0xFF2
  9494                           intcon2	equ	0xFF1
  9495                           postinc0	equ	0xFEE
  9496                           wreg	equ	0xFE8
  9497                           postdec1	equ	0xFE5
  9498                           fsr1l	equ	0xFE1
  9499                           postinc2	equ	0xFDE
  9500                           fsr2h	equ	0xFDA
  9501                           fsr2l	equ	0xFD9
  9502                           status	equ	0xFD8
  9503                           
  9504 ;; *************** function _Increase_Alarm_Time *****************
  9505 ;; Defined at:
  9506 ;;		line 60 in file "Setup_Alarm_Time.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;		None
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;		None
  9511 ;; Return value:  Size  Location     Type
  9512 ;;		None               void
  9513 ;; Registers used:
  9514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;Total ram usage:        0 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:   11
  9527 ;; This function calls:
  9528 ;;		_Update_Setup_Alarm_Time_Screen
  9529 ;; This function is called by:
  9530 ;;		_Do_Setup_Alarm_Time
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text49
  9535  0034B6                     __ptext49:
  9536                           	opt stack 0
  9537  0034B6                     _Increase_Alarm_Time:
  9538                           	opt stack 18
  9539                           
  9540                           ;Setup_Alarm_Time.c: 62: switch (Select_Alarm_Field)
  9541                           
  9542                           ;incstack = 0
  9543  0034B6  D016               	goto	l9289
  9544  0034B8                     l9269:
  9545                           
  9546                           ;Setup_Alarm_Time.c: 65: setup_alarm_hour++;
  9547  0034B8  2A64               	incf	_setup_alarm_hour,f,c
  9548                           
  9549                           ;Setup_Alarm_Time.c: 66: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  9550  0034BA  0E18               	movlw	24
  9551  0034BC  1864               	xorwf	_setup_alarm_hour,w,c
  9552  0034BE  A4D8               	btfss	status,2,c
  9553  0034C0  D01C               	goto	l9291
  9554  0034C2  0E00               	movlw	0
  9555  0034C4  6E64               	movwf	_setup_alarm_hour,c
  9556                           
  9557                           ;Setup_Alarm_Time.c: 67: break;
  9558  0034C6  D019               	goto	l9291
  9559  0034C8                     l9275:
  9560                           
  9561                           ;Setup_Alarm_Time.c: 69: setup_alarm_minute++;
  9562  0034C8  2A65               	incf	_setup_alarm_minute,f,c
  9563                           
  9564                           ;Setup_Alarm_Time.c: 70: if (setup_alarm_minute > 59) setup_alarm_minute = 0;
  9565  0034CA  0E3B               	movlw	59
  9566  0034CC  6465               	cpfsgt	_setup_alarm_minute,c
  9567  0034CE  D015               	goto	l9291
  9568  0034D0  0E00               	movlw	0
  9569  0034D2  6E65               	movwf	_setup_alarm_minute,c
  9570                           
  9571                           ;Setup_Alarm_Time.c: 71: break;
  9572  0034D4  D012               	goto	l9291
  9573  0034D6                     l9281:
  9574                           
  9575                           ;Setup_Alarm_Time.c: 73: setup_alarm_second++;
  9576  0034D6  2A66               	incf	_setup_alarm_second,f,c
  9577                           
  9578                           ;Setup_Alarm_Time.c: 74: if (setup_alarm_second > 59) setup_alarm_second = 0;
  9579  0034D8  0E3B               	movlw	59
  9580  0034DA  6466               	cpfsgt	_setup_alarm_second,c
  9581  0034DC  D00E               	goto	l9291
  9582  0034DE  0E00               	movlw	0
  9583  0034E0  6E66               	movwf	_setup_alarm_second,c
  9584                           
  9585                           ;Setup_Alarm_Time.c: 78: }
  9586                           
  9587                           ;Setup_Alarm_Time.c: 77: break;
  9588                           
  9589                           ;Setup_Alarm_Time.c: 76: default:
  9590                           
  9591                           ;Setup_Alarm_Time.c: 75: break;
  9592  0034E2  D00B               	goto	l9291
  9593  0034E4                     l9289:
  9594  0034E4  5052               	movf	_Select_Alarm_Field,w,c
  9595                           
  9596                           ; Switch size 1, requested type "space"
  9597                           ; Number of cases is 3, Range of values is 0 to 2
  9598                           ; switch strategies available:
  9599                           ; Name         Instructions Cycles
  9600                           ; simple_byte           10     6 (average)
  9601                           ;	Chosen strategy is simple_byte
  9602  0034E6  0A00               	xorlw	0	; case 0
  9603  0034E8  B4D8               	btfsc	status,2,c
  9604  0034EA  D7E6               	goto	l9269
  9605  0034EC  0A01               	xorlw	1	; case 1
  9606  0034EE  B4D8               	btfsc	status,2,c
  9607  0034F0  D7EB               	goto	l9275
  9608  0034F2  0A03               	xorlw	3	; case 2
  9609  0034F4  B4D8               	btfsc	status,2,c
  9610  0034F6  D7EF               	goto	l9281
  9611  0034F8  D000               	goto	l9291
  9612  0034FA                     l9291:
  9613                           
  9614                           ;Setup_Alarm_Time.c: 79: Update_Setup_Alarm_Time_Screen();
  9615  0034FA  EC20  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9616  0034FE  0012               	return		;funcret
  9617  003500                     __end_of_Increase_Alarm_Time:
  9618                           	opt stack 0
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           intcon2	equ	0xFF1
  9627                           postinc0	equ	0xFEE
  9628                           wreg	equ	0xFE8
  9629                           postdec1	equ	0xFE5
  9630                           fsr1l	equ	0xFE1
  9631                           postinc2	equ	0xFDE
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function _Go_Prev_Alarm_Field *****************
  9637 ;; Defined at:
  9638 ;;		line 116 in file "Setup_Alarm_Time.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    9
  9659 ;; This function calls:
  9660 ;;		_Update_Setup_Screen_Cursor_Backward
  9661 ;; This function is called by:
  9662 ;;		_Do_Setup_Alarm_Time
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text50
  9667  003A92                     __ptext50:
  9668                           	opt stack 0
  9669  003A92                     _Go_Prev_Alarm_Field:
  9670                           	opt stack 20
  9671                           
  9672                           ;Setup_Alarm_Time.c: 118: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9673                           
  9674                           ;incstack = 0
  9675  003A92  5052               	movf	_Select_Alarm_Field,w,c
  9676  003A94  A4D8               	btfss	status,2,c
  9677  003A96  D003               	goto	l9223
  9678  003A98  0E02               	movlw	2
  9679  003A9A  6E52               	movwf	_Select_Alarm_Field,c
  9680  003A9C  D002               	goto	l9225
  9681  003A9E                     l9223:
  9682                           
  9683                           ;Setup_Alarm_Time.c: 119: else Select_Alarm_Field--;
  9684  003A9E  0652               	decf	_Select_Alarm_Field,f,c
  9685  003AA0  D000               	goto	l9225
  9686  003AA2                     l9225:
  9687                           
  9688                           ;Setup_Alarm_Time.c: 120: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9689  003AA2  5052               	movf	_Select_Alarm_Field,w,c
  9690  003AA4  EC54  F008         	call	_Update_Setup_Screen_Cursor_Backward
  9691  003AA8  0012               	return		;funcret
  9692  003AAA                     __end_of_Go_Prev_Alarm_Field:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           postinc0	equ	0xFEE
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           postinc2	equ	0xFDE
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9712 ;; Defined at:
  9713 ;;		line 254 in file "Setup_Time.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  field           1    wreg     unsigned char 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  field           1   45[COMRAM] unsigned char 
  9718 ;;  xinc            1   47[COMRAM] unsigned char 
  9719 ;;  yinc            1   46[COMRAM] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;		None               void
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;Total ram usage:        3 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    8
  9736 ;; This function calls:
  9737 ;;		_fillRect
  9738 ;; This function is called by:
  9739 ;;		_Go_Prev_Alarm_Field
  9740 ;;		_Go_Prev_Field
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text51
  9745  0010A8                     __ptext51:
  9746                           	opt stack 0
  9747  0010A8                     _Update_Setup_Screen_Cursor_Backward:
  9748                           	opt stack 20
  9749                           
  9750                           ;incstack = 0
  9751                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9752  0010A8  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9753                           
  9754                           ;Setup_Time.c: 256: char xinc = 36;
  9755  0010AA  0E24               	movlw	36
  9756  0010AC  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9757                           
  9758                           ;Setup_Time.c: 257: char yinc = 30;
  9759  0010AE  0E1E               	movlw	30
  9760  0010B0  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9761                           
  9762                           ;Setup_Time.c: 258: switch (field)
  9763  0010B2  D0BF               	goto	l9063
  9764  0010B4                     l9041:
  9765                           
  9766                           ;Setup_Time.c: 261: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9767  0010B4  0E44               	movlw	68
  9768  0010B6  6E23               	movwf	fillRect@y,c
  9769  0010B8  0E19               	movlw	25
  9770  0010BA  6E24               	movwf	fillRect@w,c
  9771  0010BC  0E02               	movlw	2
  9772  0010BE  6E25               	movwf	fillRect@h,c
  9773  0010C0  0E00               	movlw	0
  9774  0010C2  6E27               	movwf	fillRect@color+1,c
  9775  0010C4  0E00               	movlw	0
  9776  0010C6  6E26               	movwf	fillRect@color,c
  9777  0010C8  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9778  0010CA  0F0E               	addlw	14
  9779  0010CC  EC80  F01A         	call	_fillRect
  9780                           
  9781                           ;Setup_Time.c: 262: fillRect(15-1, 52+16, 25,2,0x07FF);
  9782  0010D0  0E44               	movlw	68
  9783  0010D2  6E23               	movwf	fillRect@y,c
  9784  0010D4  0E19               	movlw	25
  9785  0010D6  6E24               	movwf	fillRect@w,c
  9786  0010D8  0E02               	movlw	2
  9787  0010DA  6E25               	movwf	fillRect@h,c
  9788  0010DC  0E07               	movlw	7
  9789  0010DE  6E27               	movwf	fillRect@color+1,c
  9790  0010E0  6826               	setf	fillRect@color,c
  9791  0010E2  0E0E               	movlw	14
  9792  0010E4  EC80  F01A         	call	_fillRect
  9793                           
  9794                           ;Setup_Time.c: 263: break;
  9795  0010E8  D0B8               	goto	l1249
  9796  0010EA                     l9043:
  9797                           
  9798                           ;Setup_Time.c: 266: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9799  0010EA  0E44               	movlw	68
  9800  0010EC  6E23               	movwf	fillRect@y,c
  9801  0010EE  0E19               	movlw	25
  9802  0010F0  6E24               	movwf	fillRect@w,c
  9803  0010F2  0E02               	movlw	2
  9804  0010F4  6E25               	movwf	fillRect@h,c
  9805  0010F6  0E00               	movlw	0
  9806  0010F8  6E27               	movwf	fillRect@color+1,c
  9807  0010FA  0E00               	movlw	0
  9808  0010FC  6E26               	movwf	fillRect@color,c
  9809  0010FE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9810  001100  0D02               	mullw	2
  9811  001102  50F3               	movf	prodl,w,c
  9812  001104  0F0E               	addlw	14
  9813  001106  EC80  F01A         	call	_fillRect
  9814                           
  9815                           ;Setup_Time.c: 267: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9816  00110A  0E44               	movlw	68
  9817  00110C  6E23               	movwf	fillRect@y,c
  9818  00110E  0E19               	movlw	25
  9819  001110  6E24               	movwf	fillRect@w,c
  9820  001112  0E02               	movlw	2
  9821  001114  6E25               	movwf	fillRect@h,c
  9822  001116  0E07               	movlw	7
  9823  001118  6E27               	movwf	fillRect@color+1,c
  9824  00111A  6826               	setf	fillRect@color,c
  9825  00111C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9826  00111E  0F0E               	addlw	14
  9827  001120  EC80  F01A         	call	_fillRect
  9828                           
  9829                           ;Setup_Time.c: 268: break;
  9830  001124  D09A               	goto	l1249
  9831  001126                     l9047:
  9832                           
  9833                           ;Setup_Time.c: 271: fillRect(15-1, 52+16, 25,2,0x0000);
  9834  001126  0E44               	movlw	68
  9835  001128  6E23               	movwf	fillRect@y,c
  9836  00112A  0E19               	movlw	25
  9837  00112C  6E24               	movwf	fillRect@w,c
  9838  00112E  0E02               	movlw	2
  9839  001130  6E25               	movwf	fillRect@h,c
  9840  001132  0E00               	movlw	0
  9841  001134  6E27               	movwf	fillRect@color+1,c
  9842  001136  0E00               	movlw	0
  9843  001138  6E26               	movwf	fillRect@color,c
  9844  00113A  0E0E               	movlw	14
  9845  00113C  EC80  F01A         	call	_fillRect
  9846                           
  9847                           ;Setup_Time.c: 272: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9848  001140  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9849  001142  0F44               	addlw	68
  9850  001144  6E23               	movwf	fillRect@y,c
  9851  001146  0E19               	movlw	25
  9852  001148  6E24               	movwf	fillRect@w,c
  9853  00114A  0E02               	movlw	2
  9854  00114C  6E25               	movwf	fillRect@h,c
  9855  00114E  0E00               	movlw	0
  9856  001150  6E27               	movwf	fillRect@color+1,c
  9857  001152  0E00               	movlw	0
  9858  001154  6E26               	movwf	fillRect@color,c
  9859  001156  0E0E               	movlw	14
  9860  001158  EC80  F01A         	call	_fillRect
  9861                           
  9862                           ;Setup_Time.c: 273: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9863  00115C  0E44               	movlw	68
  9864  00115E  6E23               	movwf	fillRect@y,c
  9865  001160  0E19               	movlw	25
  9866  001162  6E24               	movwf	fillRect@w,c
  9867  001164  0E02               	movlw	2
  9868  001166  6E25               	movwf	fillRect@h,c
  9869  001168  0E07               	movlw	7
  9870  00116A  6E27               	movwf	fillRect@color+1,c
  9871  00116C  6826               	setf	fillRect@color,c
  9872  00116E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9873  001170  0D02               	mullw	2
  9874  001172  50F3               	movf	prodl,w,c
  9875  001174  0F0E               	addlw	14
  9876  001176  EC80  F01A         	call	_fillRect
  9877                           
  9878                           ;Setup_Time.c: 274: break;
  9879  00117A  D06F               	goto	l1249
  9880  00117C                     l9051:
  9881                           
  9882                           ;Setup_Time.c: 277: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9883  00117C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9884  00117E  0F44               	addlw	68
  9885  001180  6E23               	movwf	fillRect@y,c
  9886  001182  0E19               	movlw	25
  9887  001184  6E24               	movwf	fillRect@w,c
  9888  001186  0E02               	movlw	2
  9889  001188  6E25               	movwf	fillRect@h,c
  9890  00118A  0E00               	movlw	0
  9891  00118C  6E27               	movwf	fillRect@color+1,c
  9892  00118E  0E00               	movlw	0
  9893  001190  6E26               	movwf	fillRect@color,c
  9894  001192  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9895  001194  0F0E               	addlw	14
  9896  001196  EC80  F01A         	call	_fillRect
  9897                           
  9898                           ;Setup_Time.c: 278: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9899  00119A  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9900  00119C  0F44               	addlw	68
  9901  00119E  6E23               	movwf	fillRect@y,c
  9902  0011A0  0E19               	movlw	25
  9903  0011A2  6E24               	movwf	fillRect@w,c
  9904  0011A4  0E02               	movlw	2
  9905  0011A6  6E25               	movwf	fillRect@h,c
  9906  0011A8  0E07               	movlw	7
  9907  0011AA  6E27               	movwf	fillRect@color+1,c
  9908  0011AC  6826               	setf	fillRect@color,c
  9909  0011AE  0E0E               	movlw	14
  9910  0011B0  EC80  F01A         	call	_fillRect
  9911                           
  9912                           ;Setup_Time.c: 279: break;
  9913  0011B4  D052               	goto	l1249
  9914  0011B6                     l9053:
  9915                           
  9916                           ;Setup_Time.c: 282: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9917  0011B6  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9918  0011B8  0F44               	addlw	68
  9919  0011BA  6E23               	movwf	fillRect@y,c
  9920  0011BC  0E19               	movlw	25
  9921  0011BE  6E24               	movwf	fillRect@w,c
  9922  0011C0  0E02               	movlw	2
  9923  0011C2  6E25               	movwf	fillRect@h,c
  9924  0011C4  0E00               	movlw	0
  9925  0011C6  6E27               	movwf	fillRect@color+1,c
  9926  0011C8  0E00               	movlw	0
  9927  0011CA  6E26               	movwf	fillRect@color,c
  9928  0011CC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9929  0011CE  0D02               	mullw	2
  9930  0011D0  50F3               	movf	prodl,w,c
  9931  0011D2  0F0E               	addlw	14
  9932  0011D4  EC80  F01A         	call	_fillRect
  9933                           
  9934                           ;Setup_Time.c: 283: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9935  0011D8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9936  0011DA  0F44               	addlw	68
  9937  0011DC  6E23               	movwf	fillRect@y,c
  9938  0011DE  0E19               	movlw	25
  9939  0011E0  6E24               	movwf	fillRect@w,c
  9940  0011E2  0E02               	movlw	2
  9941  0011E4  6E25               	movwf	fillRect@h,c
  9942  0011E6  0E07               	movlw	7
  9943  0011E8  6E27               	movwf	fillRect@color+1,c
  9944  0011EA  6826               	setf	fillRect@color,c
  9945  0011EC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9946  0011EE  0F0E               	addlw	14
  9947  0011F0  EC80  F01A         	call	_fillRect
  9948                           
  9949                           ;Setup_Time.c: 284: break;
  9950  0011F4  D032               	goto	l1249
  9951  0011F6                     l9057:
  9952                           
  9953                           ;Setup_Time.c: 287: fillRect(15-1, 52+16, 25,2,0x0000);
  9954  0011F6  0E44               	movlw	68
  9955  0011F8  6E23               	movwf	fillRect@y,c
  9956  0011FA  0E19               	movlw	25
  9957  0011FC  6E24               	movwf	fillRect@w,c
  9958  0011FE  0E02               	movlw	2
  9959  001200  6E25               	movwf	fillRect@h,c
  9960  001202  0E00               	movlw	0
  9961  001204  6E27               	movwf	fillRect@color+1,c
  9962  001206  0E00               	movlw	0
  9963  001208  6E26               	movwf	fillRect@color,c
  9964  00120A  0E0E               	movlw	14
  9965  00120C  EC80  F01A         	call	_fillRect
  9966                           
  9967                           ;Setup_Time.c: 288: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9968  001210  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9969  001212  0F44               	addlw	68
  9970  001214  6E23               	movwf	fillRect@y,c
  9971  001216  0E19               	movlw	25
  9972  001218  6E24               	movwf	fillRect@w,c
  9973  00121A  0E02               	movlw	2
  9974  00121C  6E25               	movwf	fillRect@h,c
  9975  00121E  0E07               	movlw	7
  9976  001220  6E27               	movwf	fillRect@color+1,c
  9977  001222  6826               	setf	fillRect@color,c
  9978  001224  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9979  001226  0D02               	mullw	2
  9980  001228  50F3               	movf	prodl,w,c
  9981  00122A  0F0E               	addlw	14
  9982  00122C  EC80  F01A         	call	_fillRect
  9983                           
  9984                           ;Setup_Time.c: 290: }
  9985                           
  9986                           ;Setup_Time.c: 289: break;
  9987  001230  D014               	goto	l1249
  9988  001232                     l9063:
  9989  001232  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9990                           
  9991                           ; Switch size 1, requested type "space"
  9992                           ; Number of cases is 6, Range of values is 0 to 5
  9993                           ; switch strategies available:
  9994                           ; Name         Instructions Cycles
  9995                           ; simple_byte           19    10 (average)
  9996                           ;	Chosen strategy is simple_byte
  9997  001234  0A00               	xorlw	0	; case 0
  9998  001236  B4D8               	btfsc	status,2,c
  9999  001238  D73D               	goto	l9041
 10000  00123A  0A01               	xorlw	1	; case 1
 10001  00123C  B4D8               	btfsc	status,2,c
 10002  00123E  D755               	goto	l9043
 10003  001240  0A03               	xorlw	3	; case 2
 10004  001242  B4D8               	btfsc	status,2,c
 10005  001244  D770               	goto	l9047
 10006  001246  0A01               	xorlw	1	; case 3
 10007  001248  B4D8               	btfsc	status,2,c
 10008  00124A  D798               	goto	l9051
 10009  00124C  0A07               	xorlw	7	; case 4
 10010  00124E  B4D8               	btfsc	status,2,c
 10011  001250  D7B2               	goto	l9053
 10012  001252  0A01               	xorlw	1	; case 5
 10013  001254  B4D8               	btfsc	status,2,c
 10014  001256  D7CF               	goto	l9057
 10015  001258  D000               	goto	l1249
 10016  00125A                     l1249:
 10017  00125A  0012               	return		;funcret
 10018  00125C                     __end_of_Update_Setup_Screen_Cursor_Backward:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           intcon2	equ	0xFF1
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postdec1	equ	0xFE5
 10031                           fsr1l	equ	0xFE1
 10032                           postinc2	equ	0xFDE
 10033                           fsr2h	equ	0xFDA
 10034                           fsr2l	equ	0xFD9
 10035                           status	equ	0xFD8
 10036                           
 10037 ;; *************** function _Go_Next_Alarm_Field *****************
 10038 ;; Defined at:
 10039 ;;		line 107 in file "Setup_Alarm_Time.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;		None
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;		None
 10044 ;; Return value:  Size  Location     Type
 10045 ;;		None               void
 10046 ;; Registers used:
 10047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;Total ram usage:        0 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:    9
 10060 ;; This function calls:
 10061 ;;		_Update_Setup_Screen_Cursor_Forward
 10062 ;; This function is called by:
 10063 ;;		_Do_Setup_Alarm_Time
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           	psect	text52
 10068  003AAA                     __ptext52:
 10069                           	opt stack 0
 10070  003AAA                     _Go_Next_Alarm_Field:
 10071                           	opt stack 20
 10072                           
 10073                           ;Setup_Alarm_Time.c: 110: Select_Alarm_Field++;
 10074                           
 10075                           ;incstack = 0
 10076  003AAA  2A52               	incf	_Select_Alarm_Field,f,c
 10077                           
 10078                           ;Setup_Alarm_Time.c: 111: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
 10079  003AAC  0E03               	movlw	3
 10080  003AAE  1852               	xorwf	_Select_Alarm_Field,w,c
 10081  003AB0  A4D8               	btfss	status,2,c
 10082  003AB2  D003               	goto	l9233
 10083  003AB4  0E00               	movlw	0
 10084  003AB6  6E52               	movwf	_Select_Alarm_Field,c
 10085  003AB8  D000               	goto	l9233
 10086  003ABA                     l9233:
 10087                           
 10088                           ;Setup_Alarm_Time.c: 112: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
 10089  003ABA  5052               	movf	_Select_Alarm_Field,w,c
 10090  003ABC  EC77  F007         	call	_Update_Setup_Screen_Cursor_Forward
 10091  003AC0  0012               	return		;funcret
 10092  003AC2                     __end_of_Go_Next_Alarm_Field:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           intcon2	equ	0xFF1
 10102                           postinc0	equ	0xFEE
 10103                           wreg	equ	0xFE8
 10104                           postdec1	equ	0xFE5
 10105                           fsr1l	equ	0xFE1
 10106                           postinc2	equ	0xFDE
 10107                           fsr2h	equ	0xFDA
 10108                           fsr2l	equ	0xFD9
 10109                           status	equ	0xFD8
 10110                           
 10111 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
 10112 ;; Defined at:
 10113 ;;		line 215 in file "Setup_Time.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;  field           1    wreg     unsigned char 
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  field           1   45[COMRAM] unsigned char 
 10118 ;;  xinc            1   47[COMRAM] unsigned char 
 10119 ;;  yinc            1   46[COMRAM] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;		None               void
 10122 ;; Registers used:
 10123 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:        3 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    8
 10136 ;; This function calls:
 10137 ;;		_fillRect
 10138 ;; This function is called by:
 10139 ;;		_Go_Next_Alarm_Field
 10140 ;;		_Go_Next_Field
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text53
 10145  000EEE                     __ptext53:
 10146                           	opt stack 0
 10147  000EEE                     _Update_Setup_Screen_Cursor_Forward:
 10148                           	opt stack 20
 10149                           
 10150                           ;incstack = 0
 10151                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
 10152  000EEE  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
 10153                           
 10154                           ;Setup_Time.c: 217: char xinc = 36;
 10155  000EF0  0E24               	movlw	36
 10156  000EF2  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
 10157                           
 10158                           ;Setup_Time.c: 218: char yinc = 30;
 10159  000EF4  0E1E               	movlw	30
 10160  000EF6  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
 10161                           
 10162                           ;Setup_Time.c: 219: switch (field)
 10163  000EF8  D0C2               	goto	l9037
 10164  000EFA                     l9015:
 10165                           
 10166                           ;Setup_Time.c: 222: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
 10167  000EFA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10168  000EFC  0F44               	addlw	68
 10169  000EFE  6E23               	movwf	fillRect@y,c
 10170  000F00  0E19               	movlw	25
 10171  000F02  6E24               	movwf	fillRect@w,c
 10172  000F04  0E02               	movlw	2
 10173  000F06  6E25               	movwf	fillRect@h,c
 10174  000F08  0E00               	movlw	0
 10175  000F0A  6E27               	movwf	fillRect@color+1,c
 10176  000F0C  0E00               	movlw	0
 10177  000F0E  6E26               	movwf	fillRect@color,c
 10178  000F10  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10179  000F12  0D02               	mullw	2
 10180  000F14  50F3               	movf	prodl,w,c
 10181  000F16  0F0E               	addlw	14
 10182  000F18  EC80  F01A         	call	_fillRect
 10183                           
 10184                           ;Setup_Time.c: 223: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10185  000F1C  0E44               	movlw	68
 10186  000F1E  6E23               	movwf	fillRect@y,c
 10187  000F20  0E19               	movlw	25
 10188  000F22  6E24               	movwf	fillRect@w,c
 10189  000F24  0E02               	movlw	2
 10190  000F26  6E25               	movwf	fillRect@h,c
 10191  000F28  0E00               	movlw	0
 10192  000F2A  6E27               	movwf	fillRect@color+1,c
 10193  000F2C  0E00               	movlw	0
 10194  000F2E  6E26               	movwf	fillRect@color,c
 10195  000F30  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10196  000F32  0D02               	mullw	2
 10197  000F34  50F3               	movf	prodl,w,c
 10198  000F36  0F0E               	addlw	14
 10199  000F38  EC80  F01A         	call	_fillRect
 10200                           
 10201                           ;Setup_Time.c: 224: fillRect(15-1, 52+16, 25,2,0x07FF);
 10202  000F3C  0E44               	movlw	68
 10203  000F3E  6E23               	movwf	fillRect@y,c
 10204  000F40  0E19               	movlw	25
 10205  000F42  6E24               	movwf	fillRect@w,c
 10206  000F44  0E02               	movlw	2
 10207  000F46  6E25               	movwf	fillRect@h,c
 10208  000F48  0E07               	movlw	7
 10209  000F4A  6E27               	movwf	fillRect@color+1,c
 10210  000F4C  6826               	setf	fillRect@color,c
 10211  000F4E  0E0E               	movlw	14
 10212  000F50  EC80  F01A         	call	_fillRect
 10213                           
 10214                           ;Setup_Time.c: 225: break;
 10215  000F54  D0A8               	goto	l1238
 10216  000F56                     l9019:
 10217                           
 10218                           ;Setup_Time.c: 228: fillRect(15-1, 52+16, 25,2,0x0000);
 10219  000F56  0E44               	movlw	68
 10220  000F58  6E23               	movwf	fillRect@y,c
 10221  000F5A  0E19               	movlw	25
 10222  000F5C  6E24               	movwf	fillRect@w,c
 10223  000F5E  0E02               	movlw	2
 10224  000F60  6E25               	movwf	fillRect@h,c
 10225  000F62  0E00               	movlw	0
 10226  000F64  6E27               	movwf	fillRect@color+1,c
 10227  000F66  0E00               	movlw	0
 10228  000F68  6E26               	movwf	fillRect@color,c
 10229  000F6A  0E0E               	movlw	14
 10230  000F6C  EC80  F01A         	call	_fillRect
 10231                           
 10232                           ;Setup_Time.c: 229: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
 10233  000F70  0E44               	movlw	68
 10234  000F72  6E23               	movwf	fillRect@y,c
 10235  000F74  0E19               	movlw	25
 10236  000F76  6E24               	movwf	fillRect@w,c
 10237  000F78  0E02               	movlw	2
 10238  000F7A  6E25               	movwf	fillRect@h,c
 10239  000F7C  0E07               	movlw	7
 10240  000F7E  6E27               	movwf	fillRect@color+1,c
 10241  000F80  6826               	setf	fillRect@color,c
 10242  000F82  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10243  000F84  0F0E               	addlw	14
 10244  000F86  EC80  F01A         	call	_fillRect
 10245                           
 10246                           ;Setup_Time.c: 230: break;
 10247  000F8A  D08D               	goto	l1238
 10248  000F8C                     l9021:
 10249                           
 10250                           ;Setup_Time.c: 233: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
 10251  000F8C  0E44               	movlw	68
 10252  000F8E  6E23               	movwf	fillRect@y,c
 10253  000F90  0E19               	movlw	25
 10254  000F92  6E24               	movwf	fillRect@w,c
 10255  000F94  0E02               	movlw	2
 10256  000F96  6E25               	movwf	fillRect@h,c
 10257  000F98  0E00               	movlw	0
 10258  000F9A  6E27               	movwf	fillRect@color+1,c
 10259  000F9C  0E00               	movlw	0
 10260  000F9E  6E26               	movwf	fillRect@color,c
 10261  000FA0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10262  000FA2  0F0E               	addlw	14
 10263  000FA4  EC80  F01A         	call	_fillRect
 10264                           
 10265                           ;Setup_Time.c: 234: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
 10266  000FA8  0E44               	movlw	68
 10267  000FAA  6E23               	movwf	fillRect@y,c
 10268  000FAC  0E19               	movlw	25
 10269  000FAE  6E24               	movwf	fillRect@w,c
 10270  000FB0  0E02               	movlw	2
 10271  000FB2  6E25               	movwf	fillRect@h,c
 10272  000FB4  0E07               	movlw	7
 10273  000FB6  6E27               	movwf	fillRect@color+1,c
 10274  000FB8  6826               	setf	fillRect@color,c
 10275  000FBA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10276  000FBC  0D02               	mullw	2
 10277  000FBE  50F3               	movf	prodl,w,c
 10278  000FC0  0F0E               	addlw	14
 10279  000FC2  EC80  F01A         	call	_fillRect
 10280                           
 10281                           ;Setup_Time.c: 235: break;
 10282  000FC6  D06F               	goto	l1238
 10283  000FC8                     l9025:
 10284                           
 10285                           ;Setup_Time.c: 238: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10286  000FC8  0E44               	movlw	68
 10287  000FCA  6E23               	movwf	fillRect@y,c
 10288  000FCC  0E19               	movlw	25
 10289  000FCE  6E24               	movwf	fillRect@w,c
 10290  000FD0  0E02               	movlw	2
 10291  000FD2  6E25               	movwf	fillRect@h,c
 10292  000FD4  0E00               	movlw	0
 10293  000FD6  6E27               	movwf	fillRect@color+1,c
 10294  000FD8  0E00               	movlw	0
 10295  000FDA  6E26               	movwf	fillRect@color,c
 10296  000FDC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10297  000FDE  0D02               	mullw	2
 10298  000FE0  50F3               	movf	prodl,w,c
 10299  000FE2  0F0E               	addlw	14
 10300  000FE4  EC80  F01A         	call	_fillRect
 10301                           
 10302                           ;Setup_Time.c: 239: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
 10303  000FE8  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10304  000FEA  0F44               	addlw	68
 10305  000FEC  6E23               	movwf	fillRect@y,c
 10306  000FEE  0E19               	movlw	25
 10307  000FF0  6E24               	movwf	fillRect@w,c
 10308  000FF2  0E02               	movlw	2
 10309  000FF4  6E25               	movwf	fillRect@h,c
 10310  000FF6  0E07               	movlw	7
 10311  000FF8  6E27               	movwf	fillRect@color+1,c
 10312  000FFA  6826               	setf	fillRect@color,c
 10313  000FFC  0E0E               	movlw	14
 10314  000FFE  EC80  F01A         	call	_fillRect
 10315                           
 10316                           ;Setup_Time.c: 240: break;
 10317  001002  D051               	goto	l1238
 10318  001004                     l9029:
 10319                           
 10320                           ;Setup_Time.c: 243: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
 10321  001004  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10322  001006  0F44               	addlw	68
 10323  001008  6E23               	movwf	fillRect@y,c
 10324  00100A  0E19               	movlw	25
 10325  00100C  6E24               	movwf	fillRect@w,c
 10326  00100E  0E02               	movlw	2
 10327  001010  6E25               	movwf	fillRect@h,c
 10328  001012  0E00               	movlw	0
 10329  001014  6E27               	movwf	fillRect@color+1,c
 10330  001016  0E00               	movlw	0
 10331  001018  6E26               	movwf	fillRect@color,c
 10332  00101A  0E0E               	movlw	14
 10333  00101C  EC80  F01A         	call	_fillRect
 10334                           
 10335                           ;Setup_Time.c: 244: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
 10336  001020  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10337  001022  0F44               	addlw	68
 10338  001024  6E23               	movwf	fillRect@y,c
 10339  001026  0E19               	movlw	25
 10340  001028  6E24               	movwf	fillRect@w,c
 10341  00102A  0E02               	movlw	2
 10342  00102C  6E25               	movwf	fillRect@h,c
 10343  00102E  0E07               	movlw	7
 10344  001030  6E27               	movwf	fillRect@color+1,c
 10345  001032  6826               	setf	fillRect@color,c
 10346  001034  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10347  001036  0F0E               	addlw	14
 10348  001038  EC80  F01A         	call	_fillRect
 10349                           
 10350                           ;Setup_Time.c: 245: break;
 10351  00103C  D034               	goto	l1238
 10352  00103E                     l9031:
 10353                           
 10354                           ;Setup_Time.c: 248: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
 10355  00103E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10356  001040  0F44               	addlw	68
 10357  001042  6E23               	movwf	fillRect@y,c
 10358  001044  0E19               	movlw	25
 10359  001046  6E24               	movwf	fillRect@w,c
 10360  001048  0E02               	movlw	2
 10361  00104A  6E25               	movwf	fillRect@h,c
 10362  00104C  0E00               	movlw	0
 10363  00104E  6E27               	movwf	fillRect@color+1,c
 10364  001050  0E00               	movlw	0
 10365  001052  6E26               	movwf	fillRect@color,c
 10366  001054  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10367  001056  0F0E               	addlw	14
 10368  001058  EC80  F01A         	call	_fillRect
 10369                           
 10370                           ;Setup_Time.c: 249: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
 10371  00105C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10372  00105E  0F44               	addlw	68
 10373  001060  6E23               	movwf	fillRect@y,c
 10374  001062  0E19               	movlw	25
 10375  001064  6E24               	movwf	fillRect@w,c
 10376  001066  0E02               	movlw	2
 10377  001068  6E25               	movwf	fillRect@h,c
 10378  00106A  0E07               	movlw	7
 10379  00106C  6E27               	movwf	fillRect@color+1,c
 10380  00106E  6826               	setf	fillRect@color,c
 10381  001070  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10382  001072  0D02               	mullw	2
 10383  001074  50F3               	movf	prodl,w,c
 10384  001076  0F0E               	addlw	14
 10385  001078  EC80  F01A         	call	_fillRect
 10386                           
 10387                           ;Setup_Time.c: 251: }
 10388                           
 10389                           ;Setup_Time.c: 250: break;
 10390  00107C  D014               	goto	l1238
 10391  00107E                     l9037:
 10392  00107E  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
 10393                           
 10394                           ; Switch size 1, requested type "space"
 10395                           ; Number of cases is 6, Range of values is 0 to 5
 10396                           ; switch strategies available:
 10397                           ; Name         Instructions Cycles
 10398                           ; simple_byte           19    10 (average)
 10399                           ;	Chosen strategy is simple_byte
 10400  001080  0A00               	xorlw	0	; case 0
 10401  001082  B4D8               	btfsc	status,2,c
 10402  001084  D73A               	goto	l9015
 10403  001086  0A01               	xorlw	1	; case 1
 10404  001088  B4D8               	btfsc	status,2,c
 10405  00108A  D765               	goto	l9019
 10406  00108C  0A03               	xorlw	3	; case 2
 10407  00108E  B4D8               	btfsc	status,2,c
 10408  001090  D77D               	goto	l9021
 10409  001092  0A01               	xorlw	1	; case 3
 10410  001094  B4D8               	btfsc	status,2,c
 10411  001096  D798               	goto	l9025
 10412  001098  0A07               	xorlw	7	; case 4
 10413  00109A  B4D8               	btfsc	status,2,c
 10414  00109C  D7B3               	goto	l9029
 10415  00109E  0A01               	xorlw	1	; case 5
 10416  0010A0  B4D8               	btfsc	status,2,c
 10417  0010A2  D7CD               	goto	l9031
 10418  0010A4  D000               	goto	l1238
 10419  0010A6                     l1238:
 10420  0010A6  0012               	return		;funcret
 10421  0010A8                     __end_of_Update_Setup_Screen_Cursor_Forward:
 10422                           	opt stack 0
 10423                           tblptru	equ	0xFF8
 10424                           tblptrh	equ	0xFF7
 10425                           tblptrl	equ	0xFF6
 10426                           tablat	equ	0xFF5
 10427                           prodh	equ	0xFF4
 10428                           prodl	equ	0xFF3
 10429                           intcon	equ	0xFF2
 10430                           intcon2	equ	0xFF1
 10431                           postinc0	equ	0xFEE
 10432                           wreg	equ	0xFE8
 10433                           postdec1	equ	0xFE5
 10434                           fsr1l	equ	0xFE1
 10435                           postinc2	equ	0xFDE
 10436                           fsr2h	equ	0xFDA
 10437                           fsr2l	equ	0xFD9
 10438                           status	equ	0xFD8
 10439                           
 10440 ;; *************** function _Exit_Setup_Alarm_Time *****************
 10441 ;; Defined at:
 10442 ;;		line 123 in file "Setup_Alarm_Time.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;		None               void
 10449 ;; Registers used:
 10450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;Total ram usage:        0 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:   11
 10463 ;; This function calls:
 10464 ;;		_DS3231_Read_Time
 10465 ;;		_Initialize_Screen
 10466 ;; This function is called by:
 10467 ;;		_Do_Setup_Alarm_Time
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           	psect	text54
 10472  003C28                     __ptext54:
 10473                           	opt stack 0
 10474  003C28                     _Exit_Setup_Alarm_Time:
 10475                           	opt stack 18
 10476                           
 10477                           ;Setup_Alarm_Time.c: 125: DS3231_Read_Time();
 10478                           
 10479                           ;incstack = 0
 10480  003C28  EC88  F018         	call	_DS3231_Read_Time	;wreg free
 10481                           
 10482                           ;Setup_Alarm_Time.c: 126: Initialize_Screen();
 10483  003C2C  EC1E  F003         	call	_Initialize_Screen	;wreg free
 10484                           
 10485                           ;Setup_Alarm_Time.c: 127: In_Alarm_Time_Setup = 0;
 10486  003C30  0E00               	movlw	0
 10487  003C32  0100               	movlb	0	; () banked
 10488  003C34  6FF7               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10489                           
 10490                           ; BSR set to: 0
 10491  003C36  0012               	return		;funcret
 10492  003C38                     __end_of_Exit_Setup_Alarm_Time:
 10493                           	opt stack 0
 10494                           tblptru	equ	0xFF8
 10495                           tblptrh	equ	0xFF7
 10496                           tblptrl	equ	0xFF6
 10497                           tablat	equ	0xFF5
 10498                           prodh	equ	0xFF4
 10499                           prodl	equ	0xFF3
 10500                           intcon	equ	0xFF2
 10501                           intcon2	equ	0xFF1
 10502                           postinc0	equ	0xFEE
 10503                           wreg	equ	0xFE8
 10504                           postdec1	equ	0xFE5
 10505                           fsr1l	equ	0xFE1
 10506                           postinc2	equ	0xFDE
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10512 ;; Defined at:
 10513 ;;		line 130 in file "Setup_Alarm_Time.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;		None               void
 10520 ;; Registers used:
 10521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;Total ram usage:        0 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:   11
 10534 ;; This function calls:
 10535 ;;		_DS3231_Read_Alarm_Time
 10536 ;;		_DS3231_Read_Time
 10537 ;;		_DS3231_Write_Alarm_Time
 10538 ;;		_Initialize_Screen
 10539 ;; This function is called by:
 10540 ;;		_Do_Setup_Alarm_Time
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text55
 10545  003AC2                     __ptext55:
 10546                           	opt stack 0
 10547  003AC2                     _Do_Save_New_Alarm_Time:
 10548                           	opt stack 18
 10549                           
 10550                           ;Setup_Alarm_Time.c: 132: DS3231_Write_Alarm_Time();
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;incstack = 0
 10554  003AC2  ECC0  F016         	call	_DS3231_Write_Alarm_Time	;wreg free
 10555                           
 10556                           ;Setup_Alarm_Time.c: 133: DS3231_Read_Alarm_Time();
 10557  003AC6  EC0F  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
 10558                           
 10559                           ;Setup_Alarm_Time.c: 134: DS3231_Read_Time();
 10560  003ACA  EC88  F018         	call	_DS3231_Read_Time	;wreg free
 10561                           
 10562                           ;Setup_Alarm_Time.c: 135: Initialize_Screen();
 10563  003ACE  EC1E  F003         	call	_Initialize_Screen	;wreg free
 10564                           
 10565                           ;Setup_Alarm_Time.c: 136: In_Alarm_Time_Setup = 0;
 10566  003AD2  0E00               	movlw	0
 10567  003AD4  0100               	movlb	0	; () banked
 10568  003AD6  6FF7               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10569                           
 10570                           ; BSR set to: 0
 10571  003AD8  0012               	return		;funcret
 10572  003ADA                     __end_of_Do_Save_New_Alarm_Time:
 10573                           	opt stack 0
 10574                           tblptru	equ	0xFF8
 10575                           tblptrh	equ	0xFF7
 10576                           tblptrl	equ	0xFF6
 10577                           tablat	equ	0xFF5
 10578                           prodh	equ	0xFF4
 10579                           prodl	equ	0xFF3
 10580                           intcon	equ	0xFF2
 10581                           intcon2	equ	0xFF1
 10582                           postinc0	equ	0xFEE
 10583                           wreg	equ	0xFE8
 10584                           postdec1	equ	0xFE5
 10585                           fsr1l	equ	0xFE1
 10586                           postinc2	equ	0xFDE
 10587                           fsr2h	equ	0xFDA
 10588                           fsr2l	equ	0xFD9
 10589                           status	equ	0xFD8
 10590                           
 10591 ;; *************** function _Initialize_Screen *****************
 10592 ;; Defined at:
 10593 ;;		line 35 in file "Main_Screen.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  2  353[None  ] int 
 10600 ;; Registers used:
 10601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10602 ;; Tracked objects:
 10603 ;;		On entry : 0/0
 10604 ;;		On exit  : 0/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10611 ;;Total ram usage:        0 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:   10
 10614 ;; This function calls:
 10615 ;;		_LCD_Reset
 10616 ;;		_TFT_GreenTab_Initialize
 10617 ;;		_drawCircle
 10618 ;;		_drawtext
 10619 ;;		_fillScreen
 10620 ;;		_strcpy
 10621 ;; This function is called by:
 10622 ;;		_main
 10623 ;;		_Exit_Setup_Alarm_Time
 10624 ;;		_Do_Save_New_Alarm_Time
 10625 ;;		_Exit_Setup_Heater_Temp
 10626 ;;		_Do_Save_New_Heater_Temp
 10627 ;;		_Do_Save_New_Time
 10628 ;;		_Exit_Time_Setup
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           	psect	text56
 10633  00063C                     __ptext56:
 10634                           	opt stack 0
 10635  00063C                     _Initialize_Screen:
 10636                           	opt stack 20
 10637                           
 10638                           ;Main_Screen.c: 37: LCD_Reset();
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;incstack = 0
 10642  00063C  ECC6  F01D         	call	_LCD_Reset	;wreg free
 10643                           
 10644                           ;Main_Screen.c: 38: TFT_GreenTab_Initialize();
 10645  000640  EC68  F01C         	call	_TFT_GreenTab_Initialize	;wreg free
 10646                           
 10647                           ;Main_Screen.c: 39: fillScreen(0x0000);
 10648  000644  0E00               	movlw	0
 10649  000646  6E25               	movwf	fillScreen@color+1,c
 10650  000648  0E00               	movlw	0
 10651  00064A  6E24               	movwf	fillScreen@color,c
 10652  00064C  EC16  F01D         	call	_fillScreen	;wreg free
 10653                           
 10654                           ;Main_Screen.c: 41: strcpy(txt, " ECE3301L F'21 Final\0");
 10655  000650  C04B  F011         	movff	_txt,strcpy@to
 10656  000654  C04C  F012         	movff	_txt+1,strcpy@to+1
 10657  000658  0ED6               	movlw	low STR_5
 10658  00065A  6E13               	movwf	strcpy@from,c
 10659  00065C  0EFE               	movlw	high STR_5
 10660  00065E  6E14               	movwf	strcpy@from+1,c
 10661  000660  ECF4  F01B         	call	_strcpy	;wreg free
 10662                           
 10663                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10664  000664  0E01               	movlw	1
 10665  000666  6E39               	movwf	drawtext@y,c
 10666  000668  C04B  F03A         	movff	_txt,drawtext@_text
 10667  00066C  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10668  000670  0EFF               	movlw	255
 10669  000672  6E3D               	movwf	drawtext@color+1,c
 10670  000674  683C               	setf	drawtext@color,c
 10671  000676  0E00               	movlw	0
 10672  000678  6E3F               	movwf	drawtext@bg+1,c
 10673  00067A  0E00               	movlw	0
 10674  00067C  6E3E               	movwf	drawtext@bg,c
 10675  00067E  0E01               	movlw	1
 10676  000680  6E40               	movwf	drawtext@size,c
 10677  000682  0E01               	movlw	1
 10678  000684  EC2B  F00C         	call	_drawtext
 10679                           
 10680                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
 10681  000688  C04B  F011         	movff	_txt,strcpy@to
 10682  00068C  C04C  F012         	movff	_txt+1,strcpy@to+1
 10683  000690  0E6F               	movlw	low STR_6
 10684  000692  6E13               	movwf	strcpy@from,c
 10685  000694  0EFF               	movlw	high STR_6
 10686  000696  6E14               	movwf	strcpy@from+1,c
 10687  000698  ECF4  F01B         	call	_strcpy	;wreg free
 10688                           
 10689                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10690  00069C  0E0B               	movlw	11
 10691  00069E  6E39               	movwf	drawtext@y,c
 10692  0006A0  C04B  F03A         	movff	_txt,drawtext@_text
 10693  0006A4  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10694  0006A8  0EF8               	movlw	248
 10695  0006AA  6E3D               	movwf	drawtext@color+1,c
 10696  0006AC  0E1F               	movlw	31
 10697  0006AE  6E3C               	movwf	drawtext@color,c
 10698  0006B0  0E00               	movlw	0
 10699  0006B2  6E3F               	movwf	drawtext@bg+1,c
 10700  0006B4  0E00               	movlw	0
 10701  0006B6  6E3E               	movwf	drawtext@bg,c
 10702  0006B8  0E01               	movlw	1
 10703  0006BA  6E40               	movwf	drawtext@size,c
 10704  0006BC  0E18               	movlw	24
 10705  0006BE  EC2B  F00C         	call	_drawtext
 10706                           
 10707                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
 10708  0006C2  0E00               	movlw	0
 10709  0006C4  6E1D               	movwf	drawCircle@x0+1,c
 10710  0006C6  0E28               	movlw	40
 10711  0006C8  6E1C               	movwf	drawCircle@x0,c
 10712  0006CA  0E00               	movlw	0
 10713  0006CC  6E1F               	movwf	drawCircle@y0+1,c
 10714  0006CE  0E17               	movlw	23
 10715  0006D0  6E1E               	movwf	drawCircle@y0,c
 10716  0006D2  0E00               	movlw	0
 10717  0006D4  6E21               	movwf	drawCircle@r+1,c
 10718  0006D6  0E02               	movlw	2
 10719  0006D8  6E20               	movwf	drawCircle@r,c
 10720  0006DA  0EFF               	movlw	255
 10721  0006DC  6E23               	movwf	drawCircle@color+1,c
 10722  0006DE  0EE0               	movlw	224
 10723  0006E0  6E22               	movwf	drawCircle@color,c
 10724  0006E2  EC2E  F009         	call	_drawCircle	;wreg free
 10725                           
 10726                           ;Main_Screen.c: 47: strcpy(txt, "C/");
 10727  0006E6  C04B  F011         	movff	_txt,strcpy@to
 10728  0006EA  C04C  F012         	movff	_txt+1,strcpy@to+1
 10729  0006EE  0EF6               	movlw	low STR_7
 10730  0006F0  6E13               	movwf	strcpy@from,c
 10731  0006F2  0EFF               	movlw	high STR_7
 10732  0006F4  6E14               	movwf	strcpy@from+1,c
 10733  0006F6  ECF4  F01B         	call	_strcpy	;wreg free
 10734                           
 10735                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10736  0006FA  0E17               	movlw	23
 10737  0006FC  6E39               	movwf	drawtext@y,c
 10738  0006FE  C04B  F03A         	movff	_txt,drawtext@_text
 10739  000702  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10740  000706  0EFF               	movlw	255
 10741  000708  6E3D               	movwf	drawtext@color+1,c
 10742  00070A  0EE0               	movlw	224
 10743  00070C  6E3C               	movwf	drawtext@color,c
 10744  00070E  0E00               	movlw	0
 10745  000710  6E3F               	movwf	drawtext@bg+1,c
 10746  000712  0E00               	movlw	0
 10747  000714  6E3E               	movwf	drawtext@bg,c
 10748  000716  0E02               	movlw	2
 10749  000718  6E40               	movwf	drawtext@size,c
 10750  00071A  0E2D               	movlw	45
 10751  00071C  EC2B  F00C         	call	_drawtext
 10752                           
 10753                           ;Main_Screen.c: 49: strcpy(txt, "F");
 10754  000720  C04B  F011         	movff	_txt,strcpy@to
 10755  000724  C04C  F012         	movff	_txt+1,strcpy@to+1
 10756  000728  0EF0               	movlw	low (STR_20+2)
 10757  00072A  6E13               	movwf	strcpy@from,c
 10758  00072C  0EFF               	movlw	high (STR_20+2)
 10759  00072E  6E14               	movwf	strcpy@from+1,c
 10760  000730  ECF4  F01B         	call	_strcpy	;wreg free
 10761                           
 10762                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
 10763  000734  0E00               	movlw	0
 10764  000736  6E1D               	movwf	drawCircle@x0+1,c
 10765  000738  0E6E               	movlw	110
 10766  00073A  6E1C               	movwf	drawCircle@x0,c
 10767  00073C  0E00               	movlw	0
 10768  00073E  6E1F               	movwf	drawCircle@y0+1,c
 10769  000740  0E17               	movlw	23
 10770  000742  6E1E               	movwf	drawCircle@y0,c
 10771  000744  0E00               	movlw	0
 10772  000746  6E21               	movwf	drawCircle@r+1,c
 10773  000748  0E02               	movlw	2
 10774  00074A  6E20               	movwf	drawCircle@r,c
 10775  00074C  0EFF               	movlw	255
 10776  00074E  6E23               	movwf	drawCircle@color+1,c
 10777  000750  0EE0               	movlw	224
 10778  000752  6E22               	movwf	drawCircle@color,c
 10779  000754  EC2E  F009         	call	_drawCircle	;wreg free
 10780                           
 10781                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10782  000758  0E17               	movlw	23
 10783  00075A  6E39               	movwf	drawtext@y,c
 10784  00075C  C04B  F03A         	movff	_txt,drawtext@_text
 10785  000760  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10786  000764  0EFF               	movlw	255
 10787  000766  6E3D               	movwf	drawtext@color+1,c
 10788  000768  0EE0               	movlw	224
 10789  00076A  6E3C               	movwf	drawtext@color,c
 10790  00076C  0E00               	movlw	0
 10791  00076E  6E3F               	movwf	drawtext@bg+1,c
 10792  000770  0E00               	movlw	0
 10793  000772  6E3E               	movwf	drawtext@bg,c
 10794  000774  0E02               	movlw	2
 10795  000776  6E40               	movwf	drawtext@size,c
 10796  000778  0E73               	movlw	115
 10797  00077A  EC2B  F00C         	call	_drawtext
 10798                           
 10799                           ;Main_Screen.c: 52: strcpy(txt, "Time");
 10800  00077E  C04B  F011         	movff	_txt,strcpy@to
 10801  000782  C04C  F012         	movff	_txt+1,strcpy@to+1
 10802  000786  0EB1               	movlw	low (STR_11+6)
 10803  000788  6E13               	movwf	strcpy@from,c
 10804  00078A  0EFF               	movlw	high (STR_11+6)
 10805  00078C  6E14               	movwf	strcpy@from+1,c
 10806  00078E  ECF4  F01B         	call	_strcpy	;wreg free
 10807                           
 10808                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10809  000792  0E28               	movlw	40
 10810  000794  6E39               	movwf	drawtext@y,c
 10811  000796  C04B  F03A         	movff	_txt,drawtext@_text
 10812  00079A  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10813  00079E  0E00               	movlw	0
 10814  0007A0  6E3D               	movwf	drawtext@color+1,c
 10815  0007A2  0E1F               	movlw	31
 10816  0007A4  6E3C               	movwf	drawtext@color,c
 10817  0007A6  0E00               	movlw	0
 10818  0007A8  6E3F               	movwf	drawtext@bg+1,c
 10819  0007AA  0E00               	movlw	0
 10820  0007AC  6E3E               	movwf	drawtext@bg,c
 10821  0007AE  0E01               	movlw	1
 10822  0007B0  6E40               	movwf	drawtext@size,c
 10823  0007B2  0E32               	movlw	50
 10824  0007B4  EC2B  F00C         	call	_drawtext
 10825                           
 10826                           ;Main_Screen.c: 54: strcpy(txt, "Date");
 10827  0007B8  C04B  F011         	movff	_txt,strcpy@to
 10828  0007BC  C04C  F012         	movff	_txt+1,strcpy@to+1
 10829  0007C0  0EE0               	movlw	low STR_10
 10830  0007C2  6E13               	movwf	strcpy@from,c
 10831  0007C4  0EFF               	movlw	high STR_10
 10832  0007C6  6E14               	movwf	strcpy@from+1,c
 10833  0007C8  ECF4  F01B         	call	_strcpy	;wreg free
 10834                           
 10835                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10836  0007CC  0E47               	movlw	71
 10837  0007CE  6E39               	movwf	drawtext@y,c
 10838  0007D0  C04B  F03A         	movff	_txt,drawtext@_text
 10839  0007D4  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10840  0007D8  0EF8               	movlw	248
 10841  0007DA  6E3D               	movwf	drawtext@color+1,c
 10842  0007DC  0E00               	movlw	0
 10843  0007DE  6E3C               	movwf	drawtext@color,c
 10844  0007E0  0E00               	movlw	0
 10845  0007E2  6E3F               	movwf	drawtext@bg+1,c
 10846  0007E4  0E00               	movlw	0
 10847  0007E6  6E3E               	movwf	drawtext@bg,c
 10848  0007E8  0E01               	movlw	1
 10849  0007EA  6E40               	movwf	drawtext@size,c
 10850  0007EC  0E32               	movlw	50
 10851  0007EE  EC2B  F00C         	call	_drawtext
 10852                           
 10853                           ;Main_Screen.c: 56: strcpy(txt, "Alarm Time");
 10854  0007F2  C04B  F011         	movff	_txt,strcpy@to
 10855  0007F6  C04C  F012         	movff	_txt+1,strcpy@to+1
 10856  0007FA  0EAB               	movlw	low STR_11
 10857  0007FC  6E13               	movwf	strcpy@from,c
 10858  0007FE  0EFF               	movlw	high STR_11
 10859  000800  6E14               	movwf	strcpy@from+1,c
 10860  000802  ECF4  F01B         	call	_strcpy	;wreg free
 10861                           
 10862                           ;Main_Screen.c: 57: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10863  000806  0E64               	movlw	100
 10864  000808  6E39               	movwf	drawtext@y,c
 10865  00080A  C04B  F03A         	movff	_txt,drawtext@_text
 10866  00080E  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10867  000812  0EFF               	movlw	255
 10868  000814  6E3D               	movwf	drawtext@color+1,c
 10869  000816  0EE0               	movlw	224
 10870  000818  6E3C               	movwf	drawtext@color,c
 10871  00081A  0E00               	movlw	0
 10872  00081C  6E3F               	movwf	drawtext@bg+1,c
 10873  00081E  0E00               	movlw	0
 10874  000820  6E3E               	movwf	drawtext@bg,c
 10875  000822  0E01               	movlw	1
 10876  000824  6E40               	movwf	drawtext@size,c
 10877  000826  0E04               	movlw	4
 10878  000828  EC2B  F00C         	call	_drawtext
 10879                           
 10880                           ;Main_Screen.c: 58: strcpy(txt, "Alarm SW");
 10881  00082C  C04B  F011         	movff	_txt,strcpy@to
 10882  000830  C04C  F012         	movff	_txt+1,strcpy@to+1
 10883  000834  0EC0               	movlw	low STR_12
 10884  000836  6E13               	movwf	strcpy@from,c
 10885  000838  0EFF               	movlw	high STR_12
 10886  00083A  6E14               	movwf	strcpy@from+1,c
 10887  00083C  ECF4  F01B         	call	_strcpy	;wreg free
 10888                           
 10889                           ;Main_Screen.c: 59: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10890  000840  0E64               	movlw	100
 10891  000842  6E39               	movwf	drawtext@y,c
 10892  000844  C04B  F03A         	movff	_txt,drawtext@_text
 10893  000848  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10894  00084C  0EFF               	movlw	255
 10895  00084E  6E3D               	movwf	drawtext@color+1,c
 10896  000850  0EE0               	movlw	224
 10897  000852  6E3C               	movwf	drawtext@color,c
 10898  000854  0E00               	movlw	0
 10899  000856  6E3F               	movwf	drawtext@bg+1,c
 10900  000858  0E00               	movlw	0
 10901  00085A  6E3E               	movwf	drawtext@bg,c
 10902  00085C  0E01               	movlw	1
 10903  00085E  6E40               	movwf	drawtext@size,c
 10904  000860  0E4D               	movlw	77
 10905  000862  EC2B  F00C         	call	_drawtext
 10906                           
 10907                           ;Main_Screen.c: 60: strcpy(txt, "HTR Set Temp");
 10908  000866  C04B  F011         	movff	_txt,strcpy@to
 10909  00086A  C04C  F012         	movff	_txt+1,strcpy@to+1
 10910  00086E  0E7C               	movlw	low STR_13
 10911  000870  6E13               	movwf	strcpy@from,c
 10912  000872  0EFF               	movlw	high STR_13
 10913  000874  6E14               	movwf	strcpy@from+1,c
 10914  000876  ECF4  F01B         	call	_strcpy	;wreg free
 10915                           
 10916                           ;Main_Screen.c: 61: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10917  00087A  0E78               	movlw	120
 10918  00087C  6E39               	movwf	drawtext@y,c
 10919  00087E  C04B  F03A         	movff	_txt,drawtext@_text
 10920  000882  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10921  000886  0E00               	movlw	0
 10922  000888  6E3D               	movwf	drawtext@color+1,c
 10923  00088A  0E1F               	movlw	31
 10924  00088C  6E3C               	movwf	drawtext@color,c
 10925  00088E  0E00               	movlw	0
 10926  000890  6E3F               	movwf	drawtext@bg+1,c
 10927  000892  0E00               	movlw	0
 10928  000894  6E3E               	movwf	drawtext@bg,c
 10929  000896  0E01               	movlw	1
 10930  000898  6E40               	movwf	drawtext@size,c
 10931  00089A  0E06               	movlw	6
 10932  00089C  EC2B  F00C         	call	_drawtext
 10933                           
 10934                           ;Main_Screen.c: 62: strcpy(txt, "HTR SW");
 10935  0008A0  C04B  F011         	movff	_txt,strcpy@to
 10936  0008A4  C04C  F012         	movff	_txt+1,strcpy@to+1
 10937  0008A8  0ED9               	movlw	low STR_14
 10938  0008AA  6E13               	movwf	strcpy@from,c
 10939  0008AC  0EFF               	movlw	high STR_14
 10940  0008AE  6E14               	movwf	strcpy@from+1,c
 10941  0008B0  ECF4  F01B         	call	_strcpy	;wreg free
 10942                           
 10943                           ;Main_Screen.c: 63: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10944  0008B4  0E78               	movlw	120
 10945  0008B6  6E39               	movwf	drawtext@y,c
 10946  0008B8  C04B  F03A         	movff	_txt,drawtext@_text
 10947  0008BC  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10948  0008C0  0E00               	movlw	0
 10949  0008C2  6E3D               	movwf	drawtext@color+1,c
 10950  0008C4  0E1F               	movlw	31
 10951  0008C6  6E3C               	movwf	drawtext@color,c
 10952  0008C8  0E00               	movlw	0
 10953  0008CA  6E3F               	movwf	drawtext@bg+1,c
 10954  0008CC  0E00               	movlw	0
 10955  0008CE  6E3E               	movwf	drawtext@bg,c
 10956  0008D0  0E01               	movlw	1
 10957  0008D2  6E40               	movwf	drawtext@size,c
 10958  0008D4  0E55               	movlw	85
 10959  0008D6  EC2B  F00C         	call	_drawtext
 10960                           
 10961                           ;Main_Screen.c: 64: strcpy(txt, "DC");
 10962  0008DA  C04B  F011         	movff	_txt,strcpy@to
 10963  0008DE  C04C  F012         	movff	_txt+1,strcpy@to+1
 10964  0008E2  0EF9               	movlw	low STR_15
 10965  0008E4  6E13               	movwf	strcpy@from,c
 10966  0008E6  0EFF               	movlw	high STR_15
 10967  0008E8  6E14               	movwf	strcpy@from+1,c
 10968  0008EA  ECF4  F01B         	call	_strcpy	;wreg free
 10969                           
 10970                           ;Main_Screen.c: 65: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10971  0008EE  0E8C               	movlw	140
 10972  0008F0  6E39               	movwf	drawtext@y,c
 10973  0008F2  C04B  F03A         	movff	_txt,drawtext@_text
 10974  0008F6  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 10975  0008FA  0EFF               	movlw	255
 10976  0008FC  6E3D               	movwf	drawtext@color+1,c
 10977  0008FE  683C               	setf	drawtext@color,c
 10978  000900  0E00               	movlw	0
 10979  000902  6E3F               	movwf	drawtext@bg+1,c
 10980  000904  0E00               	movlw	0
 10981  000906  6E3E               	movwf	drawtext@bg,c
 10982  000908  0E01               	movlw	1
 10983  00090A  6E40               	movwf	drawtext@size,c
 10984  00090C  0E0C               	movlw	12
 10985  00090E  EC2B  F00C         	call	_drawtext
 10986                           
 10987                           ;Main_Screen.c: 66: strcpy(txt, "RM");
 10988  000912  C04B  F011         	movff	_txt,strcpy@to
 10989  000916  C04C  F012         	movff	_txt+1,strcpy@to+1
 10990  00091A  0EFC               	movlw	low STR_16
 10991  00091C  6E13               	movwf	strcpy@from,c
 10992  00091E  0EFF               	movlw	high STR_16
 10993  000920  6E14               	movwf	strcpy@from+1,c
 10994  000922  ECF4  F01B         	call	_strcpy	;wreg free
 10995                           
 10996                           ;Main_Screen.c: 67: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10997  000926  0E8C               	movlw	140
 10998  000928  6E39               	movwf	drawtext@y,c
 10999  00092A  C04B  F03A         	movff	_txt,drawtext@_text
 11000  00092E  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 11001  000932  0EFF               	movlw	255
 11002  000934  6E3D               	movwf	drawtext@color+1,c
 11003  000936  683C               	setf	drawtext@color,c
 11004  000938  0E00               	movlw	0
 11005  00093A  6E3F               	movwf	drawtext@bg+1,c
 11006  00093C  0E00               	movlw	0
 11007  00093E  6E3E               	movwf	drawtext@bg,c
 11008  000940  0E01               	movlw	1
 11009  000942  6E40               	movwf	drawtext@size,c
 11010  000944  0E21               	movlw	33
 11011  000946  EC2B  F00C         	call	_drawtext
 11012                           
 11013                           ;Main_Screen.c: 68: strcpy(txt, "Volt");
 11014  00094A  C04B  F011         	movff	_txt,strcpy@to
 11015  00094E  C04C  F012         	movff	_txt+1,strcpy@to+1
 11016  000952  0EE5               	movlw	low STR_17
 11017  000954  6E13               	movwf	strcpy@from,c
 11018  000956  0EFF               	movlw	high STR_17
 11019  000958  6E14               	movwf	strcpy@from+1,c
 11020  00095A  ECF4  F01B         	call	_strcpy	;wreg free
 11021                           
 11022                           ;Main_Screen.c: 69: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 11023  00095E  0E8C               	movlw	140
 11024  000960  6E39               	movwf	drawtext@y,c
 11025  000962  C04B  F03A         	movff	_txt,drawtext@_text
 11026  000966  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 11027  00096A  0EFF               	movlw	255
 11028  00096C  6E3D               	movwf	drawtext@color+1,c
 11029  00096E  683C               	setf	drawtext@color,c
 11030  000970  0E00               	movlw	0
 11031  000972  6E3F               	movwf	drawtext@bg+1,c
 11032  000974  0E00               	movlw	0
 11033  000976  6E3E               	movwf	drawtext@bg,c
 11034  000978  0E01               	movlw	1
 11035  00097A  6E40               	movwf	drawtext@size,c
 11036  00097C  0E32               	movlw	50
 11037  00097E  EC2B  F00C         	call	_drawtext
 11038                           
 11039                           ;Main_Screen.c: 70: strcpy(txt, "RPM");
 11040  000982  C04B  F011         	movff	_txt,strcpy@to
 11041  000986  C04C  F012         	movff	_txt+1,strcpy@to+1
 11042  00098A  0EF2               	movlw	low STR_18
 11043  00098C  6E13               	movwf	strcpy@from,c
 11044  00098E  0EFF               	movlw	high STR_18
 11045  000990  6E14               	movwf	strcpy@from+1,c
 11046  000992  ECF4  F01B         	call	_strcpy	;wreg free
 11047                           
 11048                           ;Main_Screen.c: 71: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 11049  000996  0E8C               	movlw	140
 11050  000998  6E39               	movwf	drawtext@y,c
 11051  00099A  C04B  F03A         	movff	_txt,drawtext@_text
 11052  00099E  C04C  F03B         	movff	_txt+1,drawtext@_text+1
 11053  0009A2  0EFF               	movlw	255
 11054  0009A4  6E3D               	movwf	drawtext@color+1,c
 11055  0009A6  683C               	setf	drawtext@color,c
 11056  0009A8  0E00               	movlw	0
 11057  0009AA  6E3F               	movwf	drawtext@bg+1,c
 11058  0009AC  0E00               	movlw	0
 11059  0009AE  6E3E               	movwf	drawtext@bg,c
 11060  0009B0  0E01               	movlw	1
 11061  0009B2  6E40               	movwf	drawtext@size,c
 11062  0009B4  0E5F               	movlw	95
 11063  0009B6  EC2B  F00C         	call	_drawtext
 11064  0009BA  0012               	return		;funcret
 11065  0009BC                     __end_of_Initialize_Screen:
 11066                           	opt stack 0
 11067                           tblptru	equ	0xFF8
 11068                           tblptrh	equ	0xFF7
 11069                           tblptrl	equ	0xFF6
 11070                           tablat	equ	0xFF5
 11071                           prodh	equ	0xFF4
 11072                           prodl	equ	0xFF3
 11073                           intcon	equ	0xFF2
 11074                           intcon2	equ	0xFF1
 11075                           postinc0	equ	0xFEE
 11076                           wreg	equ	0xFE8
 11077                           postdec1	equ	0xFE5
 11078                           fsr1l	equ	0xFE1
 11079                           postinc2	equ	0xFDE
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _strcpy *****************
 11085 ;; Defined at:
 11086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  to              2   16[COMRAM] PTR unsigned char 
 11089 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 11090 ;;  from            2   18[COMRAM] PTR const unsigned char 
 11091 ;;		 -> STR_35(5), STR_34(5), STR_33(12), STR_32(21), 
 11092 ;;		 -> STR_31(16), STR_30(10), STR_29(11), STR_28(21), 
 11093 ;;		 -> STR_26(5), STR_25(8), STR_24(8), STR_23(20), 
 11094 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_19(4), 
 11095 ;;		 -> STR_18(4), STR_17(5), STR_16(3), STR_15(3), 
 11096 ;;		 -> STR_14(7), STR_13(13), STR_12(9), STR_11(11), 
 11097 ;;		 -> STR_10(5), STR_9(5), STR_8(2), STR_7(3), 
 11098 ;;		 -> STR_6(13), STR_5(22), 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  cp              2   20[COMRAM] PTR unsigned char 
 11101 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  2   16[COMRAM] PTR unsigned char 
 11104 ;; Registers used:
 11105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;Total ram usage:        6 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:    3
 11118 ;; This function calls:
 11119 ;;		Nothing
 11120 ;; This function is called by:
 11121 ;;		_Initialize_Screen
 11122 ;;		_Update_Screen
 11123 ;;		_Initialize_Setup_Alarm_Time_Screen
 11124 ;;		_Initialize_Setup_Heater_Screen
 11125 ;;		_Initialize_Setup_Time_Screen
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           	psect	text57
 11130  0037E8                     __ptext57:
 11131                           	opt stack 0
 11132  0037E8                     _strcpy:
 11133                           	opt stack 26
 11134                           
 11135                           ;incstack = 0
 11136  0037E8  C011  F015         	movff	strcpy@to,strcpy@cp
 11137  0037EC  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 11138  0037F0  D005               	goto	l8555
 11139  0037F2                     l8553:
 11140  0037F2  4A15               	infsnz	strcpy@cp,f,c
 11141  0037F4  2A16               	incf	strcpy@cp+1,f,c
 11142  0037F6  4A13               	infsnz	strcpy@from,f,c
 11143  0037F8  2A14               	incf	strcpy@from+1,f,c
 11144  0037FA  D000               	goto	l8555
 11145  0037FC                     l8555:
 11146  0037FC  C013  FFF6         	movff	strcpy@from,tblptrl
 11147  003800  C014  FFF7         	movff	strcpy@from+1,tblptrh
 11148  003804                     	if	0	;tblptru may be non-zero
 11149  003804                     	endif
 11150  003804                     	if	0	;tblptru may be non-zero
 11151  003804                     	endif
 11152  003804  C015  FFD9         	movff	strcpy@cp,fsr2l
 11153  003808  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 11154  00380C  0008               	tblrd		*
 11155  00380E  CFF5 FFDF          	movff	tablat,indf2
 11156  003812  50DF               	movf	indf2,w,c
 11157  003814  A4D8               	btfss	status,2,c
 11158  003816  D7ED               	goto	l8553
 11159                           
 11160                           ;	Return value of _strcpy is never used
 11161  003818  0012               	return		;funcret
 11162  00381A                     __end_of_strcpy:
 11163                           	opt stack 0
 11164                           tblptru	equ	0xFF8
 11165                           tblptrh	equ	0xFF7
 11166                           tblptrl	equ	0xFF6
 11167                           tablat	equ	0xFF5
 11168                           prodh	equ	0xFF4
 11169                           prodl	equ	0xFF3
 11170                           intcon	equ	0xFF2
 11171                           intcon2	equ	0xFF1
 11172                           postinc0	equ	0xFEE
 11173                           wreg	equ	0xFE8
 11174                           postdec1	equ	0xFE5
 11175                           fsr1l	equ	0xFE1
 11176                           indf2	equ	0xFDF
 11177                           postinc2	equ	0xFDE
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function _fillScreen *****************
 11183 ;; Defined at:
 11184 ;;		line 619 in file "ST7735_TFT.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;  color           2   35[COMRAM] unsigned int 
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;		None               void
 11191 ;; Registers used:
 11192 ;;		wreg, status,2, status,0, cstack
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;Total ram usage:        2 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    7
 11205 ;; This function calls:
 11206 ;;		_fillRectangle
 11207 ;; This function is called by:
 11208 ;;		_Initialize_Screen
 11209 ;;		_Initialize_Setup_Alarm_Time_Screen
 11210 ;;		_Initialize_Setup_Heater_Screen
 11211 ;;		_Initialize_Setup_Time_Screen
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           	psect	text58
 11216  003A2C                     __ptext58:
 11217                           	opt stack 0
 11218  003A2C                     _fillScreen:
 11219                           	opt stack 22
 11220                           
 11221                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 11222                           
 11223                           ;incstack = 0
 11224  003A2C  0E00               	movlw	0
 11225  003A2E  6E18               	movwf	fillRectangle@y,c
 11226  003A30  0E80               	movlw	128
 11227  003A32  6E19               	movwf	fillRectangle@w,c
 11228  003A34  0EA0               	movlw	160
 11229  003A36  6E1A               	movwf	fillRectangle@h,c
 11230  003A38  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 11231  003A3C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 11232  003A40  0E00               	movlw	0
 11233  003A42  EC90  F011         	call	_fillRectangle
 11234  003A46  0012               	return		;funcret
 11235  003A48                     __end_of_fillScreen:
 11236                           	opt stack 0
 11237                           tblptru	equ	0xFF8
 11238                           tblptrh	equ	0xFF7
 11239                           tblptrl	equ	0xFF6
 11240                           tablat	equ	0xFF5
 11241                           prodh	equ	0xFF4
 11242                           prodl	equ	0xFF3
 11243                           intcon	equ	0xFF2
 11244                           intcon2	equ	0xFF1
 11245                           postinc0	equ	0xFEE
 11246                           wreg	equ	0xFE8
 11247                           postdec1	equ	0xFE5
 11248                           fsr1l	equ	0xFE1
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           fsr2h	equ	0xFDA
 11252                           fsr2l	equ	0xFD9
 11253                           status	equ	0xFD8
 11254                           
 11255 ;; *************** function _fillRectangle *****************
 11256 ;; Defined at:
 11257 ;;		line 503 in file "ST7735_TFT.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;  x               1    wreg     unsigned char 
 11260 ;;  y               1   23[COMRAM] unsigned char 
 11261 ;;  w               1   24[COMRAM] unsigned char 
 11262 ;;  h               1   25[COMRAM] unsigned char 
 11263 ;;  color           2   26[COMRAM] unsigned int 
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;  x               1   34[COMRAM] unsigned char 
 11266 ;;  lo              1   33[COMRAM] unsigned char 
 11267 ;;  hi              1   32[COMRAM] unsigned char 
 11268 ;; Return value:  Size  Location     Type
 11269 ;;		None               void
 11270 ;; Registers used:
 11271 ;;		wreg, status,2, status,0, cstack
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11277 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;Total ram usage:       12 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    6
 11284 ;; This function calls:
 11285 ;;		_setAddrWindow
 11286 ;;		_spiwrite
 11287 ;; This function is called by:
 11288 ;;		_fillScreen
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           	psect	text59
 11293  002320                     __ptext59:
 11294                           	opt stack 0
 11295  002320                     _fillRectangle:
 11296                           	opt stack 22
 11297                           
 11298                           ;incstack = 0
 11299                           ;fillRectangle@x stored from wreg
 11300  002320  6E23               	movwf	fillRectangle@x,c
 11301                           
 11302                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 11303                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 11304  002322  0E80               	movlw	128
 11305  002324  6023               	cpfslt	fillRectangle@x,c
 11306  002326  D069               	goto	l802
 11307  002328  0E9F               	movlw	159
 11308  00232A  6418               	cpfsgt	fillRectangle@y,c
 11309  00232C  D001               	goto	l8187
 11310                           
 11311                           ;ST7735_TFT.c: 507: return;
 11312  00232E  D065               	goto	l802
 11313  002330                     l8187:
 11314                           
 11315                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 11316  002330  0EFF               	movlw	255
 11317  002332  6E1D               	movwf	??_fillRectangle& (0+255),c
 11318  002334  0EFF               	movlw	255
 11319  002336  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11320  002338  5019               	movf	fillRectangle@w,w,c
 11321  00233A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 11322  00233E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 11323  002340  261F               	addwf	??_fillRectangle+2,f,c
 11324  002342  0E00               	movlw	0
 11325  002344  2220               	addwfc	??_fillRectangle+3,f,c
 11326  002346  501D               	movf	??_fillRectangle,w,c
 11327  002348  261F               	addwf	??_fillRectangle+2,f,c
 11328  00234A  501E               	movf	??_fillRectangle+1,w,c
 11329  00234C  2220               	addwfc	??_fillRectangle+3,f,c
 11330  00234E  BE20               	btfsc	??_fillRectangle+3,7,c
 11331  002350  D00A               	goto	l803
 11332  002352  5020               	movf	??_fillRectangle+3,w,c
 11333  002354  E104               	bnz	u5760
 11334  002356  0E80               	movlw	128
 11335  002358  5C1F               	subwf	??_fillRectangle+2,w,c
 11336  00235A  A0D8               	btfss	status,0,c
 11337  00235C  D004               	goto	l803
 11338  00235E                     u5760:
 11339                           
 11340                           ;ST7735_TFT.c: 509: w = 128 - x;
 11341  00235E  5023               	movf	fillRectangle@x,w,c
 11342  002360  0800               	sublw	0
 11343  002362  0F80               	addlw	128
 11344  002364  6E19               	movwf	fillRectangle@w,c
 11345  002366                     l803:
 11346                           
 11347                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 11348  002366  0EFF               	movlw	255
 11349  002368  6E1D               	movwf	??_fillRectangle& (0+255),c
 11350  00236A  0EFF               	movlw	255
 11351  00236C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11352  00236E  501A               	movf	fillRectangle@h,w,c
 11353  002370  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 11354  002374  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 11355  002376  261F               	addwf	??_fillRectangle+2,f,c
 11356  002378  0E00               	movlw	0
 11357  00237A  2220               	addwfc	??_fillRectangle+3,f,c
 11358  00237C  501D               	movf	??_fillRectangle,w,c
 11359  00237E  261F               	addwf	??_fillRectangle+2,f,c
 11360  002380  501E               	movf	??_fillRectangle+1,w,c
 11361  002382  2220               	addwfc	??_fillRectangle+3,f,c
 11362  002384  BE20               	btfsc	??_fillRectangle+3,7,c
 11363  002386  D00B               	goto	l8193
 11364  002388  5020               	movf	??_fillRectangle+3,w,c
 11365  00238A  E104               	bnz	u5770
 11366  00238C  0EA0               	movlw	160
 11367  00238E  5C1F               	subwf	??_fillRectangle+2,w,c
 11368  002390  A0D8               	btfss	status,0,c
 11369  002392  D005               	goto	l8193
 11370  002394                     u5770:
 11371                           
 11372                           ;ST7735_TFT.c: 511: h = 160 - y;
 11373  002394  5018               	movf	fillRectangle@y,w,c
 11374  002396  0800               	sublw	0
 11375  002398  0FA0               	addlw	160
 11376  00239A  6E1A               	movwf	fillRectangle@h,c
 11377  00239C  D000               	goto	l8193
 11378  00239E                     l8193:
 11379                           
 11380                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 11381  00239E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 11382  0023A2  5023               	movf	fillRectangle@x,w,c
 11383  0023A4  2419               	addwf	fillRectangle@w,w,c
 11384  0023A6  6E1D               	movwf	??_fillRectangle& (0+255),c
 11385  0023A8  041D               	decf	??_fillRectangle,w,c
 11386  0023AA  6E15               	movwf	setAddrWindow@x1,c
 11387  0023AC  5018               	movf	fillRectangle@y,w,c
 11388  0023AE  241A               	addwf	fillRectangle@h,w,c
 11389  0023B0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11390  0023B2  041E               	decf	??_fillRectangle+1,w,c
 11391  0023B4  6E16               	movwf	setAddrWindow@y1,c
 11392  0023B6  5023               	movf	fillRectangle@x,w,c
 11393  0023B8  ECE8  F019         	call	_setAddrWindow
 11394                           
 11395                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 11396  0023BC  501C               	movf	fillRectangle@color+1,w,c
 11397  0023BE  6E21               	movwf	fillRectangle@hi,c
 11398  0023C0  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 11399                           
 11400                           ;ST7735_TFT.c: 514: PORTDbits.RD3 = 1;
 11401  0023C4  8683               	bsf	3971,3,c	;volatile
 11402                           
 11403                           ;ST7735_TFT.c: 515: PORTDbits.RD4 = 0;
 11404  0023C6  9883               	bcf	3971,4,c	;volatile
 11405                           
 11406                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 11407  0023C8  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 11408  0023CC                     l8205:
 11409  0023CC  5018               	movf	fillRectangle@y,w,c
 11410  0023CE  B4D8               	btfsc	status,2,c
 11411  0023D0  D013               	goto	l806
 11412  0023D2  D001               	goto	l805
 11413  0023D4  D011               	goto	l806
 11414  0023D6                     l805:
 11415                           
 11416                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 11417  0023D6  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 11418  0023DA                     l8209:
 11419  0023DA  5023               	movf	fillRectangle@x,w,c
 11420  0023DC  B4D8               	btfsc	status,2,c
 11421  0023DE  D00A               	goto	l8219
 11422  0023E0  D001               	goto	l8213
 11423  0023E2  D008               	goto	l8219
 11424  0023E4                     l8213:
 11425                           
 11426                           ;ST7735_TFT.c: 519: spiwrite(hi);
 11427  0023E4  5021               	movf	fillRectangle@hi,w,c
 11428  0023E6  ECA0  F01D         	call	_spiwrite
 11429                           
 11430                           ;ST7735_TFT.c: 520: spiwrite(lo);
 11431  0023EA  5022               	movf	fillRectangle@lo,w,c
 11432  0023EC  ECA0  F01D         	call	_spiwrite
 11433  0023F0  0623               	decf	fillRectangle@x,f,c
 11434  0023F2  D7F3               	goto	l8209
 11435  0023F4                     l8219:
 11436  0023F4  0618               	decf	fillRectangle@y,f,c
 11437  0023F6  D7EA               	goto	l8205
 11438  0023F8                     l806:
 11439                           
 11440                           ;ST7735_TFT.c: 521: }
 11441                           ;ST7735_TFT.c: 522: }
 11442                           ;ST7735_TFT.c: 523: PORTDbits.RD4 = 1;
 11443  0023F8  8883               	bsf	3971,4,c	;volatile
 11444  0023FA                     l802:
 11445  0023FA  0012               	return		;funcret
 11446  0023FC                     __end_of_fillRectangle:
 11447                           	opt stack 0
 11448                           tblptru	equ	0xFF8
 11449                           tblptrh	equ	0xFF7
 11450                           tblptrl	equ	0xFF6
 11451                           tablat	equ	0xFF5
 11452                           prodh	equ	0xFF4
 11453                           prodl	equ	0xFF3
 11454                           intcon	equ	0xFF2
 11455                           intcon2	equ	0xFF1
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postdec1	equ	0xFE5
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function _drawCircle *****************
 11467 ;; Defined at:
 11468 ;;		line 528 in file "ST7735_TFT.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  x0              2   27[COMRAM] int 
 11471 ;;  y0              2   29[COMRAM] int 
 11472 ;;  r               2   31[COMRAM] int 
 11473 ;;  color           2   33[COMRAM] unsigned int 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  y               2   45[COMRAM] int 
 11476 ;;  x               2   43[COMRAM] int 
 11477 ;;  f               2   41[COMRAM] int 
 11478 ;;  ddF_y           2   39[COMRAM] int 
 11479 ;;  ddF_x           2   37[COMRAM] int 
 11480 ;; Return value:  Size  Location     Type
 11481 ;;		None               void
 11482 ;; Registers used:
 11483 ;;		wreg, status,2, status,0, cstack
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11489 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;Total ram usage:       20 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    7
 11496 ;; This function calls:
 11497 ;;		_drawPixel
 11498 ;; This function is called by:
 11499 ;;		_Initialize_Screen
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           	psect	text60
 11504  00125C                     __ptext60:
 11505                           	opt stack 0
 11506  00125C                     _drawCircle:
 11507                           	opt stack 22
 11508                           
 11509                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 11510                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11511                           
 11512                           ;incstack = 0
 11513  00125C  C020  F024         	movff	drawCircle@r,??_drawCircle
 11514  001260  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11515  001264  1E24               	comf	??_drawCircle,f,c
 11516  001266  1E25               	comf	??_drawCircle+1,f,c
 11517  001268  4A24               	infsnz	??_drawCircle,f,c
 11518  00126A  2A25               	incf	??_drawCircle+1,f,c
 11519  00126C  0E01               	movlw	1
 11520  00126E  2424               	addwf	??_drawCircle,w,c
 11521  001270  6E2A               	movwf	drawCircle@f,c
 11522  001272  0E00               	movlw	0
 11523  001274  2025               	addwfc	??_drawCircle+1,w,c
 11524  001276  6E2B               	movwf	drawCircle@f+1,c
 11525  001278  0E00               	movlw	0
 11526  00127A  6E27               	movwf	drawCircle@ddF_x+1,c
 11527  00127C  0E01               	movlw	1
 11528  00127E  6E26               	movwf	drawCircle@ddF_x,c
 11529  001280  C020  F024         	movff	drawCircle@r,??_drawCircle
 11530  001284  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11531  001288  90D8               	bcf	status,0,c
 11532  00128A  3624               	rlcf	??_drawCircle,f,c
 11533  00128C  3625               	rlcf	??_drawCircle+1,f,c
 11534  00128E  1E24               	comf	??_drawCircle,f,c
 11535  001290  1E25               	comf	??_drawCircle+1,f,c
 11536  001292  4A24               	infsnz	??_drawCircle,f,c
 11537  001294  2A25               	incf	??_drawCircle+1,f,c
 11538  001296  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11539  00129A  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11540  00129E  0E00               	movlw	0
 11541  0012A0  6E2D               	movwf	drawCircle@x+1,c
 11542  0012A2  0E00               	movlw	0
 11543  0012A4  6E2C               	movwf	drawCircle@x,c
 11544  0012A6  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11545  0012AA  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11546                           
 11547                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 11548  0012AE  501E               	movf	drawCircle@y0,w,c
 11549  0012B0  2420               	addwf	drawCircle@r,w,c
 11550  0012B2  6E18               	movwf	drawPixel@y,c
 11551  0012B4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11552  0012B8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11553  0012BC  501C               	movf	drawCircle@x0,w,c
 11554  0012BE  EC25  F01C         	call	_drawPixel
 11555                           
 11556                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 11557  0012C2  5020               	movf	drawCircle@r,w,c
 11558  0012C4  0800               	sublw	0
 11559  0012C6  241E               	addwf	drawCircle@y0,w,c
 11560  0012C8  6E18               	movwf	drawPixel@y,c
 11561  0012CA  C022  F019         	movff	drawCircle@color,drawPixel@color
 11562  0012CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11563  0012D2  501C               	movf	drawCircle@x0,w,c
 11564  0012D4  EC25  F01C         	call	_drawPixel
 11565                           
 11566                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 11567  0012D8  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11568  0012DC  C022  F019         	movff	drawCircle@color,drawPixel@color
 11569  0012E0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11570  0012E4  501C               	movf	drawCircle@x0,w,c
 11571  0012E6  2420               	addwf	drawCircle@r,w,c
 11572  0012E8  EC25  F01C         	call	_drawPixel
 11573                           
 11574                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 11575  0012EC  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11576  0012F0  C022  F019         	movff	drawCircle@color,drawPixel@color
 11577  0012F4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11578  0012F8  5020               	movf	drawCircle@r,w,c
 11579  0012FA  0800               	sublw	0
 11580  0012FC  241C               	addwf	drawCircle@x0,w,c
 11581  0012FE  EC25  F01C         	call	_drawPixel
 11582                           
 11583                           ;ST7735_TFT.c: 536: while (x < y) {
 11584  001302  D078               	goto	l8639
 11585  001304                     l8611:
 11586                           
 11587                           ;ST7735_TFT.c: 537: if (f >= 0) {
 11588  001304  BE2B               	btfsc	drawCircle@f+1,7,c
 11589  001306  D00B               	goto	l813
 11590                           
 11591                           ;ST7735_TFT.c: 538: y--;
 11592  001308  062E               	decf	drawCircle@y,f,c
 11593  00130A  A0D8               	btfss	status,0,c
 11594  00130C  062F               	decf	drawCircle@y+1,f,c
 11595                           
 11596                           ;ST7735_TFT.c: 539: ddF_y += 2;
 11597  00130E  0E02               	movlw	2
 11598  001310  2628               	addwf	drawCircle@ddF_y,f,c
 11599  001312  0E00               	movlw	0
 11600  001314  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11601                           
 11602                           ;ST7735_TFT.c: 540: f += ddF_y;
 11603  001316  5028               	movf	drawCircle@ddF_y,w,c
 11604  001318  262A               	addwf	drawCircle@f,f,c
 11605  00131A  5029               	movf	drawCircle@ddF_y+1,w,c
 11606  00131C  222B               	addwfc	drawCircle@f+1,f,c
 11607  00131E                     l813:
 11608                           
 11609                           ;ST7735_TFT.c: 541: }
 11610                           ;ST7735_TFT.c: 542: x++;
 11611  00131E  4A2C               	infsnz	drawCircle@x,f,c
 11612  001320  2A2D               	incf	drawCircle@x+1,f,c
 11613                           
 11614                           ;ST7735_TFT.c: 543: ddF_x += 2;
 11615  001322  0E02               	movlw	2
 11616  001324  2626               	addwf	drawCircle@ddF_x,f,c
 11617  001326  0E00               	movlw	0
 11618  001328  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11619                           
 11620                           ;ST7735_TFT.c: 544: f += ddF_x;
 11621  00132A  5026               	movf	drawCircle@ddF_x,w,c
 11622  00132C  262A               	addwf	drawCircle@f,f,c
 11623  00132E  5027               	movf	drawCircle@ddF_x+1,w,c
 11624  001330  222B               	addwfc	drawCircle@f+1,f,c
 11625                           
 11626                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 11627  001332  501E               	movf	drawCircle@y0,w,c
 11628  001334  242E               	addwf	drawCircle@y,w,c
 11629  001336  6E18               	movwf	drawPixel@y,c
 11630  001338  C022  F019         	movff	drawCircle@color,drawPixel@color
 11631  00133C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11632  001340  501C               	movf	drawCircle@x0,w,c
 11633  001342  242C               	addwf	drawCircle@x,w,c
 11634  001344  EC25  F01C         	call	_drawPixel
 11635                           
 11636                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 11637  001348  501E               	movf	drawCircle@y0,w,c
 11638  00134A  242E               	addwf	drawCircle@y,w,c
 11639  00134C  6E18               	movwf	drawPixel@y,c
 11640  00134E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11641  001352  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11642  001356  502C               	movf	drawCircle@x,w,c
 11643  001358  0800               	sublw	0
 11644  00135A  241C               	addwf	drawCircle@x0,w,c
 11645  00135C  EC25  F01C         	call	_drawPixel
 11646                           
 11647                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 11648  001360  502E               	movf	drawCircle@y,w,c
 11649  001362  0800               	sublw	0
 11650  001364  241E               	addwf	drawCircle@y0,w,c
 11651  001366  6E18               	movwf	drawPixel@y,c
 11652  001368  C022  F019         	movff	drawCircle@color,drawPixel@color
 11653  00136C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11654  001370  501C               	movf	drawCircle@x0,w,c
 11655  001372  242C               	addwf	drawCircle@x,w,c
 11656  001374  EC25  F01C         	call	_drawPixel
 11657                           
 11658                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 11659  001378  502E               	movf	drawCircle@y,w,c
 11660  00137A  0800               	sublw	0
 11661  00137C  241E               	addwf	drawCircle@y0,w,c
 11662  00137E  6E18               	movwf	drawPixel@y,c
 11663  001380  C022  F019         	movff	drawCircle@color,drawPixel@color
 11664  001384  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11665  001388  502C               	movf	drawCircle@x,w,c
 11666  00138A  0800               	sublw	0
 11667  00138C  241C               	addwf	drawCircle@x0,w,c
 11668  00138E  EC25  F01C         	call	_drawPixel
 11669                           
 11670                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 11671  001392  501E               	movf	drawCircle@y0,w,c
 11672  001394  242C               	addwf	drawCircle@x,w,c
 11673  001396  6E18               	movwf	drawPixel@y,c
 11674  001398  C022  F019         	movff	drawCircle@color,drawPixel@color
 11675  00139C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11676  0013A0  501C               	movf	drawCircle@x0,w,c
 11677  0013A2  242E               	addwf	drawCircle@y,w,c
 11678  0013A4  EC25  F01C         	call	_drawPixel
 11679                           
 11680                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 11681  0013A8  501E               	movf	drawCircle@y0,w,c
 11682  0013AA  242C               	addwf	drawCircle@x,w,c
 11683  0013AC  6E18               	movwf	drawPixel@y,c
 11684  0013AE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11685  0013B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11686  0013B6  502E               	movf	drawCircle@y,w,c
 11687  0013B8  0800               	sublw	0
 11688  0013BA  241C               	addwf	drawCircle@x0,w,c
 11689  0013BC  EC25  F01C         	call	_drawPixel
 11690                           
 11691                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 11692  0013C0  502C               	movf	drawCircle@x,w,c
 11693  0013C2  0800               	sublw	0
 11694  0013C4  241E               	addwf	drawCircle@y0,w,c
 11695  0013C6  6E18               	movwf	drawPixel@y,c
 11696  0013C8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11697  0013CC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11698  0013D0  501C               	movf	drawCircle@x0,w,c
 11699  0013D2  242E               	addwf	drawCircle@y,w,c
 11700  0013D4  EC25  F01C         	call	_drawPixel
 11701                           
 11702                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 11703  0013D8  502C               	movf	drawCircle@x,w,c
 11704  0013DA  0800               	sublw	0
 11705  0013DC  241E               	addwf	drawCircle@y0,w,c
 11706  0013DE  6E18               	movwf	drawPixel@y,c
 11707  0013E0  C022  F019         	movff	drawCircle@color,drawPixel@color
 11708  0013E4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11709  0013E8  502E               	movf	drawCircle@y,w,c
 11710  0013EA  0800               	sublw	0
 11711  0013EC  241C               	addwf	drawCircle@x0,w,c
 11712  0013EE  EC25  F01C         	call	_drawPixel
 11713  0013F2  D000               	goto	l8639
 11714  0013F4                     l8639:
 11715  0013F4  502E               	movf	drawCircle@y,w,c
 11716  0013F6  5C2C               	subwf	drawCircle@x,w,c
 11717  0013F8  502D               	movf	drawCircle@x+1,w,c
 11718  0013FA  0A80               	xorlw	128
 11719  0013FC  6E24               	movwf	??_drawCircle& (0+255),c
 11720  0013FE  502F               	movf	drawCircle@y+1,w,c
 11721  001400  0A80               	xorlw	128
 11722  001402  5824               	subwfb	??_drawCircle& (0+255),w,c
 11723  001404  A0D8               	btfss	status,0,c
 11724  001406  D77E               	goto	l8611
 11725  001408  0012               	return		;funcret
 11726  00140A                     __end_of_drawCircle:
 11727                           	opt stack 0
 11728                           tblptru	equ	0xFF8
 11729                           tblptrh	equ	0xFF7
 11730                           tblptrl	equ	0xFF6
 11731                           tablat	equ	0xFF5
 11732                           prodh	equ	0xFF4
 11733                           prodl	equ	0xFF3
 11734                           intcon	equ	0xFF2
 11735                           intcon2	equ	0xFF1
 11736                           postinc0	equ	0xFEE
 11737                           wreg	equ	0xFE8
 11738                           postdec1	equ	0xFE5
 11739                           fsr1l	equ	0xFE1
 11740                           indf2	equ	0xFDF
 11741                           postinc2	equ	0xFDE
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _TFT_GreenTab_Initialize *****************
 11747 ;; Defined at:
 11748 ;;		line 644 in file "ST7735_TFT.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;		None               void
 11755 ;; Registers used:
 11756 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;Total ram usage:        0 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    6
 11769 ;; This function calls:
 11770 ;;		_Rcmd1
 11771 ;;		_Rcmd2red
 11772 ;;		_Rcmd3
 11773 ;;		_write_command
 11774 ;;		_write_data
 11775 ;; This function is called by:
 11776 ;;		_Initialize_Screen
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           	psect	text61
 11781  0038D0                     __ptext61:
 11782                           	opt stack 0
 11783  0038D0                     _TFT_GreenTab_Initialize:
 11784                           	opt stack 23
 11785                           
 11786                           ;ST7735_TFT.c: 646: PORTDbits.RD4 = 1;
 11787                           
 11788                           ;incstack = 0
 11789  0038D0  8883               	bsf	3971,4,c	;volatile
 11790                           
 11791                           ;ST7735_TFT.c: 647: PORTDbits.RD3 = 0;
 11792  0038D2  9683               	bcf	3971,3,c	;volatile
 11793                           
 11794                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11795  0038D4  0E80               	movlw	128
 11796  0038D6  6EC7               	movwf	4039,c	;volatile
 11797                           
 11798                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11799  0038D8  0E30               	movlw	48
 11800  0038DA  6EC6               	movwf	4038,c	;volatile
 11801                           
 11802                           ;ST7735_TFT.c: 653: Rcmd1();
 11803  0038DC  ECB8  F00C         	call	_Rcmd1	;wreg free
 11804                           
 11805                           ;ST7735_TFT.c: 654: Rcmd2red();
 11806  0038E0  EC0A  F01B         	call	_Rcmd2red	;wreg free
 11807                           
 11808                           ;ST7735_TFT.c: 655: Rcmd3();
 11809  0038E4  ECC3  F00F         	call	_Rcmd3	;wreg free
 11810                           
 11811                           ;ST7735_TFT.c: 656: write_command(0x36);
 11812  0038E8  0E36               	movlw	54
 11813  0038EA  EC24  F01E         	call	_write_command
 11814                           
 11815                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11816  0038EE  0EC0               	movlw	192
 11817  0038F0  EC1C  F01E         	call	_write_data
 11818                           
 11819                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11820  0038F4  0E01               	movlw	1
 11821  0038F6  6E54               	movwf	__tft_type,c
 11822  0038F8  0012               	return		;funcret
 11823  0038FA                     __end_of_TFT_GreenTab_Initialize:
 11824                           	opt stack 0
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           intcon2	equ	0xFF1
 11833                           postinc0	equ	0xFEE
 11834                           wreg	equ	0xFE8
 11835                           postdec1	equ	0xFE5
 11836                           fsr1l	equ	0xFE1
 11837                           indf2	equ	0xFDF
 11838                           postinc2	equ	0xFDE
 11839                           fsr2h	equ	0xFDA
 11840                           fsr2l	equ	0xFD9
 11841                           status	equ	0xFD8
 11842                           
 11843 ;; *************** function _Rcmd3 *****************
 11844 ;; Defined at:
 11845 ;;		line 338 in file "ST7735_TFT.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;		None               void
 11852 ;; Registers used:
 11853 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11863 ;;Total ram usage:        0 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    5
 11866 ;; This function calls:
 11867 ;;		_delay_ms
 11868 ;;		_write_command
 11869 ;;		_write_data
 11870 ;; This function is called by:
 11871 ;;		_TFT_GreenTab_Initialize
 11872 ;;		_TFT_BlackTab_Initialize
 11873 ;; This function uses a non-reentrant model
 11874 ;;
 11875                           
 11876                           	psect	text62
 11877  001F86                     __ptext62:
 11878                           	opt stack 0
 11879  001F86                     _Rcmd3:
 11880                           	opt stack 23
 11881                           
 11882                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11883                           
 11884                           ;incstack = 0
 11885  001F86  0EE0               	movlw	224
 11886  001F88  EC24  F01E         	call	_write_command
 11887                           
 11888                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11889  001F8C  0E02               	movlw	2
 11890  001F8E  EC1C  F01E         	call	_write_data
 11891  001F92  0E1C               	movlw	28
 11892  001F94  EC1C  F01E         	call	_write_data
 11893  001F98  0E07               	movlw	7
 11894  001F9A  EC1C  F01E         	call	_write_data
 11895  001F9E  0E12               	movlw	18
 11896  001FA0  EC1C  F01E         	call	_write_data
 11897                           
 11898                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11899  001FA4  0E37               	movlw	55
 11900  001FA6  EC1C  F01E         	call	_write_data
 11901  001FAA  0E32               	movlw	50
 11902  001FAC  EC1C  F01E         	call	_write_data
 11903  001FB0  0E29               	movlw	41
 11904  001FB2  EC1C  F01E         	call	_write_data
 11905  001FB6  0E2D               	movlw	45
 11906  001FB8  EC1C  F01E         	call	_write_data
 11907                           
 11908                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11909  001FBC  0E29               	movlw	41
 11910  001FBE  EC1C  F01E         	call	_write_data
 11911  001FC2  0E25               	movlw	37
 11912  001FC4  EC1C  F01E         	call	_write_data
 11913  001FC8  0E2B               	movlw	43
 11914  001FCA  EC1C  F01E         	call	_write_data
 11915  001FCE  0E39               	movlw	57
 11916  001FD0  EC1C  F01E         	call	_write_data
 11917                           
 11918                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11919  001FD4  0E00               	movlw	0
 11920  001FD6  EC1C  F01E         	call	_write_data
 11921  001FDA  0E01               	movlw	1
 11922  001FDC  EC1C  F01E         	call	_write_data
 11923  001FE0  0E03               	movlw	3
 11924  001FE2  EC1C  F01E         	call	_write_data
 11925  001FE6  0E10               	movlw	16
 11926  001FE8  EC1C  F01E         	call	_write_data
 11927                           
 11928                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11929  001FEC  0EE1               	movlw	225
 11930  001FEE  EC24  F01E         	call	_write_command
 11931                           
 11932                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11933  001FF2  0E03               	movlw	3
 11934  001FF4  EC1C  F01E         	call	_write_data
 11935  001FF8  0E1D               	movlw	29
 11936  001FFA  EC1C  F01E         	call	_write_data
 11937  001FFE  0E07               	movlw	7
 11938  002000  EC1C  F01E         	call	_write_data
 11939  002004  0E06               	movlw	6
 11940  002006  EC1C  F01E         	call	_write_data
 11941                           
 11942                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11943  00200A  0E2E               	movlw	46
 11944  00200C  EC1C  F01E         	call	_write_data
 11945  002010  0E2C               	movlw	44
 11946  002012  EC1C  F01E         	call	_write_data
 11947  002016  0E29               	movlw	41
 11948  002018  EC1C  F01E         	call	_write_data
 11949  00201C  0E2D               	movlw	45
 11950  00201E  EC1C  F01E         	call	_write_data
 11951                           
 11952                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11953  002022  0E2E               	movlw	46
 11954  002024  EC1C  F01E         	call	_write_data
 11955  002028  0E2E               	movlw	46
 11956  00202A  EC1C  F01E         	call	_write_data
 11957  00202E  0E37               	movlw	55
 11958  002030  EC1C  F01E         	call	_write_data
 11959  002034  0E3F               	movlw	63
 11960  002036  EC1C  F01E         	call	_write_data
 11961                           
 11962                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11963  00203A  0E00               	movlw	0
 11964  00203C  EC1C  F01E         	call	_write_data
 11965  002040  0E00               	movlw	0
 11966  002042  EC1C  F01E         	call	_write_data
 11967  002046  0E02               	movlw	2
 11968  002048  EC1C  F01E         	call	_write_data
 11969  00204C  0E10               	movlw	16
 11970  00204E  EC1C  F01E         	call	_write_data
 11971                           
 11972                           ;ST7735_TFT.c: 350: write_command(0x13);
 11973  002052  0E13               	movlw	19
 11974  002054  EC24  F01E         	call	_write_command
 11975                           
 11976                           ;ST7735_TFT.c: 351: delay_ms(10);
 11977  002058  0E00               	movlw	0
 11978  00205A  6E18               	movwf	delay_ms@ms+1,c
 11979  00205C  0E0A               	movlw	10
 11980  00205E  6E17               	movwf	delay_ms@ms,c
 11981  002060  EC98  F019         	call	_delay_ms	;wreg free
 11982                           
 11983                           ;ST7735_TFT.c: 352: write_command(0x29);
 11984  002064  0E29               	movlw	41
 11985  002066  EC24  F01E         	call	_write_command
 11986                           
 11987                           ;ST7735_TFT.c: 353: delay_ms(100);
 11988  00206A  0E00               	movlw	0
 11989  00206C  6E18               	movwf	delay_ms@ms+1,c
 11990  00206E  0E64               	movlw	100
 11991  002070  6E17               	movwf	delay_ms@ms,c
 11992  002072  EC98  F019         	call	_delay_ms	;wreg free
 11993  002076  0012               	return		;funcret
 11994  002078                     __end_of_Rcmd3:
 11995                           	opt stack 0
 11996                           tblptru	equ	0xFF8
 11997                           tblptrh	equ	0xFF7
 11998                           tblptrl	equ	0xFF6
 11999                           tablat	equ	0xFF5
 12000                           prodh	equ	0xFF4
 12001                           prodl	equ	0xFF3
 12002                           intcon	equ	0xFF2
 12003                           intcon2	equ	0xFF1
 12004                           postinc0	equ	0xFEE
 12005                           wreg	equ	0xFE8
 12006                           postdec1	equ	0xFE5
 12007                           fsr1l	equ	0xFE1
 12008                           indf2	equ	0xFDF
 12009                           postinc2	equ	0xFDE
 12010                           fsr2h	equ	0xFDA
 12011                           fsr2l	equ	0xFD9
 12012                           status	equ	0xFD8
 12013                           
 12014 ;; *************** function _Rcmd2red *****************
 12015 ;; Defined at:
 12016 ;;		line 328 in file "ST7735_TFT.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;		None
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;		None
 12021 ;; Return value:  Size  Location     Type
 12022 ;;		None               void
 12023 ;; Registers used:
 12024 ;;		wreg, status,2, cstack
 12025 ;; Tracked objects:
 12026 ;;		On entry : 0/0
 12027 ;;		On exit  : 0/0
 12028 ;;		Unchanged: 0/0
 12029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;Total ram usage:        0 bytes
 12035 ;; Hardware stack levels used:    1
 12036 ;; Hardware stack levels required when called:    5
 12037 ;; This function calls:
 12038 ;;		_write_command
 12039 ;;		_write_data
 12040 ;; This function is called by:
 12041 ;;		_TFT_GreenTab_Initialize
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           	psect	text63
 12046  003614                     __ptext63:
 12047                           	opt stack 0
 12048  003614                     _Rcmd2red:
 12049                           	opt stack 23
 12050                           
 12051                           ;ST7735_TFT.c: 330: write_command(0x2A);
 12052                           
 12053                           ;incstack = 0
 12054  003614  0E2A               	movlw	42
 12055  003616  EC24  F01E         	call	_write_command
 12056                           
 12057                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 12058  00361A  0E00               	movlw	0
 12059  00361C  EC1C  F01E         	call	_write_data
 12060  003620  0E00               	movlw	0
 12061  003622  EC1C  F01E         	call	_write_data
 12062                           
 12063                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 12064  003626  0E00               	movlw	0
 12065  003628  EC1C  F01E         	call	_write_data
 12066  00362C  0E7F               	movlw	127
 12067  00362E  EC1C  F01E         	call	_write_data
 12068                           
 12069                           ;ST7735_TFT.c: 333: write_command(0x2B);
 12070  003632  0E2B               	movlw	43
 12071  003634  EC24  F01E         	call	_write_command
 12072                           
 12073                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 12074  003638  0E00               	movlw	0
 12075  00363A  EC1C  F01E         	call	_write_data
 12076  00363E  0E00               	movlw	0
 12077  003640  EC1C  F01E         	call	_write_data
 12078                           
 12079                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 12080  003644  0E00               	movlw	0
 12081  003646  EC1C  F01E         	call	_write_data
 12082  00364A  0E9F               	movlw	159
 12083  00364C  EC1C  F01E         	call	_write_data
 12084  003650  0012               	return		;funcret
 12085  003652                     __end_of_Rcmd2red:
 12086                           	opt stack 0
 12087                           tblptru	equ	0xFF8
 12088                           tblptrh	equ	0xFF7
 12089                           tblptrl	equ	0xFF6
 12090                           tablat	equ	0xFF5
 12091                           prodh	equ	0xFF4
 12092                           prodl	equ	0xFF3
 12093                           intcon	equ	0xFF2
 12094                           intcon2	equ	0xFF1
 12095                           postinc0	equ	0xFEE
 12096                           wreg	equ	0xFE8
 12097                           postdec1	equ	0xFE5
 12098                           fsr1l	equ	0xFE1
 12099                           indf2	equ	0xFDF
 12100                           postinc2	equ	0xFDE
 12101                           fsr2h	equ	0xFDA
 12102                           fsr2l	equ	0xFD9
 12103                           status	equ	0xFD8
 12104                           
 12105 ;; *************** function _Rcmd1 *****************
 12106 ;; Defined at:
 12107 ;;		line 281 in file "ST7735_TFT.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;		None
 12110 ;; Auto vars:     Size  Location     Type
 12111 ;;		None
 12112 ;; Return value:  Size  Location     Type
 12113 ;;		None               void
 12114 ;; Registers used:
 12115 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12125 ;;Total ram usage:        0 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    5
 12128 ;; This function calls:
 12129 ;;		_delay_ms
 12130 ;;		_write_command
 12131 ;;		_write_data
 12132 ;; This function is called by:
 12133 ;;		_TFT_GreenTab_Initialize
 12134 ;;		_TFT_BlackTab_Initialize
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text64
 12139  001970                     __ptext64:
 12140                           	opt stack 0
 12141  001970                     _Rcmd1:
 12142                           	opt stack 23
 12143                           
 12144                           ;ST7735_TFT.c: 283: write_command(0x01);
 12145                           
 12146                           ;incstack = 0
 12147  001970  0E01               	movlw	1
 12148  001972  EC24  F01E         	call	_write_command
 12149                           
 12150                           ;ST7735_TFT.c: 284: delay_ms(150);
 12151  001976  0E00               	movlw	0
 12152  001978  6E18               	movwf	delay_ms@ms+1,c
 12153  00197A  0E96               	movlw	150
 12154  00197C  6E17               	movwf	delay_ms@ms,c
 12155  00197E  EC98  F019         	call	_delay_ms	;wreg free
 12156                           
 12157                           ;ST7735_TFT.c: 285: write_command(0x11);
 12158  001982  0E11               	movlw	17
 12159  001984  EC24  F01E         	call	_write_command
 12160                           
 12161                           ;ST7735_TFT.c: 286: delay_ms(500);
 12162  001988  0E01               	movlw	1
 12163  00198A  6E18               	movwf	delay_ms@ms+1,c
 12164  00198C  0EF4               	movlw	244
 12165  00198E  6E17               	movwf	delay_ms@ms,c
 12166  001990  EC98  F019         	call	_delay_ms	;wreg free
 12167                           
 12168                           ;ST7735_TFT.c: 287: write_command(0xB1);
 12169  001994  0EB1               	movlw	177
 12170  001996  EC24  F01E         	call	_write_command
 12171                           
 12172                           ;ST7735_TFT.c: 288: write_data(0x01);
 12173  00199A  0E01               	movlw	1
 12174  00199C  EC1C  F01E         	call	_write_data
 12175                           
 12176                           ;ST7735_TFT.c: 289: write_data(0x2C);
 12177  0019A0  0E2C               	movlw	44
 12178  0019A2  EC1C  F01E         	call	_write_data
 12179                           
 12180                           ;ST7735_TFT.c: 290: write_data(0x2D);
 12181  0019A6  0E2D               	movlw	45
 12182  0019A8  EC1C  F01E         	call	_write_data
 12183                           
 12184                           ;ST7735_TFT.c: 291: write_command(0xB2);
 12185  0019AC  0EB2               	movlw	178
 12186  0019AE  EC24  F01E         	call	_write_command
 12187                           
 12188                           ;ST7735_TFT.c: 292: write_data(0x01);
 12189  0019B2  0E01               	movlw	1
 12190  0019B4  EC1C  F01E         	call	_write_data
 12191                           
 12192                           ;ST7735_TFT.c: 293: write_data(0x2C);
 12193  0019B8  0E2C               	movlw	44
 12194  0019BA  EC1C  F01E         	call	_write_data
 12195                           
 12196                           ;ST7735_TFT.c: 294: write_data(0x2D);
 12197  0019BE  0E2D               	movlw	45
 12198  0019C0  EC1C  F01E         	call	_write_data
 12199                           
 12200                           ;ST7735_TFT.c: 295: write_command(0xB3);
 12201  0019C4  0EB3               	movlw	179
 12202  0019C6  EC24  F01E         	call	_write_command
 12203                           
 12204                           ;ST7735_TFT.c: 296: write_data(0x01);
 12205  0019CA  0E01               	movlw	1
 12206  0019CC  EC1C  F01E         	call	_write_data
 12207                           
 12208                           ;ST7735_TFT.c: 297: write_data(0x2C);
 12209  0019D0  0E2C               	movlw	44
 12210  0019D2  EC1C  F01E         	call	_write_data
 12211                           
 12212                           ;ST7735_TFT.c: 298: write_data(0x2D);
 12213  0019D6  0E2D               	movlw	45
 12214  0019D8  EC1C  F01E         	call	_write_data
 12215                           
 12216                           ;ST7735_TFT.c: 299: write_data(0x01);
 12217  0019DC  0E01               	movlw	1
 12218  0019DE  EC1C  F01E         	call	_write_data
 12219                           
 12220                           ;ST7735_TFT.c: 300: write_data(0x2C);
 12221  0019E2  0E2C               	movlw	44
 12222  0019E4  EC1C  F01E         	call	_write_data
 12223                           
 12224                           ;ST7735_TFT.c: 301: write_data(0x2D);
 12225  0019E8  0E2D               	movlw	45
 12226  0019EA  EC1C  F01E         	call	_write_data
 12227                           
 12228                           ;ST7735_TFT.c: 302: write_command(0xB4);
 12229  0019EE  0EB4               	movlw	180
 12230  0019F0  EC24  F01E         	call	_write_command
 12231                           
 12232                           ;ST7735_TFT.c: 303: write_data(0x07);
 12233  0019F4  0E07               	movlw	7
 12234  0019F6  EC1C  F01E         	call	_write_data
 12235                           
 12236                           ;ST7735_TFT.c: 304: write_command(0xC0);
 12237  0019FA  0EC0               	movlw	192
 12238  0019FC  EC24  F01E         	call	_write_command
 12239                           
 12240                           ;ST7735_TFT.c: 305: write_data(0xA2);
 12241  001A00  0EA2               	movlw	162
 12242  001A02  EC1C  F01E         	call	_write_data
 12243                           
 12244                           ;ST7735_TFT.c: 306: write_data(0x02);
 12245  001A06  0E02               	movlw	2
 12246  001A08  EC1C  F01E         	call	_write_data
 12247                           
 12248                           ;ST7735_TFT.c: 307: write_data(0x84);
 12249  001A0C  0E84               	movlw	132
 12250  001A0E  EC1C  F01E         	call	_write_data
 12251                           
 12252                           ;ST7735_TFT.c: 308: write_command(0xC1);
 12253  001A12  0EC1               	movlw	193
 12254  001A14  EC24  F01E         	call	_write_command
 12255                           
 12256                           ;ST7735_TFT.c: 309: write_data(0xC5);
 12257  001A18  0EC5               	movlw	197
 12258  001A1A  EC1C  F01E         	call	_write_data
 12259                           
 12260                           ;ST7735_TFT.c: 310: write_command(0xC2);
 12261  001A1E  0EC2               	movlw	194
 12262  001A20  EC24  F01E         	call	_write_command
 12263                           
 12264                           ;ST7735_TFT.c: 311: write_data(0x0A);
 12265  001A24  0E0A               	movlw	10
 12266  001A26  EC1C  F01E         	call	_write_data
 12267                           
 12268                           ;ST7735_TFT.c: 312: write_data(0x00);
 12269  001A2A  0E00               	movlw	0
 12270  001A2C  EC1C  F01E         	call	_write_data
 12271                           
 12272                           ;ST7735_TFT.c: 313: write_command(0xC3);
 12273  001A30  0EC3               	movlw	195
 12274  001A32  EC24  F01E         	call	_write_command
 12275                           
 12276                           ;ST7735_TFT.c: 314: write_data(0x8A);
 12277  001A36  0E8A               	movlw	138
 12278  001A38  EC1C  F01E         	call	_write_data
 12279                           
 12280                           ;ST7735_TFT.c: 315: write_data(0x2A);
 12281  001A3C  0E2A               	movlw	42
 12282  001A3E  EC1C  F01E         	call	_write_data
 12283                           
 12284                           ;ST7735_TFT.c: 316: write_command(0xC4);
 12285  001A42  0EC4               	movlw	196
 12286  001A44  EC24  F01E         	call	_write_command
 12287                           
 12288                           ;ST7735_TFT.c: 317: write_data(0x8A);
 12289  001A48  0E8A               	movlw	138
 12290  001A4A  EC1C  F01E         	call	_write_data
 12291                           
 12292                           ;ST7735_TFT.c: 318: write_data(0xEE);
 12293  001A4E  0EEE               	movlw	238
 12294  001A50  EC1C  F01E         	call	_write_data
 12295                           
 12296                           ;ST7735_TFT.c: 319: write_command(0xC5);
 12297  001A54  0EC5               	movlw	197
 12298  001A56  EC24  F01E         	call	_write_command
 12299                           
 12300                           ;ST7735_TFT.c: 320: write_data(0x0E);
 12301  001A5A  0E0E               	movlw	14
 12302  001A5C  EC1C  F01E         	call	_write_data
 12303                           
 12304                           ;ST7735_TFT.c: 321: write_command(0x20);
 12305  001A60  0E20               	movlw	32
 12306  001A62  EC24  F01E         	call	_write_command
 12307                           
 12308                           ;ST7735_TFT.c: 322: write_command(0x36);
 12309  001A66  0E36               	movlw	54
 12310  001A68  EC24  F01E         	call	_write_command
 12311                           
 12312                           ;ST7735_TFT.c: 323: write_data(0xC8);
 12313  001A6C  0EC8               	movlw	200
 12314  001A6E  EC1C  F01E         	call	_write_data
 12315                           
 12316                           ;ST7735_TFT.c: 324: write_command(0x3A);
 12317  001A72  0E3A               	movlw	58
 12318  001A74  EC24  F01E         	call	_write_command
 12319                           
 12320                           ;ST7735_TFT.c: 325: write_data(0x05);
 12321  001A78  0E05               	movlw	5
 12322  001A7A  EC1C  F01E         	call	_write_data
 12323  001A7E  0012               	return		;funcret
 12324  001A80                     __end_of_Rcmd1:
 12325                           	opt stack 0
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           intcon	equ	0xFF2
 12333                           intcon2	equ	0xFF1
 12334                           postinc0	equ	0xFEE
 12335                           wreg	equ	0xFE8
 12336                           postdec1	equ	0xFE5
 12337                           fsr1l	equ	0xFE1
 12338                           indf2	equ	0xFDF
 12339                           postinc2	equ	0xFDE
 12340                           fsr2h	equ	0xFDA
 12341                           fsr2l	equ	0xFD9
 12342                           status	equ	0xFD8
 12343                           
 12344 ;; *************** function _LCD_Reset *****************
 12345 ;; Defined at:
 12346 ;;		line 217 in file "ST7735_TFT.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;		None
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;		None
 12351 ;; Return value:  Size  Location     Type
 12352 ;;		None               void
 12353 ;; Registers used:
 12354 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12355 ;; Tracked objects:
 12356 ;;		On entry : 0/0
 12357 ;;		On exit  : 0/0
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12364 ;;Total ram usage:        0 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    5
 12367 ;; This function calls:
 12368 ;;		_delay_ms
 12369 ;; This function is called by:
 12370 ;;		_Initialize_Screen
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           	psect	text65
 12375  003B8C                     __ptext65:
 12376                           	opt stack 0
 12377  003B8C                     _LCD_Reset:
 12378                           	opt stack 24
 12379                           
 12380                           ;ST7735_TFT.c: 219: PORTDbits.RD5 = 0;
 12381                           
 12382                           ;incstack = 0
 12383  003B8C  9A83               	bcf	3971,5,c	;volatile
 12384                           
 12385                           ;ST7735_TFT.c: 220: delay_ms(100);
 12386  003B8E  0E00               	movlw	0
 12387  003B90  6E18               	movwf	delay_ms@ms+1,c
 12388  003B92  0E64               	movlw	100
 12389  003B94  6E17               	movwf	delay_ms@ms,c
 12390  003B96  EC98  F019         	call	_delay_ms	;wreg free
 12391                           
 12392                           ;ST7735_TFT.c: 221: PORTDbits.RD5 = 1;
 12393  003B9A  8A83               	bsf	3971,5,c	;volatile
 12394  003B9C  0012               	return		;funcret
 12395  003B9E                     __end_of_LCD_Reset:
 12396                           	opt stack 0
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           intcon2	equ	0xFF1
 12405                           postinc0	equ	0xFEE
 12406                           wreg	equ	0xFE8
 12407                           postdec1	equ	0xFE5
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           fsr2h	equ	0xFDA
 12412                           fsr2l	equ	0xFD9
 12413                           status	equ	0xFD8
 12414                           
 12415 ;; *************** function _delay_ms *****************
 12416 ;; Defined at:
 12417 ;;		line 64 in file "ST7735_TFT.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  ms              2   22[COMRAM] int 
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  count           2   26[COMRAM] int 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;		None               void
 12424 ;; Registers used:
 12425 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;Total ram usage:        6 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    4
 12438 ;; This function calls:
 12439 ;;		___wmul
 12440 ;; This function is called by:
 12441 ;;		_LCD_Reset
 12442 ;;		_Rcmd1
 12443 ;;		_Rcmd3
 12444 ;;		_Bcmd
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           	psect	text66
 12449  003330                     __ptext66:
 12450                           	opt stack 0
 12451  003330                     _delay_ms:
 12452                           	opt stack 23
 12453                           
 12454                           ;ST7735_TFT.c: 70: int count;
 12455                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 12456                           
 12457                           ;incstack = 0
 12458  003330  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 12459  003334  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 12460  003338  0E00               	movlw	0
 12461  00333A  6E14               	movwf	___wmul@multiplicand+1,c
 12462  00333C  0E7D               	movlw	125
 12463  00333E  6E13               	movwf	___wmul@multiplicand,c
 12464  003340  EC7D  F01C         	call	___wmul	;wreg free
 12465  003344  C011  F01B         	movff	?___wmul,delay_ms@count
 12466  003348  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 12467                           
 12468                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 12469  00334C  C01B  F019         	movff	delay_ms@count,??_delay_ms
 12470  003350  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 12471  003354  1E19               	comf	??_delay_ms,f,c
 12472  003356  1E1A               	comf	??_delay_ms+1,f,c
 12473  003358  4A19               	infsnz	??_delay_ms,f,c
 12474  00335A  2A1A               	incf	??_delay_ms+1,f,c
 12475  00335C  0EFF               	movlw	255
 12476  00335E  2419               	addwf	??_delay_ms,w,c
 12477  003360  6E1B               	movwf	delay_ms@count,c
 12478  003362  0EFF               	movlw	255
 12479  003364  201A               	addwfc	??_delay_ms+1,w,c
 12480  003366  6E1C               	movwf	delay_ms@count+1,c
 12481                           
 12482                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 12483  003368  0E03               	movlw	3
 12484  00336A  6ED5               	movwf	4053,c	;volatile
 12485                           
 12486                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 12487  00336C  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 12488                           
 12489                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 12490  003370  501C               	movf	delay_ms@count+1,w,c
 12491  003372  6ED7               	movwf	4055,c	;volatile
 12492                           
 12493                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 12494  003374  94F2               	bcf	intcon,2,c	;volatile
 12495                           
 12496                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 12497  003376  8ED5               	bsf	4053,7,c	;volatile
 12498                           
 12499                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 12500  003378  D000               	goto	l689
 12501  00337A                     l689:
 12502  00337A  A4F2               	btfss	intcon,2,c	;volatile
 12503  00337C  D7FE               	goto	l689
 12504                           
 12505                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 12506  00337E  9ED5               	bcf	4053,7,c	;volatile
 12507  003380  0012               	return		;funcret
 12508  003382                     __end_of_delay_ms:
 12509                           	opt stack 0
 12510                           tblptru	equ	0xFF8
 12511                           tblptrh	equ	0xFF7
 12512                           tblptrl	equ	0xFF6
 12513                           tablat	equ	0xFF5
 12514                           prodh	equ	0xFF4
 12515                           prodl	equ	0xFF3
 12516                           intcon	equ	0xFF2
 12517                           intcon2	equ	0xFF1
 12518                           postinc0	equ	0xFEE
 12519                           wreg	equ	0xFE8
 12520                           postdec1	equ	0xFE5
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12529 ;; Defined at:
 12530 ;;		line 169 in file "I2C_Support.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;		None
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;  Address         1    4[BANK1 ] unsigned char 
 12535 ;;  Device          1    3[BANK1 ] unsigned char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;		None               void
 12538 ;; Registers used:
 12539 ;;		wreg, status,2, status,0, cstack
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;Total ram usage:        2 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    7
 12552 ;; This function calls:
 12553 ;;		_DS3231_Read_Time
 12554 ;;		_I2C_Start
 12555 ;;		_I2C_Stop
 12556 ;;		_I2C_Write
 12557 ;;		_dec_2_bcd
 12558 ;; This function is called by:
 12559 ;;		_Do_Save_New_Alarm_Time
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           	psect	text67
 12564  002D80                     __ptext67:
 12565                           	opt stack 0
 12566  002D80                     _DS3231_Write_Alarm_Time:
 12567                           	opt stack 21
 12568                           
 12569                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12570                           
 12571                           ;incstack = 0
 12572  002D80  EC88  F018         	call	_DS3231_Read_Time	;wreg free
 12573                           
 12574                           ;I2C_Support.c: 172: alarm_date = day;
 12575  002D84  C05B  F055         	movff	_day,_alarm_date
 12576                           
 12577                           ;I2C_Support.c: 173: char Device = 0x68;
 12578  002D88  0E68               	movlw	104
 12579  002D8A  0101               	movlb	1	; () banked
 12580  002D8C  6F37               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 12581                           
 12582                           ; BSR set to: 1
 12583                           ;I2C_Support.c: 174: char Address = 0x07;
 12584  002D8E  0E07               	movlw	7
 12585  002D90  0101               	movlb	1	; () banked
 12586  002D92  6F38               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 12587                           
 12588                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12589  002D94  5064               	movf	_setup_alarm_hour,w,c
 12590  002D96  EC56  F018         	call	_dec_2_bcd
 12591  002D9A  0100               	movlb	0	; () banked
 12592  002D9C  51FB               	movf	?_dec_2_bcd& (0+255),w,b
 12593  002D9E  6E56               	movwf	_alarm_hour,c
 12594                           
 12595                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12596  002DA0  5065               	movf	_setup_alarm_minute,w,c
 12597  002DA2  EC56  F018         	call	_dec_2_bcd
 12598  002DA6  0100               	movlb	0	; () banked
 12599  002DA8  51FB               	movf	?_dec_2_bcd& (0+255),w,b
 12600  002DAA  6E57               	movwf	_alarm_minute,c
 12601                           
 12602                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12603  002DAC  5066               	movf	_setup_alarm_second,w,c
 12604  002DAE  EC56  F018         	call	_dec_2_bcd
 12605  002DB2  0100               	movlb	0	; () banked
 12606  002DB4  51FB               	movf	?_dec_2_bcd& (0+255),w,b
 12607  002DB6  6E58               	movwf	_alarm_second,c
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12611  002DB8  5058               	movf	_alarm_second,w,c
 12612  002DBA  0B7F               	andlw	127
 12613  002DBC  6E58               	movwf	_alarm_second,c
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12617  002DBE  5057               	movf	_alarm_minute,w,c
 12618  002DC0  0B7F               	andlw	127
 12619  002DC2  6E57               	movwf	_alarm_minute,c
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12623  002DC4  5056               	movf	_alarm_hour,w,c
 12624  002DC6  0B7F               	andlw	127
 12625  002DC8  6E56               	movwf	_alarm_hour,c
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12629  002DCA  5055               	movf	_alarm_date,w,c
 12630  002DCC  0980               	iorlw	128
 12631  002DCE  6E55               	movwf	_alarm_date,c
 12632                           
 12633                           ; BSR set to: 0
 12634                           ;I2C_Support.c: 182: I2C_Start();
 12635  002DD0  ECEA  F01D         	call	_I2C_Start	;wreg free
 12636                           
 12637                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12638  002DD4  0101               	movlb	1	; () banked
 12639  002DD6  5137               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12640  002DD8  2537               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12641  002DDA  EC48  F01B         	call	_I2C_Write
 12642                           
 12643                           ;I2C_Support.c: 184: I2C_Write(Address);
 12644  002DDE  0101               	movlb	1	; () banked
 12645  002DE0  5138               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 12646  002DE2  EC48  F01B         	call	_I2C_Write
 12647                           
 12648                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12649  002DE6  5058               	movf	_alarm_second,w,c
 12650  002DE8  EC48  F01B         	call	_I2C_Write
 12651                           
 12652                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12653  002DEC  5057               	movf	_alarm_minute,w,c
 12654  002DEE  EC48  F01B         	call	_I2C_Write
 12655                           
 12656                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12657  002DF2  5056               	movf	_alarm_hour,w,c
 12658  002DF4  EC48  F01B         	call	_I2C_Write
 12659                           
 12660                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12661  002DF8  5055               	movf	_alarm_date,w,c
 12662  002DFA  EC48  F01B         	call	_I2C_Write
 12663                           
 12664                           ;I2C_Support.c: 190: I2C_Stop();
 12665  002DFE  ECE1  F01D         	call	_I2C_Stop	;wreg free
 12666  002E02  0012               	return		;funcret
 12667  002E04                     __end_of_DS3231_Write_Alarm_Time:
 12668                           	opt stack 0
 12669                           tblptru	equ	0xFF8
 12670                           tblptrh	equ	0xFF7
 12671                           tblptrl	equ	0xFF6
 12672                           tablat	equ	0xFF5
 12673                           prodh	equ	0xFF4
 12674                           prodl	equ	0xFF3
 12675                           intcon	equ	0xFF2
 12676                           intcon2	equ	0xFF1
 12677                           postinc0	equ	0xFEE
 12678                           wreg	equ	0xFE8
 12679                           postdec1	equ	0xFE5
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           fsr2h	equ	0xFDA
 12684                           fsr2l	equ	0xFD9
 12685                           status	equ	0xFD8
 12686                           
 12687 ;; *************** function _dec_2_bcd *****************
 12688 ;; Defined at:
 12689 ;;		line 54 in file "utils.c"
 12690 ;; Parameters:    Size  Location     Type
 12691 ;;  dec             1    wreg     unsigned char 
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;  dec             1    2[BANK1 ] unsigned char 
 12694 ;;  bcd             2    0[BANK1 ] int 
 12695 ;; Return value:  Size  Location     Type
 12696 ;;                  2    0[BANK0 ] int 
 12697 ;; Registers used:
 12698 ;;		wreg, status,2, status,0, cstack
 12699 ;; Tracked objects:
 12700 ;;		On entry : 0/0
 12701 ;;		On exit  : 0/0
 12702 ;;		Unchanged: 0/0
 12703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12704 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12705 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;      Totals:         0       4       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;Total ram usage:        7 bytes
 12709 ;; Hardware stack levels used:    1
 12710 ;; Hardware stack levels required when called:    4
 12711 ;; This function calls:
 12712 ;;		___awdiv
 12713 ;;		___awmod
 12714 ;; This function is called by:
 12715 ;;		_DS3231_Write_Time
 12716 ;;		_DS3231_Write_Alarm_Time
 12717 ;; This function uses a non-reentrant model
 12718 ;;
 12719                           
 12720                           	psect	text68
 12721  0030AC                     __ptext68:
 12722                           	opt stack 0
 12723  0030AC                     _dec_2_bcd:
 12724                           	opt stack 23
 12725                           
 12726                           ;incstack = 0
 12727                           ;dec_2_bcd@dec stored from wreg
 12728  0030AC  0101               	movlb	1	; () banked
 12729  0030AE  6F36               	movwf	dec_2_bcd@dec& (0+255),b
 12730                           
 12731                           ; BSR set to: 1
 12732                           ;utils.c: 56: int bcd;
 12733                           ;utils.c: 57: bcd = ((dec / 10) << 4) + (dec % 10);
 12734  0030B0  C136  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 12735  0030B4  6A18               	clrf	___awdiv@dividend+1,c
 12736  0030B6  0E00               	movlw	0
 12737  0030B8  6E1A               	movwf	___awdiv@divisor+1,c
 12738  0030BA  0E0A               	movlw	10
 12739  0030BC  6E19               	movwf	___awdiv@divisor,c
 12740  0030BE  ECCD  F014         	call	___awdiv	;wreg free
 12741  0030C2  C017  F0FD         	movff	?___awdiv,??_dec_2_bcd
 12742  0030C6  C018  F0FE         	movff	?___awdiv+1,??_dec_2_bcd+1
 12743  0030CA  0100               	movlb	0	; () banked
 12744  0030CC  3BFD               	swapf	??_dec_2_bcd& (0+255),f,b
 12745  0030CE  3BFE               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 12746  0030D0  0EF0               	movlw	240
 12747  0030D2  17FE               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 12748  0030D4  51FD               	movf	??_dec_2_bcd& (0+255),w,b
 12749  0030D6  0B0F               	andlw	15
 12750  0030D8  13FE               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 12751  0030DA  0EF0               	movlw	240
 12752  0030DC  17FD               	andwf	??_dec_2_bcd& (0+255),f,b
 12753  0030DE  C136  F03B         	movff	dec_2_bcd@dec,___awmod@dividend
 12754  0030E2  6A3C               	clrf	___awmod@dividend+1,c
 12755  0030E4  0E00               	movlw	0
 12756  0030E6  6E3E               	movwf	___awmod@divisor+1,c
 12757  0030E8  0E0A               	movlw	10
 12758  0030EA  6E3D               	movwf	___awmod@divisor,c
 12759  0030EC  EC02  F017         	call	___awmod	;wreg free
 12760  0030F0  503B               	movf	?___awmod,w,c
 12761  0030F2  0100               	movlb	0	; () banked
 12762  0030F4  25FD               	addwf	??_dec_2_bcd& (0+255),w,b
 12763  0030F6  0101               	movlb	1	; () banked
 12764  0030F8  6F34               	movwf	dec_2_bcd@bcd& (0+255),b
 12765  0030FA  503C               	movf	?___awmod+1,w,c
 12766  0030FC  0100               	movlb	0	; () banked
 12767  0030FE  21FE               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 12768  003100  0101               	movlb	1	; () banked
 12769  003102  6F35               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 12770                           
 12771                           ; BSR set to: 1
 12772                           ;utils.c: 58: return bcd;
 12773  003104  C134  F0FB         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12774  003108  C135  F0FC         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12775  00310C  D000               	goto	l1320
 12776  00310E                     l1320:
 12777                           
 12778                           ; BSR set to: 1
 12779  00310E  0012               	return		;funcret
 12780  003110                     __end_of_dec_2_bcd:
 12781                           	opt stack 0
 12782                           tblptru	equ	0xFF8
 12783                           tblptrh	equ	0xFF7
 12784                           tblptrl	equ	0xFF6
 12785                           tablat	equ	0xFF5
 12786                           prodh	equ	0xFF4
 12787                           prodl	equ	0xFF3
 12788                           intcon	equ	0xFF2
 12789                           intcon2	equ	0xFF1
 12790                           postinc0	equ	0xFEE
 12791                           wreg	equ	0xFE8
 12792                           postdec1	equ	0xFE5
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           fsr2h	equ	0xFDA
 12797                           fsr2l	equ	0xFD9
 12798                           status	equ	0xFD8
 12799                           
 12800 ;; *************** function _DS3231_Read_Time *****************
 12801 ;; Defined at:
 12802 ;;		line 45 in file "I2C_Support.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;		None
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  Device          1   20[COMRAM] unsigned char 
 12807 ;;  Address         1   19[COMRAM] unsigned char 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;		None               void
 12810 ;; Registers used:
 12811 ;;		wreg, status,2, status,0, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;Total ram usage:        2 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    6
 12824 ;; This function calls:
 12825 ;;		_I2C_ReStart
 12826 ;;		_I2C_Read
 12827 ;;		_I2C_Start
 12828 ;;		_I2C_Stop
 12829 ;;		_I2C_Write
 12830 ;; This function is called by:
 12831 ;;		_DS3231_Write_Alarm_Time
 12832 ;;		_main
 12833 ;;		_Exit_Setup_Alarm_Time
 12834 ;;		_Do_Save_New_Alarm_Time
 12835 ;;		_Exit_Setup_Heater_Temp
 12836 ;;		_Do_Save_New_Heater_Temp
 12837 ;;		_Do_Setup_Time
 12838 ;;		_Do_Save_New_Time
 12839 ;;		_Exit_Time_Setup
 12840 ;; This function uses a non-reentrant model
 12841 ;;
 12842                           
 12843                           	psect	text69
 12844  003110                     __ptext69:
 12845                           	opt stack 0
 12846  003110                     _DS3231_Read_Time:
 12847                           	opt stack 22
 12848                           
 12849                           ;I2C_Support.c: 47: char Device = 0x68;
 12850                           
 12851                           ; BSR set to: 1
 12852                           ;incstack = 0
 12853  003110  0E68               	movlw	104
 12854  003112  6E15               	movwf	DS3231_Read_Time@Device,c
 12855                           
 12856                           ;I2C_Support.c: 48: char Address = 0x00;
 12857  003114  0E00               	movlw	0
 12858  003116  6E14               	movwf	DS3231_Read_Time@Address,c
 12859                           
 12860                           ;I2C_Support.c: 50: I2C_Start();
 12861  003118  ECEA  F01D         	call	_I2C_Start	;wreg free
 12862                           
 12863                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12864  00311C  5015               	movf	DS3231_Read_Time@Device,w,c
 12865  00311E  2415               	addwf	DS3231_Read_Time@Device,w,c
 12866  003120  EC48  F01B         	call	_I2C_Write
 12867                           
 12868                           ;I2C_Support.c: 52: I2C_Write(Address);
 12869  003124  5014               	movf	DS3231_Read_Time@Address,w,c
 12870  003126  EC48  F01B         	call	_I2C_Write
 12871                           
 12872                           ;I2C_Support.c: 53: I2C_ReStart();
 12873  00312A  EC6D  F01D         	call	_I2C_ReStart	;wreg free
 12874                           
 12875                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12876  00312E  80D8               	bsf	status,0,c
 12877  003130  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12878  003132  EC48  F01B         	call	_I2C_Write
 12879                           
 12880                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12881  003136  0E01               	movlw	1
 12882  003138  ECA5  F01A         	call	_I2C_Read
 12883  00313C  6E63               	movwf	_second,c
 12884                           
 12885                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12886  00313E  0E01               	movlw	1
 12887  003140  ECA5  F01A         	call	_I2C_Read
 12888  003144  6E60               	movwf	_minute,c
 12889                           
 12890                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12891  003146  0E01               	movlw	1
 12892  003148  ECA5  F01A         	call	_I2C_Read
 12893  00314C  6E5F               	movwf	_hour,c
 12894                           
 12895                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12896  00314E  0E01               	movlw	1
 12897  003150  ECA5  F01A         	call	_I2C_Read
 12898  003154  6E5C               	movwf	_dow,c
 12899                           
 12900                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12901  003156  0E01               	movlw	1
 12902  003158  ECA5  F01A         	call	_I2C_Read
 12903  00315C  6E5B               	movwf	_day,c
 12904                           
 12905                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12906  00315E  0E01               	movlw	1
 12907  003160  ECA5  F01A         	call	_I2C_Read
 12908  003164  6E61               	movwf	_month,c
 12909                           
 12910                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12911  003166  0E00               	movlw	0
 12912  003168  ECA5  F01A         	call	_I2C_Read
 12913  00316C  6E6E               	movwf	_year,c
 12914                           
 12915                           ;I2C_Support.c: 62: I2C_Stop();
 12916  00316E  ECE1  F01D         	call	_I2C_Stop	;wreg free
 12917  003172  0012               	return		;funcret
 12918  003174                     __end_of_DS3231_Read_Time:
 12919                           	opt stack 0
 12920                           tblptru	equ	0xFF8
 12921                           tblptrh	equ	0xFF7
 12922                           tblptrl	equ	0xFF6
 12923                           tablat	equ	0xFF5
 12924                           prodh	equ	0xFF4
 12925                           prodl	equ	0xFF3
 12926                           intcon	equ	0xFF2
 12927                           intcon2	equ	0xFF1
 12928                           postinc0	equ	0xFEE
 12929                           wreg	equ	0xFE8
 12930                           postdec1	equ	0xFE5
 12931                           fsr1l	equ	0xFE1
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           fsr2h	equ	0xFDA
 12935                           fsr2l	equ	0xFD9
 12936                           status	equ	0xFD8
 12937                           
 12938 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12939 ;; Defined at:
 12940 ;;		line 115 in file "I2C_Support.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;		None
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;  Device          1   20[COMRAM] unsigned char 
 12945 ;;  Address         1   19[COMRAM] unsigned char 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;		None               void
 12948 ;; Registers used:
 12949 ;;		wreg, status,2, status,0, cstack
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;Total ram usage:        2 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    6
 12962 ;; This function calls:
 12963 ;;		_I2C_ReStart
 12964 ;;		_I2C_Read
 12965 ;;		_I2C_Start
 12966 ;;		_I2C_Stop
 12967 ;;		_I2C_Write
 12968 ;; This function is called by:
 12969 ;;		_main
 12970 ;;		_Do_Setup_Alarm_Time
 12971 ;;		_Do_Save_New_Alarm_Time
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text70
 12976  00341E                     __ptext70:
 12977                           	opt stack 0
 12978  00341E                     _DS3231_Read_Alarm_Time:
 12979                           	opt stack 22
 12980                           
 12981                           ;I2C_Support.c: 117: char Device = 0x68;
 12982                           
 12983                           ;incstack = 0
 12984  00341E  0E68               	movlw	104
 12985  003420  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12986                           
 12987                           ;I2C_Support.c: 118: char Address = 0x07;
 12988  003422  0E07               	movlw	7
 12989  003424  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12990                           
 12991                           ;I2C_Support.c: 119: I2C_Start();
 12992  003426  ECEA  F01D         	call	_I2C_Start	;wreg free
 12993                           
 12994                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12995  00342A  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12996  00342C  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12997  00342E  EC48  F01B         	call	_I2C_Write
 12998                           
 12999                           ;I2C_Support.c: 121: I2C_Write(Address);
 13000  003432  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 13001  003434  EC48  F01B         	call	_I2C_Write
 13002                           
 13003                           ;I2C_Support.c: 122: I2C_ReStart();
 13004  003438  EC6D  F01D         	call	_I2C_ReStart	;wreg free
 13005                           
 13006                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 13007  00343C  80D8               	bsf	status,0,c
 13008  00343E  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 13009  003440  EC48  F01B         	call	_I2C_Write
 13010                           
 13011                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 13012  003444  0E01               	movlw	1
 13013  003446  ECA5  F01A         	call	_I2C_Read
 13014  00344A  6E58               	movwf	_alarm_second,c
 13015                           
 13016                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 13017  00344C  0E01               	movlw	1
 13018  00344E  ECA5  F01A         	call	_I2C_Read
 13019  003452  6E57               	movwf	_alarm_minute,c
 13020                           
 13021                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 13022  003454  0E01               	movlw	1
 13023  003456  ECA5  F01A         	call	_I2C_Read
 13024  00345A  6E56               	movwf	_alarm_hour,c
 13025                           
 13026                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 13027  00345C  0E00               	movlw	0
 13028  00345E  ECA5  F01A         	call	_I2C_Read
 13029  003462  6E55               	movwf	_alarm_date,c
 13030                           
 13031                           ;I2C_Support.c: 128: I2C_Stop();
 13032  003464  ECE1  F01D         	call	_I2C_Stop	;wreg free
 13033  003468  0012               	return		;funcret
 13034  00346A                     __end_of_DS3231_Read_Alarm_Time:
 13035                           	opt stack 0
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           intcon2	equ	0xFF1
 13044                           postinc0	equ	0xFEE
 13045                           wreg	equ	0xFE8
 13046                           postdec1	equ	0xFE5
 13047                           fsr1l	equ	0xFE1
 13048                           indf2	equ	0xFDF
 13049                           postinc2	equ	0xFDE
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _Do_Beep_Good *****************
 13055 ;; Defined at:
 13056 ;;		line 70 in file "utils.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;		None
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;		None
 13061 ;; Return value:  Size  Location     Type
 13062 ;;		None               void
 13063 ;; Registers used:
 13064 ;;		wreg, status,2, status,0, cstack
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;Total ram usage:        0 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:    4
 13077 ;; This function calls:
 13078 ;;		_Activate_Buzzer_2KHz
 13079 ;;		_Deactivate_Buzzer
 13080 ;;		_Wait_One_Sec
 13081 ;; This function is called by:
 13082 ;;		_main
 13083 ;;		_Do_Setup_Alarm_Time
 13084 ;;		_Do_Setup_Heater_Temp
 13085 ;;		_Do_Setup_Time
 13086 ;; This function uses a non-reentrant model
 13087 ;;
 13088                           
 13089                           	psect	text71
 13090  003C58                     __ptext71:
 13091                           	opt stack 0
 13092  003C58                     _Do_Beep_Good:
 13093                           	opt stack 25
 13094                           
 13095                           ;utils.c: 72: Activate_Buzzer_2KHz();
 13096                           
 13097                           ;incstack = 0
 13098  003C58  ECCF  F01D         	call	_Activate_Buzzer_2KHz	;wreg free
 13099                           
 13100                           ;utils.c: 73: Wait_One_Sec();
 13101  003C5C  ECD8  F01C         	call	_Wait_One_Sec	;wreg free
 13102                           
 13103                           ;utils.c: 74: Deactivate_Buzzer();
 13104  003C60  EC6D  F01E         	call	_Deactivate_Buzzer	;wreg free
 13105  003C64  0012               	return		;funcret
 13106  003C66                     __end_of_Do_Beep_Good:
 13107                           	opt stack 0
 13108                           tblptru	equ	0xFF8
 13109                           tblptrh	equ	0xFF7
 13110                           tblptrl	equ	0xFF6
 13111                           tablat	equ	0xFF5
 13112                           prodh	equ	0xFF4
 13113                           prodl	equ	0xFF3
 13114                           intcon	equ	0xFF2
 13115                           intcon2	equ	0xFF1
 13116                           postinc0	equ	0xFEE
 13117                           wreg	equ	0xFE8
 13118                           postdec1	equ	0xFE5
 13119                           fsr1l	equ	0xFE1
 13120                           indf2	equ	0xFDF
 13121                           postinc2	equ	0xFDE
 13122                           fsr2h	equ	0xFDA
 13123                           fsr2l	equ	0xFD9
 13124                           status	equ	0xFD8
 13125                           
 13126 ;; *************** function _Activate_Buzzer_2KHz *****************
 13127 ;; Defined at:
 13128 ;;		line 110 in file "utils.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;		None
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;		None
 13133 ;; Return value:  Size  Location     Type
 13134 ;;		None               void
 13135 ;; Registers used:
 13136 ;;		wreg, status,2
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;Total ram usage:        0 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    3
 13149 ;; This function calls:
 13150 ;;		Nothing
 13151 ;; This function is called by:
 13152 ;;		_Do_Beep_Good
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           	psect	text72
 13157  003B9E                     __ptext72:
 13158                           	opt stack 0
 13159  003B9E                     _Activate_Buzzer_2KHz:
 13160                           	opt stack 25
 13161                           
 13162                           ;utils.c: 112: PR2 = 0b11111001 ;
 13163                           
 13164                           ;incstack = 0
 13165  003B9E  0EF9               	movlw	249
 13166  003BA0  6ECB               	movwf	4043,c	;volatile
 13167                           
 13168                           ;utils.c: 113: T2CON = 0b00000101 ;
 13169  003BA2  0E05               	movlw	5
 13170  003BA4  6ECA               	movwf	4042,c	;volatile
 13171                           
 13172                           ;utils.c: 114: CCPR2L = 0b01001010 ;
 13173  003BA6  0E4A               	movlw	74
 13174  003BA8  6EBB               	movwf	4027,c	;volatile
 13175                           
 13176                           ;utils.c: 115: CCP2CON = 0b00111100 ;
 13177  003BAA  0E3C               	movlw	60
 13178  003BAC  6EBA               	movwf	4026,c	;volatile
 13179  003BAE  0012               	return		;funcret
 13180  003BB0                     __end_of_Activate_Buzzer_2KHz:
 13181                           	opt stack 0
 13182                           tblptru	equ	0xFF8
 13183                           tblptrh	equ	0xFF7
 13184                           tblptrl	equ	0xFF6
 13185                           tablat	equ	0xFF5
 13186                           prodh	equ	0xFF4
 13187                           prodl	equ	0xFF3
 13188                           intcon	equ	0xFF2
 13189                           intcon2	equ	0xFF1
 13190                           postinc0	equ	0xFEE
 13191                           wreg	equ	0xFE8
 13192                           postdec1	equ	0xFE5
 13193                           fsr1l	equ	0xFE1
 13194                           indf2	equ	0xFDF
 13195                           postinc2	equ	0xFDE
 13196                           fsr2h	equ	0xFDA
 13197                           fsr2l	equ	0xFD9
 13198                           status	equ	0xFD8
 13199                           
 13200 ;; *************** function _Do_Beep_Bad *****************
 13201 ;; Defined at:
 13202 ;;		line 77 in file "utils.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;		None
 13205 ;; Auto vars:     Size  Location     Type
 13206 ;;		None
 13207 ;; Return value:  Size  Location     Type
 13208 ;;		None               void
 13209 ;; Registers used:
 13210 ;;		wreg, status,2, status,0, cstack
 13211 ;; Tracked objects:
 13212 ;;		On entry : 0/0
 13213 ;;		On exit  : 0/0
 13214 ;;		Unchanged: 0/0
 13215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13220 ;;Total ram usage:        0 bytes
 13221 ;; Hardware stack levels used:    1
 13222 ;; Hardware stack levels required when called:    4
 13223 ;; This function calls:
 13224 ;;		_Activate_Buzzer_500Hz
 13225 ;;		_Deactivate_Buzzer
 13226 ;;		_Wait_One_Sec
 13227 ;; This function is called by:
 13228 ;;		_main
 13229 ;;		_Do_Setup_Alarm_Time
 13230 ;;		_Do_Setup_Heater_Temp
 13231 ;;		_Do_Setup_Time
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           	psect	text73
 13236  003C66                     __ptext73:
 13237                           	opt stack 0
 13238  003C66                     _Do_Beep_Bad:
 13239                           	opt stack 25
 13240                           
 13241                           ;utils.c: 79: Activate_Buzzer_500Hz();
 13242                           
 13243                           ;incstack = 0
 13244  003C66  ECD8  F01D         	call	_Activate_Buzzer_500Hz	;wreg free
 13245                           
 13246                           ;utils.c: 80: Wait_One_Sec();
 13247  003C6A  ECD8  F01C         	call	_Wait_One_Sec	;wreg free
 13248                           
 13249                           ;utils.c: 81: Deactivate_Buzzer();
 13250  003C6E  EC6D  F01E         	call	_Deactivate_Buzzer	;wreg free
 13251  003C72  0012               	return		;funcret
 13252  003C74                     __end_of_Do_Beep_Bad:
 13253                           	opt stack 0
 13254                           tblptru	equ	0xFF8
 13255                           tblptrh	equ	0xFF7
 13256                           tblptrl	equ	0xFF6
 13257                           tablat	equ	0xFF5
 13258                           prodh	equ	0xFF4
 13259                           prodl	equ	0xFF3
 13260                           intcon	equ	0xFF2
 13261                           intcon2	equ	0xFF1
 13262                           postinc0	equ	0xFEE
 13263                           wreg	equ	0xFE8
 13264                           postdec1	equ	0xFE5
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           fsr2h	equ	0xFDA
 13269                           fsr2l	equ	0xFD9
 13270                           status	equ	0xFD8
 13271                           
 13272 ;; *************** function _Wait_One_Sec *****************
 13273 ;; Defined at:
 13274 ;;		line 84 in file "utils.c"
 13275 ;; Parameters:    Size  Location     Type
 13276 ;;		None
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;  k               2   16[COMRAM] int 
 13279 ;; Return value:  Size  Location     Type
 13280 ;;		None               void
 13281 ;; Registers used:
 13282 ;;		wreg, status,2, status,0
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13291 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13292 ;;Total ram usage:        2 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; Hardware stack levels required when called:    3
 13295 ;; This function calls:
 13296 ;;		Nothing
 13297 ;; This function is called by:
 13298 ;;		_Do_Beep_Good
 13299 ;;		_Do_Beep_Bad
 13300 ;;		_Do_Beep
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           	psect	text74
 13305  0039B0                     __ptext74:
 13306                           	opt stack 0
 13307  0039B0                     _Wait_One_Sec:
 13308                           	opt stack 25
 13309                           
 13310                           ;utils.c: 86: for (int k=0;k<0xffff;k++);
 13311                           
 13312                           ;incstack = 0
 13313  0039B0  0E00               	movlw	0
 13314  0039B2  6E12               	movwf	Wait_One_Sec@k+1,c
 13315  0039B4  0E00               	movlw	0
 13316  0039B6  6E11               	movwf	Wait_One_Sec@k,c
 13317  0039B8                     l6369:
 13318  0039B8  2811               	incf	Wait_One_Sec@k,w,c
 13319  0039BA  E105               	bnz	l6373
 13320  0039BC  2812               	incf	Wait_One_Sec@k+1,w,c
 13321  0039BE  B4D8               	btfsc	status,2,c
 13322  0039C0  D006               	goto	l1334
 13323  0039C2  D001               	goto	l6373
 13324  0039C4  D004               	goto	l1334
 13325  0039C6                     l6373:
 13326  0039C6  4A11               	infsnz	Wait_One_Sec@k,f,c
 13327  0039C8  2A12               	incf	Wait_One_Sec@k+1,f,c
 13328  0039CA  D7F6               	goto	l6369
 13329  0039CC  D7FC               	goto	l6373
 13330  0039CE                     l1334:
 13331  0039CE  0012               	return		;funcret
 13332  0039D0                     __end_of_Wait_One_Sec:
 13333                           	opt stack 0
 13334                           tblptru	equ	0xFF8
 13335                           tblptrh	equ	0xFF7
 13336                           tblptrl	equ	0xFF6
 13337                           tablat	equ	0xFF5
 13338                           prodh	equ	0xFF4
 13339                           prodl	equ	0xFF3
 13340                           intcon	equ	0xFF2
 13341                           intcon2	equ	0xFF1
 13342                           postinc0	equ	0xFEE
 13343                           wreg	equ	0xFE8
 13344                           postdec1	equ	0xFE5
 13345                           fsr1l	equ	0xFE1
 13346                           indf2	equ	0xFDF
 13347                           postinc2	equ	0xFDE
 13348                           fsr2h	equ	0xFDA
 13349                           fsr2l	equ	0xFD9
 13350                           status	equ	0xFD8
 13351                           
 13352 ;; *************** function _Deactivate_Buzzer *****************
 13353 ;; Defined at:
 13354 ;;		line 126 in file "utils.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;		None
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;		None
 13359 ;; Return value:  Size  Location     Type
 13360 ;;		None               void
 13361 ;; Registers used:
 13362 ;;		wreg, status,2
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;Total ram usage:        0 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    3
 13375 ;; This function calls:
 13376 ;;		Nothing
 13377 ;; This function is called by:
 13378 ;;		_clr_alarm
 13379 ;;		_Test_Alarm
 13380 ;;		_Do_Beep_Good
 13381 ;;		_Do_Beep_Bad
 13382 ;;		_Do_Beep
 13383 ;; This function uses a non-reentrant model
 13384 ;;
 13385                           
 13386                           	psect	text75
 13387  003CDA                     __ptext75:
 13388                           	opt stack 0
 13389  003CDA                     _Deactivate_Buzzer:
 13390                           	opt stack 25
 13391                           
 13392                           ;utils.c: 128: CCP2CON = 0x0;
 13393                           
 13394                           ;incstack = 0
 13395  003CDA  0E00               	movlw	0
 13396  003CDC  6EBA               	movwf	4026,c	;volatile
 13397                           
 13398                           ;utils.c: 129: PORTBbits.RB3 = 0;
 13399  003CDE  9681               	bcf	3969,3,c	;volatile
 13400  003CE0  0012               	return		;funcret
 13401  003CE2                     __end_of_Deactivate_Buzzer:
 13402                           	opt stack 0
 13403                           tblptru	equ	0xFF8
 13404                           tblptrh	equ	0xFF7
 13405                           tblptrl	equ	0xFF6
 13406                           tablat	equ	0xFF5
 13407                           prodh	equ	0xFF4
 13408                           prodl	equ	0xFF3
 13409                           intcon	equ	0xFF2
 13410                           intcon2	equ	0xFF1
 13411                           postinc0	equ	0xFEE
 13412                           wreg	equ	0xFE8
 13413                           postdec1	equ	0xFE5
 13414                           fsr1l	equ	0xFE1
 13415                           indf2	equ	0xFDF
 13416                           postinc2	equ	0xFDE
 13417                           fsr2h	equ	0xFDA
 13418                           fsr2l	equ	0xFD9
 13419                           status	equ	0xFD8
 13420                           
 13421 ;; *************** function _Activate_Buzzer_500Hz *****************
 13422 ;; Defined at:
 13423 ;;		line 102 in file "utils.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;		None
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;		None
 13428 ;; Return value:  Size  Location     Type
 13429 ;;		None               void
 13430 ;; Registers used:
 13431 ;;		wreg, status,2
 13432 ;; Tracked objects:
 13433 ;;		On entry : 0/0
 13434 ;;		On exit  : 0/0
 13435 ;;		Unchanged: 0/0
 13436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;Total ram usage:        0 bytes
 13442 ;; Hardware stack levels used:    1
 13443 ;; Hardware stack levels required when called:    3
 13444 ;; This function calls:
 13445 ;;		Nothing
 13446 ;; This function is called by:
 13447 ;;		_Do_Beep_Bad
 13448 ;; This function uses a non-reentrant model
 13449 ;;
 13450                           
 13451                           	psect	text76
 13452  003BB0                     __ptext76:
 13453                           	opt stack 0
 13454  003BB0                     _Activate_Buzzer_500Hz:
 13455                           	opt stack 25
 13456                           
 13457                           ;utils.c: 104: PR2 = 0b11111001 ;
 13458                           
 13459                           ;incstack = 0
 13460  003BB0  0EF9               	movlw	249
 13461  003BB2  6ECB               	movwf	4043,c	;volatile
 13462                           
 13463                           ;utils.c: 105: T2CON = 0b00000111 ;
 13464  003BB4  0E07               	movlw	7
 13465  003BB6  6ECA               	movwf	4042,c	;volatile
 13466                           
 13467                           ;utils.c: 106: CCPR2L = 0b01001010 ;
 13468  003BB8  0E4A               	movlw	74
 13469  003BBA  6EBB               	movwf	4027,c	;volatile
 13470                           
 13471                           ;utils.c: 107: CCP2CON = 0b00111100 ;
 13472  003BBC  0E3C               	movlw	60
 13473  003BBE  6EBA               	movwf	4026,c	;volatile
 13474  003BC0  0012               	return		;funcret
 13475  003BC2                     __end_of_Activate_Buzzer_500Hz:
 13476                           	opt stack 0
 13477                           tblptru	equ	0xFF8
 13478                           tblptrh	equ	0xFF7
 13479                           tblptrl	equ	0xFF6
 13480                           tablat	equ	0xFF5
 13481                           prodh	equ	0xFF4
 13482                           prodl	equ	0xFF3
 13483                           intcon	equ	0xFF2
 13484                           intcon2	equ	0xFF1
 13485                           postinc0	equ	0xFEE
 13486                           wreg	equ	0xFE8
 13487                           postdec1	equ	0xFE5
 13488                           fsr1l	equ	0xFE1
 13489                           indf2	equ	0xFDF
 13490                           postinc2	equ	0xFDE
 13491                           fsr2h	equ	0xFDA
 13492                           fsr2l	equ	0xFD9
 13493                           status	equ	0xFD8
 13494                           
 13495 ;; *************** function _Decrease_Alarm_Time *****************
 13496 ;; Defined at:
 13497 ;;		line 83 in file "Setup_Alarm_Time.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;		None
 13500 ;; Auto vars:     Size  Location     Type
 13501 ;;		None
 13502 ;; Return value:  Size  Location     Type
 13503 ;;		None               void
 13504 ;; Registers used:
 13505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;Total ram usage:        0 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:   11
 13518 ;; This function calls:
 13519 ;;		_Update_Setup_Alarm_Time_Screen
 13520 ;; This function is called by:
 13521 ;;		_Do_Setup_Alarm_Time
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           	psect	text77
 13526  003382                     __ptext77:
 13527                           	opt stack 0
 13528  003382                     _Decrease_Alarm_Time:
 13529                           	opt stack 18
 13530                           
 13531                           ;Setup_Alarm_Time.c: 85: switch (Select_Alarm_Field)
 13532                           
 13533                           ;incstack = 0
 13534  003382  D018               	goto	l9263
 13535  003384                     l9243:
 13536                           
 13537                           ;Setup_Alarm_Time.c: 88: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13538  003384  5064               	movf	_setup_alarm_hour,w,c
 13539  003386  A4D8               	btfss	status,2,c
 13540  003388  D003               	goto	l9247
 13541  00338A  0E17               	movlw	23
 13542  00338C  6E64               	movwf	_setup_alarm_hour,c
 13543  00338E  D01D               	goto	l9265
 13544  003390                     l9247:
 13545                           
 13546                           ;Setup_Alarm_Time.c: 89: else --setup_alarm_hour;
 13547  003390  0664               	decf	_setup_alarm_hour,f,c
 13548                           
 13549                           ;Setup_Alarm_Time.c: 90: break;
 13550  003392  D01B               	goto	l9265
 13551  003394                     l9249:
 13552                           
 13553                           ;Setup_Alarm_Time.c: 93: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13554  003394  5065               	movf	_setup_alarm_minute,w,c
 13555  003396  A4D8               	btfss	status,2,c
 13556  003398  D003               	goto	l9253
 13557  00339A  0E3B               	movlw	59
 13558  00339C  6E65               	movwf	_setup_alarm_minute,c
 13559  00339E  D015               	goto	l9265
 13560  0033A0                     l9253:
 13561                           
 13562                           ;Setup_Alarm_Time.c: 94: else --setup_alarm_minute;
 13563  0033A0  0665               	decf	_setup_alarm_minute,f,c
 13564                           
 13565                           ;Setup_Alarm_Time.c: 95: break;
 13566  0033A2  D013               	goto	l9265
 13567  0033A4                     l9255:
 13568                           
 13569                           ;Setup_Alarm_Time.c: 97: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13570  0033A4  5066               	movf	_setup_alarm_second,w,c
 13571  0033A6  A4D8               	btfss	status,2,c
 13572  0033A8  D003               	goto	l9259
 13573  0033AA  0E3B               	movlw	59
 13574  0033AC  6E66               	movwf	_setup_alarm_second,c
 13575  0033AE  D00D               	goto	l9265
 13576  0033B0                     l9259:
 13577                           
 13578                           ;Setup_Alarm_Time.c: 98: else --setup_alarm_second;
 13579  0033B0  0666               	decf	_setup_alarm_second,f,c
 13580                           
 13581                           ;Setup_Alarm_Time.c: 102: }
 13582                           
 13583                           ;Setup_Alarm_Time.c: 101: break;
 13584                           
 13585                           ;Setup_Alarm_Time.c: 100: default:
 13586                           
 13587                           ;Setup_Alarm_Time.c: 99: break;
 13588  0033B2  D00B               	goto	l9265
 13589  0033B4                     l9263:
 13590  0033B4  5052               	movf	_Select_Alarm_Field,w,c
 13591                           
 13592                           ; Switch size 1, requested type "space"
 13593                           ; Number of cases is 3, Range of values is 0 to 2
 13594                           ; switch strategies available:
 13595                           ; Name         Instructions Cycles
 13596                           ; simple_byte           10     6 (average)
 13597                           ;	Chosen strategy is simple_byte
 13598  0033B6  0A00               	xorlw	0	; case 0
 13599  0033B8  B4D8               	btfsc	status,2,c
 13600  0033BA  D7E4               	goto	l9243
 13601  0033BC  0A01               	xorlw	1	; case 1
 13602  0033BE  B4D8               	btfsc	status,2,c
 13603  0033C0  D7E9               	goto	l9249
 13604  0033C2  0A03               	xorlw	3	; case 2
 13605  0033C4  B4D8               	btfsc	status,2,c
 13606  0033C6  D7EE               	goto	l9255
 13607  0033C8  D000               	goto	l9265
 13608  0033CA                     l9265:
 13609                           
 13610                           ;Setup_Alarm_Time.c: 103: Update_Setup_Alarm_Time_Screen();
 13611  0033CA  EC20  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13612  0033CE  0012               	return		;funcret
 13613  0033D0                     __end_of_Decrease_Alarm_Time:
 13614                           	opt stack 0
 13615                           tblptru	equ	0xFF8
 13616                           tblptrh	equ	0xFF7
 13617                           tblptrl	equ	0xFF6
 13618                           tablat	equ	0xFF5
 13619                           prodh	equ	0xFF4
 13620                           prodl	equ	0xFF3
 13621                           intcon	equ	0xFF2
 13622                           intcon2	equ	0xFF1
 13623                           postinc0	equ	0xFEE
 13624                           wreg	equ	0xFE8
 13625                           postdec1	equ	0xFE5
 13626                           fsr1l	equ	0xFE1
 13627                           indf2	equ	0xFDF
 13628                           postinc2	equ	0xFDE
 13629                           fsr2h	equ	0xFDA
 13630                           fsr2l	equ	0xFD9
 13631                           status	equ	0xFD8
 13632                           
 13633 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13634 ;; Defined at:
 13635 ;;		line 157 in file "Setup_Alarm_Time.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;		None
 13640 ;; Return value:  Size  Location     Type
 13641 ;;		None               void
 13642 ;; Registers used:
 13643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;Total ram usage:        0 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:   10
 13656 ;; This function calls:
 13657 ;;		___awdiv
 13658 ;;		___awmod
 13659 ;;		_drawtext
 13660 ;;		_printf
 13661 ;; This function is called by:
 13662 ;;		_Do_Setup_Alarm_Time
 13663 ;;		_Increase_Alarm_Time
 13664 ;;		_Decrease_Alarm_Time
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           	psect	text78
 13669  002240                     __ptext78:
 13670                           	opt stack 0
 13671  002240                     _Update_Setup_Alarm_Time_Screen:
 13672                           	opt stack 19
 13673                           
 13674                           ;Setup_Alarm_Time.c: 159: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13675                           
 13676                           ;incstack = 0
 13677  002240  0EA0               	movlw	low STR_27
 13678  002242  6E1D               	movwf	printf@f,c
 13679  002244  0EFF               	movlw	high STR_27
 13680  002246  6E1E               	movwf	printf@f+1,c
 13681  002248  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 13682  00224C  6A20               	clrf	?_printf+3,c
 13683  00224E  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 13684  002252  6A22               	clrf	?_printf+5,c
 13685  002254  C066  F023         	movff	_setup_alarm_second,?_printf+6
 13686  002258  6A24               	clrf	?_printf+7,c
 13687  00225A  ECDE  F004         	call	_printf	;wreg free
 13688                           
 13689                           ;Setup_Alarm_Time.c: 160: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13690  00225E  C064  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 13691  002262  6A18               	clrf	___awdiv@dividend+1,c
 13692  002264  0E00               	movlw	0
 13693  002266  6E1A               	movwf	___awdiv@divisor+1,c
 13694  002268  0E0A               	movlw	10
 13695  00226A  6E19               	movwf	___awdiv@divisor,c
 13696  00226C  ECCD  F014         	call	___awdiv	;wreg free
 13697  002270  5017               	movf	?___awdiv,w,c
 13698  002272  0F30               	addlw	48
 13699  002274  0100               	movlb	0	; () banked
 13700  002276  6F94               	movwf	_setup_alarm_time& (0+255),b
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;Setup_Alarm_Time.c: 161: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 13704  002278  C064  F03B         	movff	_setup_alarm_hour,___awmod@dividend
 13705  00227C  6A3C               	clrf	___awmod@dividend+1,c
 13706  00227E  0E00               	movlw	0
 13707  002280  6E3E               	movwf	___awmod@divisor+1,c
 13708  002282  0E0A               	movlw	10
 13709  002284  6E3D               	movwf	___awmod@divisor,c
 13710  002286  EC02  F017         	call	___awmod	;wreg free
 13711  00228A  503B               	movf	?___awmod,w,c
 13712  00228C  0F30               	addlw	48
 13713  00228E  0100               	movlb	0	; () banked
 13714  002290  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;Setup_Alarm_Time.c: 163: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 13718  002292  C065  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 13719  002296  6A18               	clrf	___awdiv@dividend+1,c
 13720  002298  0E00               	movlw	0
 13721  00229A  6E1A               	movwf	___awdiv@divisor+1,c
 13722  00229C  0E0A               	movlw	10
 13723  00229E  6E19               	movwf	___awdiv@divisor,c
 13724  0022A0  ECCD  F014         	call	___awdiv	;wreg free
 13725  0022A4  5017               	movf	?___awdiv,w,c
 13726  0022A6  0F30               	addlw	48
 13727  0022A8  0100               	movlb	0	; () banked
 13728  0022AA  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;Setup_Alarm_Time.c: 164: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 13732  0022AC  C065  F03B         	movff	_setup_alarm_minute,___awmod@dividend
 13733  0022B0  6A3C               	clrf	___awmod@dividend+1,c
 13734  0022B2  0E00               	movlw	0
 13735  0022B4  6E3E               	movwf	___awmod@divisor+1,c
 13736  0022B6  0E0A               	movlw	10
 13737  0022B8  6E3D               	movwf	___awmod@divisor,c
 13738  0022BA  EC02  F017         	call	___awmod	;wreg free
 13739  0022BE  503B               	movf	?___awmod,w,c
 13740  0022C0  0F30               	addlw	48
 13741  0022C2  0100               	movlb	0	; () banked
 13742  0022C4  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;Setup_Alarm_Time.c: 166: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 13746  0022C6  C066  F017         	movff	_setup_alarm_second,___awdiv@dividend
 13747  0022CA  6A18               	clrf	___awdiv@dividend+1,c
 13748  0022CC  0E00               	movlw	0
 13749  0022CE  6E1A               	movwf	___awdiv@divisor+1,c
 13750  0022D0  0E0A               	movlw	10
 13751  0022D2  6E19               	movwf	___awdiv@divisor,c
 13752  0022D4  ECCD  F014         	call	___awdiv	;wreg free
 13753  0022D8  5017               	movf	?___awdiv,w,c
 13754  0022DA  0F30               	addlw	48
 13755  0022DC  0100               	movlb	0	; () banked
 13756  0022DE  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 13757                           
 13758                           ; BSR set to: 0
 13759                           ;Setup_Alarm_Time.c: 167: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 13760  0022E0  C066  F03B         	movff	_setup_alarm_second,___awmod@dividend
 13761  0022E4  6A3C               	clrf	___awmod@dividend+1,c
 13762  0022E6  0E00               	movlw	0
 13763  0022E8  6E3E               	movwf	___awmod@divisor+1,c
 13764  0022EA  0E0A               	movlw	10
 13765  0022EC  6E3D               	movwf	___awmod@divisor,c
 13766  0022EE  EC02  F017         	call	___awmod	;wreg free
 13767  0022F2  503B               	movf	?___awmod,w,c
 13768  0022F4  0F30               	addlw	48
 13769  0022F6  0100               	movlb	0	; () banked
 13770  0022F8  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 13771                           
 13772                           ;Setup_Alarm_Time.c: 168: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13773  0022FA  0E34               	movlw	52
 13774  0022FC  6E39               	movwf	drawtext@y,c
 13775  0022FE  0E94               	movlw	low _setup_alarm_time
 13776  002300  6E3A               	movwf	drawtext@_text,c
 13777  002302  0E00               	movlw	high _setup_alarm_time
 13778  002304  6E3B               	movwf	drawtext@_text+1,c
 13779  002306  0E07               	movlw	7
 13780  002308  6E3D               	movwf	drawtext@color+1,c
 13781  00230A  683C               	setf	drawtext@color,c
 13782  00230C  0E00               	movlw	0
 13783  00230E  6E3F               	movwf	drawtext@bg+1,c
 13784  002310  0E00               	movlw	0
 13785  002312  6E3E               	movwf	drawtext@bg,c
 13786  002314  0E02               	movlw	2
 13787  002316  6E40               	movwf	drawtext@size,c
 13788  002318  0E0F               	movlw	15
 13789  00231A  EC2B  F00C         	call	_drawtext
 13790  00231E  0012               	return		;funcret
 13791  002320                     __end_of_Update_Setup_Alarm_Time_Screen:
 13792                           	opt stack 0
 13793                           tblptru	equ	0xFF8
 13794                           tblptrh	equ	0xFF7
 13795                           tblptrl	equ	0xFF6
 13796                           tablat	equ	0xFF5
 13797                           prodh	equ	0xFF4
 13798                           prodl	equ	0xFF3
 13799                           intcon	equ	0xFF2
 13800                           intcon2	equ	0xFF1
 13801                           postinc0	equ	0xFEE
 13802                           wreg	equ	0xFE8
 13803                           postdec1	equ	0xFE5
 13804                           fsr1l	equ	0xFE1
 13805                           indf2	equ	0xFDF
 13806                           postinc2	equ	0xFDE
 13807                           fsr2h	equ	0xFDA
 13808                           fsr2l	equ	0xFD9
 13809                           status	equ	0xFD8
 13810                           
 13811 ;; *************** function _printf *****************
 13812 ;; Defined at:
 13813 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13814 ;; Parameters:    Size  Location     Type
 13815 ;;  f               2   28[COMRAM] PTR const unsigned char 
 13816 ;;		 -> STR_37(22), STR_36(16), STR_27(11), STR_4(20), 
 13817 ;;		 -> STR_3(24), STR_2(21), STR_1(30), 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  idx             1   46[COMRAM] unsigned char 
 13820 ;;  tmpval          4    0        struct .
 13821 ;;  cp              3    0        PTR const unsigned char 
 13822 ;;  width           2   53[COMRAM] int 
 13823 ;;  val             2   50[COMRAM] unsigned int 
 13824 ;;  ap              2   47[COMRAM] PTR void [1]
 13825 ;;		 -> ?_printf(2), 
 13826 ;;  len             2    0        unsigned int 
 13827 ;;  c               1   55[COMRAM] char 
 13828 ;;  flag            1   52[COMRAM] unsigned char 
 13829 ;;  prec            1   49[COMRAM] char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  2   28[COMRAM] int 
 13832 ;; Registers used:
 13833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13839 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;Total ram usage:       28 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    4
 13846 ;; This function calls:
 13847 ;;		___lwdiv
 13848 ;;		___lwmod
 13849 ;;		___wmul
 13850 ;;		_isdigit
 13851 ;;		_putch
 13852 ;; This function is called by:
 13853 ;;		_main
 13854 ;;		_Update_Setup_Alarm_Time_Screen
 13855 ;;		_check_for_button_input
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           	psect	text79
 13860  0009BC                     __ptext79:
 13861                           	opt stack 0
 13862  0009BC                     _printf:
 13863                           	opt stack 26
 13864                           
 13865                           ;doprnt.c: 466: va_list ap;
 13866                           ;doprnt.c: 499: signed char c;
 13867                           ;doprnt.c: 501: int width;
 13868                           ;doprnt.c: 506: signed char prec;
 13869                           ;doprnt.c: 508: unsigned char flag;
 13870                           ;doprnt.c: 523: union {
 13871                           ;doprnt.c: 524: unsigned long vd;
 13872                           ;doprnt.c: 525: double integ;
 13873                           ;doprnt.c: 526: } tmpval;
 13874                           ;doprnt.c: 528: unsigned int val;
 13875                           ;doprnt.c: 529: unsigned len;
 13876                           ;doprnt.c: 530: const char * cp;
 13877                           ;doprnt.c: 533: *ap = __va_start();
 13878                           
 13879                           ;incstack = 0
 13880  0009BC  0E1F               	movlw	low (?_printf+2)
 13881  0009BE  6E30               	movwf	printf@ap,c
 13882  0009C0  0E00               	movlw	high (?_printf+2)
 13883  0009C2  6E31               	movwf	printf@ap+1,c
 13884                           
 13885                           ;doprnt.c: 536: while(c = *f++) {
 13886  0009C4  D199               	goto	l8525
 13887  0009C6                     l8399:
 13888                           
 13889                           ;doprnt.c: 538: if(c != '%')
 13890  0009C6  0E25               	movlw	37
 13891  0009C8  1838               	xorwf	printf@c,w,c
 13892  0009CA  B4D8               	btfsc	status,2,c
 13893  0009CC  D004               	goto	l8403
 13894                           
 13895                           ;doprnt.c: 540: {
 13896                           ;doprnt.c: 541: (putch(c) );
 13897  0009CE  5038               	movf	printf@c,w,c
 13898  0009D0  EC3A  F01E         	call	_putch
 13899                           
 13900                           ;doprnt.c: 542: continue;
 13901  0009D4  D191               	goto	l8525
 13902  0009D6                     l8403:
 13903                           
 13904                           ;doprnt.c: 543: }
 13905                           ;doprnt.c: 546: width = 0;
 13906  0009D6  0E00               	movlw	0
 13907  0009D8  6E37               	movwf	printf@width+1,c
 13908  0009DA  0E00               	movlw	0
 13909  0009DC  6E36               	movwf	printf@width,c
 13910                           
 13911                           ;doprnt.c: 548: flag = 0;
 13912  0009DE  0E00               	movlw	0
 13913  0009E0  6E35               	movwf	printf@flag,c
 13914                           
 13915                           ;doprnt.c: 551: switch(*f) {
 13916                           
 13917                           ;doprnt.c: 550: for(;;) {
 13918  0009E2  D005               	goto	l8409
 13919  0009E4                     l8405:
 13920                           
 13921                           ;doprnt.c: 580: flag |= 0x04;
 13922  0009E4  8435               	bsf	printf@flag,2,c
 13923                           
 13924                           ;doprnt.c: 581: f++;
 13925  0009E6  4A1D               	infsnz	printf@f,f,c
 13926  0009E8  2A1E               	incf	printf@f+1,f,c
 13927                           
 13928                           ;doprnt.c: 582: continue;
 13929  0009EA  D001               	goto	l8409
 13930                           
 13931                           ;doprnt.c: 584: }
 13932  0009EC  D00B               	goto	l8411
 13933  0009EE                     l8409:
 13934  0009EE  C01D  FFF6         	movff	printf@f,tblptrl
 13935  0009F2  C01E  FFF7         	movff	printf@f+1,tblptrh
 13936  0009F6                     	if	0	;tblptru may be non-zero
 13937  0009F6                     	endif
 13938  0009F6                     	if	0	;tblptru may be non-zero
 13939  0009F6                     	endif
 13940  0009F6  0008               	tblrd		*
 13941  0009F8  50F5               	movf	tablat,w,c
 13942                           
 13943                           ; Switch size 1, requested type "space"
 13944                           ; Number of cases is 1, Range of values is 48 to 48
 13945                           ; switch strategies available:
 13946                           ; Name         Instructions Cycles
 13947                           ; simple_byte            4     3 (average)
 13948                           ;	Chosen strategy is simple_byte
 13949  0009FA  0A30               	xorlw	48	; case 48
 13950  0009FC  B4D8               	btfsc	status,2,c
 13951  0009FE  D7F2               	goto	l8405
 13952                           
 13953                           ;doprnt.c: 585: break;
 13954  000A00  D001               	goto	l8411
 13955                           
 13956                           ;doprnt.c: 586: }
 13957  000A02  D7F5               	goto	l8409
 13958  000A04                     l8411:
 13959                           
 13960                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13961  000A04  C01D  FFF6         	movff	printf@f,tblptrl
 13962  000A08  C01E  FFF7         	movff	printf@f+1,tblptrh
 13963  000A0C                     	if	0	;tblptru may be non-zero
 13964  000A0C                     	endif
 13965  000A0C                     	if	0	;tblptru may be non-zero
 13966  000A0C                     	endif
 13967  000A0C  0008               	tblrd		*
 13968  000A0E  50F5               	movf	tablat,w,c
 13969  000A10  ECB7  F01C         	call	_isdigit
 13970  000A14  A0D8               	btfss	status,0,c
 13971  000A16  D03B               	goto	l8427
 13972                           
 13973                           ;doprnt.c: 598: width = 0;
 13974  000A18  0E00               	movlw	0
 13975  000A1A  6E37               	movwf	printf@width+1,c
 13976  000A1C  0E00               	movlw	0
 13977  000A1E  6E36               	movwf	printf@width,c
 13978  000A20  D000               	goto	l8415
 13979  000A22                     l8415:
 13980                           
 13981                           ;doprnt.c: 600: width *= 10;
 13982  000A22  C036  F011         	movff	printf@width,___wmul@multiplier
 13983  000A26  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 13984  000A2A  0E00               	movlw	0
 13985  000A2C  6E14               	movwf	___wmul@multiplicand+1,c
 13986  000A2E  0E0A               	movlw	10
 13987  000A30  6E13               	movwf	___wmul@multiplicand,c
 13988  000A32  EC7D  F01C         	call	___wmul	;wreg free
 13989  000A36  C011  F036         	movff	?___wmul,printf@width
 13990  000A3A  C012  F037         	movff	?___wmul+1,printf@width+1
 13991                           
 13992                           ;doprnt.c: 601: width += *f++ - '0';
 13993  000A3E  0ED0               	movlw	208
 13994  000A40  6E2B               	movwf	??_printf& (0+255),c
 13995  000A42  0EFF               	movlw	255
 13996  000A44  6E2C               	movwf	(??_printf+1)& (0+255),c
 13997  000A46  C01D  FFF6         	movff	printf@f,tblptrl
 13998  000A4A  C01E  FFF7         	movff	printf@f+1,tblptrh
 13999  000A4E                     	if	0	;tblptru may be non-zero
 14000  000A4E                     	endif
 14001  000A4E                     	if	0	;tblptru may be non-zero
 14002  000A4E                     	endif
 14003  000A4E  0008               	tblrd		*
 14004  000A50  50F5               	movf	tablat,w,c
 14005  000A52  6E2D               	movwf	(??_printf+2)& (0+255),c
 14006  000A54  6A2E               	clrf	(??_printf+3)& (0+255),c
 14007  000A56  502B               	movf	??_printf,w,c
 14008  000A58  262D               	addwf	??_printf+2,f,c
 14009  000A5A  502C               	movf	??_printf+1,w,c
 14010  000A5C  222E               	addwfc	??_printf+3,f,c
 14011  000A5E  502D               	movf	??_printf+2,w,c
 14012  000A60  2636               	addwf	printf@width,f,c
 14013  000A62  502E               	movf	??_printf+3,w,c
 14014  000A64  2237               	addwfc	printf@width+1,f,c
 14015  000A66  4A1D               	infsnz	printf@f,f,c
 14016  000A68  2A1E               	incf	printf@f+1,f,c
 14017                           
 14018                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14019  000A6A  C01D  FFF6         	movff	printf@f,tblptrl
 14020  000A6E  C01E  FFF7         	movff	printf@f+1,tblptrh
 14021  000A72                     	if	0	;tblptru may be non-zero
 14022  000A72                     	endif
 14023  000A72                     	if	0	;tblptru may be non-zero
 14024  000A72                     	endif
 14025  000A72  0008               	tblrd		*
 14026  000A74  50F5               	movf	tablat,w,c
 14027  000A76  ECB7  F01C         	call	_isdigit
 14028  000A7A  A0D8               	btfss	status,0,c
 14029  000A7C  D008               	goto	l8427
 14030  000A7E  D7D1               	goto	l8415
 14031                           
 14032                           ;doprnt.c: 608: }
 14033                           ;doprnt.c: 635: switch(c = *f++) {
 14034  000A80  D006               	goto	l8427
 14035                           
 14036                           ;doprnt.c: 638: goto alldone;
 14037                           
 14038                           ;doprnt.c: 637: case 0:
 14039  000A82  D148               	goto	l1457
 14040                           
 14041                           ;doprnt.c: 698: case 'i':
 14042                           ;doprnt.c: 699: break;
 14043                           
 14044                           ;doprnt.c: 697: case 'd':
 14045  000A84  D01B               	goto	l1420
 14046  000A86                     l8423:
 14047                           
 14048                           ;doprnt.c: 721: flag |= 0x80;
 14049  000A86  8E35               	bsf	printf@flag,7,c
 14050                           
 14051                           ;doprnt.c: 723: break;
 14052  000A88  D019               	goto	l1420
 14053                           
 14054                           ;doprnt.c: 813: continue;
 14055                           
 14056                           ;doprnt.c: 802: default:
 14057  000A8A  D136               	goto	l8525
 14058                           
 14059                           ;doprnt.c: 822: }
 14060  000A8C  D017               	goto	l1420
 14061  000A8E                     l8427:
 14062  000A8E  C01D  FFF6         	movff	printf@f,tblptrl
 14063  000A92  C01E  FFF7         	movff	printf@f+1,tblptrh
 14064  000A96  4A1D               	infsnz	printf@f,f,c
 14065  000A98  2A1E               	incf	printf@f+1,f,c
 14066  000A9A                     	if	0	;tblptru may be non-zero
 14067  000A9A                     	endif
 14068  000A9A                     	if	0	;tblptru may be non-zero
 14069  000A9A                     	endif
 14070  000A9A  0008               	tblrd		*
 14071  000A9C  CFF5 F038          	movff	tablat,printf@c
 14072  000AA0  5038               	movf	printf@c,w,c
 14073                           
 14074                           ; Switch size 1, requested type "space"
 14075                           ; Number of cases is 4, Range of values is 0 to 120
 14076                           ; switch strategies available:
 14077                           ; Name         Instructions Cycles
 14078                           ; simple_byte           13     7 (average)
 14079                           ;	Chosen strategy is simple_byte
 14080  000AA2  0A00               	xorlw	0	; case 0
 14081  000AA4  B4D8               	btfsc	status,2,c
 14082  000AA6  D136               	goto	l1457
 14083  000AA8  0A64               	xorlw	100	; case 100
 14084  000AAA  B4D8               	btfsc	status,2,c
 14085  000AAC  D007               	goto	l1420
 14086  000AAE  0A0D               	xorlw	13	; case 105
 14087  000AB0  B4D8               	btfsc	status,2,c
 14088  000AB2  D004               	goto	l1420
 14089  000AB4  0A11               	xorlw	17	; case 120
 14090  000AB6  B4D8               	btfsc	status,2,c
 14091  000AB8  D7E6               	goto	l8423
 14092  000ABA  D11E               	goto	l8525
 14093  000ABC                     l1420:
 14094                           
 14095                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14096  000ABC  BE35               	btfsc	printf@flag,7,c
 14097  000ABE  D015               	goto	l8439
 14098                           
 14099                           ;doprnt.c: 1253: {
 14100                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14101  000AC0  C030  FFD9         	movff	printf@ap,fsr2l
 14102  000AC4  C031  FFDA         	movff	printf@ap+1,fsr2h
 14103  000AC8  CFDE F033          	movff	postinc2,printf@val
 14104  000ACC  CFDD F034          	movff	postdec2,printf@val+1
 14105  000AD0  0E02               	movlw	2
 14106  000AD2  2630               	addwf	printf@ap,f,c
 14107  000AD4  0E00               	movlw	0
 14108  000AD6  2231               	addwfc	printf@ap+1,f,c
 14109                           
 14110                           ;doprnt.c: 1261: if((int)val < 0) {
 14111  000AD8  AE34               	btfss	printf@val+1,7,c
 14112  000ADA  D04E               	goto	l8473
 14113                           
 14114                           ;doprnt.c: 1262: flag |= 0x03;
 14115  000ADC  0E03               	movlw	3
 14116  000ADE  1235               	iorwf	printf@flag,f,c
 14117                           
 14118                           ;doprnt.c: 1263: val = -val;
 14119  000AE0  6C33               	negf	printf@val,c
 14120  000AE2  1E34               	comf	printf@val+1,f,c
 14121  000AE4  B0D8               	btfsc	status,0,c
 14122  000AE6  2A34               	incf	printf@val+1,f,c
 14123                           
 14124                           ;doprnt.c: 1264: }
 14125                           ;doprnt.c: 1266: }
 14126  000AE8  D047               	goto	l8473
 14127  000AEA                     l8439:
 14128                           
 14129                           ;doprnt.c: 1268: else
 14130                           ;doprnt.c: 1273: {
 14131                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14132  000AEA  C030  FFD9         	movff	printf@ap,fsr2l
 14133  000AEE  C031  FFDA         	movff	printf@ap+1,fsr2h
 14134  000AF2  CFDE F033          	movff	postinc2,printf@val
 14135  000AF6  CFDD F034          	movff	postdec2,printf@val+1
 14136  000AFA  0E02               	movlw	2
 14137  000AFC  2630               	addwf	printf@ap,f,c
 14138  000AFE  0E00               	movlw	0
 14139  000B00  2231               	addwfc	printf@ap+1,f,c
 14140                           
 14141                           ;doprnt.c: 1287: }
 14142                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14143  000B02  D03A               	goto	l8473
 14144  000B04                     l8443:
 14145                           
 14146                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14147  000B04  0E01               	movlw	1
 14148  000B06  6E38               	movwf	printf@c,c
 14149  000B08                     l8445:
 14150  000B08  0E05               	movlw	5
 14151  000B0A  1838               	xorwf	printf@c,w,c
 14152  000B0C  B4D8               	btfsc	status,2,c
 14153  000B0E  D03D               	goto	l8475
 14154  000B10  D001               	goto	l8449
 14155  000B12  D03B               	goto	l8475
 14156  000B14                     l8449:
 14157                           
 14158                           ;doprnt.c: 1306: if(val < dpowers[c])
 14159  000B14  5038               	movf	printf@c,w,c
 14160  000B16  0D02               	mullw	2
 14161  000B18  0E78               	movlw	low _dpowers
 14162  000B1A  24F3               	addwf	prodl,w,c
 14163  000B1C  6EF6               	movwf	tblptrl,c
 14164  000B1E  0EFE               	movlw	high _dpowers
 14165  000B20  20F4               	addwfc	prodh,w,c
 14166  000B22  6EF7               	movwf	tblptrh,c
 14167  000B24                     	if	0	;There are less than 3 active tblptr bytes
 14168  000B24                     	endif
 14169  000B24  0009               	tblrd		*+
 14170  000B26  50F5               	movf	tablat,w,c
 14171  000B28  5C33               	subwf	printf@val,w,c
 14172  000B2A  0009               	tblrd		*+
 14173  000B2C  50F5               	movf	tablat,w,c
 14174  000B2E  5834               	subwfb	printf@val+1,w,c
 14175  000B30  A0D8               	btfss	status,0,c
 14176  000B32  D02B               	goto	l8475
 14177  000B34  D001               	goto	l8453
 14178                           
 14179                           ;doprnt.c: 1307: break;
 14180  000B36  D029               	goto	l8475
 14181  000B38                     l8453:
 14182  000B38  2A38               	incf	printf@c,f,c
 14183  000B3A  D7E6               	goto	l8445
 14184                           
 14185                           ;doprnt.c: 1309: break;
 14186  000B3C  D026               	goto	l8475
 14187  000B3E                     l8457:
 14188                           
 14189                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14190  000B3E  0E01               	movlw	1
 14191  000B40  6E38               	movwf	printf@c,c
 14192  000B42                     l8459:
 14193  000B42  0E04               	movlw	4
 14194  000B44  1838               	xorwf	printf@c,w,c
 14195  000B46  B4D8               	btfsc	status,2,c
 14196  000B48  D020               	goto	l8475
 14197  000B4A  D001               	goto	l8463
 14198  000B4C  D01E               	goto	l8475
 14199  000B4E                     l8463:
 14200                           
 14201                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14202  000B4E  5038               	movf	printf@c,w,c
 14203  000B50  0D02               	mullw	2
 14204  000B52  0E82               	movlw	low _hexpowers
 14205  000B54  24F3               	addwf	prodl,w,c
 14206  000B56  6EF6               	movwf	tblptrl,c
 14207  000B58  0EFE               	movlw	high _hexpowers
 14208  000B5A  20F4               	addwfc	prodh,w,c
 14209  000B5C  6EF7               	movwf	tblptrh,c
 14210  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 14211  000B5E                     	endif
 14212  000B5E  0009               	tblrd		*+
 14213  000B60  50F5               	movf	tablat,w,c
 14214  000B62  5C33               	subwf	printf@val,w,c
 14215  000B64  0009               	tblrd		*+
 14216  000B66  50F5               	movf	tablat,w,c
 14217  000B68  5834               	subwfb	printf@val+1,w,c
 14218  000B6A  A0D8               	btfss	status,0,c
 14219  000B6C  D00E               	goto	l8475
 14220  000B6E  D001               	goto	l8467
 14221                           
 14222                           ;doprnt.c: 1318: break;
 14223  000B70  D00C               	goto	l8475
 14224  000B72                     l8467:
 14225  000B72  2A38               	incf	printf@c,f,c
 14226  000B74  D7E6               	goto	l8459
 14227                           
 14228                           ;doprnt.c: 1336: }
 14229                           
 14230                           ;doprnt.c: 1320: break;
 14231  000B76  D009               	goto	l8475
 14232  000B78                     l8473:
 14233  000B78  5035               	movf	printf@flag,w,c
 14234  000B7A  0B80               	andlw	128
 14235                           
 14236                           ; Switch size 1, requested type "space"
 14237                           ; Number of cases is 2, Range of values is 0 to 128
 14238                           ; switch strategies available:
 14239                           ; Name         Instructions Cycles
 14240                           ; simple_byte            7     4 (average)
 14241                           ;	Chosen strategy is simple_byte
 14242  000B7C  0A00               	xorlw	0	; case 0
 14243  000B7E  B4D8               	btfsc	status,2,c
 14244  000B80  D7C1               	goto	l8443
 14245  000B82  0A80               	xorlw	128	; case 128
 14246  000B84  B4D8               	btfsc	status,2,c
 14247  000B86  D7DB               	goto	l8457
 14248  000B88  D000               	goto	l8475
 14249  000B8A                     l8475:
 14250                           
 14251                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14252  000B8A  5036               	movf	printf@width,w,c
 14253  000B8C  1037               	iorwf	printf@width+1,w,c
 14254  000B8E  B4D8               	btfsc	status,2,c
 14255  000B90  D00A               	goto	l8481
 14256  000B92  C035  F02B         	movff	printf@flag,??_printf
 14257  000B96  0E03               	movlw	3
 14258  000B98  162B               	andwf	??_printf,f,c
 14259  000B9A  B4D8               	btfsc	status,2,c
 14260  000B9C  D004               	goto	l8481
 14261                           
 14262                           ;doprnt.c: 1346: width--;
 14263  000B9E  0636               	decf	printf@width,f,c
 14264  000BA0  A0D8               	btfss	status,0,c
 14265  000BA2  0637               	decf	printf@width+1,f,c
 14266  000BA4  D000               	goto	l8481
 14267  000BA6                     l8481:
 14268                           
 14269                           ;doprnt.c: 1381: if(width > c)
 14270  000BA6  0E80               	movlw	128
 14271  000BA8  BE38               	btfsc	printf@c,7,c
 14272  000BAA  0E7F               	movlw	127
 14273  000BAC  6E2B               	movwf	??_printf& (0+255),c
 14274  000BAE  5036               	movf	printf@width,w,c
 14275  000BB0  5C38               	subwf	printf@c,w,c
 14276  000BB2  5037               	movf	printf@width+1,w,c
 14277  000BB4  0A80               	xorlw	128
 14278  000BB6  582B               	subwfb	??_printf& (0+255),w,c
 14279  000BB8  B0D8               	btfsc	status,0,c
 14280  000BBA  D007               	goto	l8485
 14281                           
 14282                           ;doprnt.c: 1382: width -= c;
 14283  000BBC  5038               	movf	printf@c,w,c
 14284  000BBE  5E36               	subwf	printf@width,f,c
 14285  000BC0  0E00               	movlw	0
 14286  000BC2  BE38               	btfsc	printf@c,7,c
 14287  000BC4  0EFF               	movlw	255
 14288  000BC6  5A37               	subwfb	printf@width+1,f,c
 14289  000BC8  D005               	goto	l8487
 14290  000BCA                     l8485:
 14291                           
 14292                           ;doprnt.c: 1383: else
 14293                           ;doprnt.c: 1384: width = 0;
 14294  000BCA  0E00               	movlw	0
 14295  000BCC  6E37               	movwf	printf@width+1,c
 14296  000BCE  0E00               	movlw	0
 14297  000BD0  6E36               	movwf	printf@width,c
 14298  000BD2  D000               	goto	l8487
 14299  000BD4                     l8487:
 14300                           
 14301                           ;doprnt.c: 1387: if(flag & 0x04) {
 14302  000BD4  A435               	btfss	printf@flag,2,c
 14303  000BD6  D01A               	goto	l8499
 14304                           
 14305                           ;doprnt.c: 1392: if(flag & 0x03)
 14306  000BD8  C035  F02B         	movff	printf@flag,??_printf
 14307  000BDC  0E03               	movlw	3
 14308  000BDE  162B               	andwf	??_printf,f,c
 14309  000BE0  B4D8               	btfsc	status,2,c
 14310  000BE2  D004               	goto	l8493
 14311                           
 14312                           ;doprnt.c: 1393: (putch('-') );
 14313  000BE4  0E2D               	movlw	45
 14314  000BE6  EC3A  F01E         	call	_putch
 14315  000BEA  D000               	goto	l8493
 14316  000BEC                     l8493:
 14317                           
 14318                           ;doprnt.c: 1415: if(width)
 14319  000BEC  5036               	movf	printf@width,w,c
 14320  000BEE  1037               	iorwf	printf@width+1,w,c
 14321  000BF0  B4D8               	btfsc	status,2,c
 14322  000BF2  D026               	goto	l8509
 14323  000BF4                     l8495:
 14324                           
 14325                           ;doprnt.c: 1417: (putch('0') );
 14326  000BF4  0E30               	movlw	48
 14327  000BF6  EC3A  F01E         	call	_putch
 14328                           
 14329                           ;doprnt.c: 1418: while(--width);
 14330  000BFA  0636               	decf	printf@width,f,c
 14331  000BFC  A0D8               	btfss	status,0,c
 14332  000BFE  0637               	decf	printf@width+1,f,c
 14333  000C00  5036               	movf	printf@width,w,c
 14334  000C02  1037               	iorwf	printf@width+1,w,c
 14335  000C04  B4D8               	btfsc	status,2,c
 14336  000C06  D01C               	goto	l8509
 14337  000C08  D7F5               	goto	l8495
 14338                           
 14339                           ;doprnt.c: 1420: } else
 14340  000C0A  D01A               	goto	l8509
 14341  000C0C                     l8499:
 14342                           
 14343                           ;doprnt.c: 1422: {
 14344                           ;doprnt.c: 1424: if(width
 14345                           ;doprnt.c: 1428: )
 14346  000C0C  5036               	movf	printf@width,w,c
 14347  000C0E  1037               	iorwf	printf@width+1,w,c
 14348  000C10  B4D8               	btfsc	status,2,c
 14349  000C12  D00C               	goto	l8505
 14350  000C14                     l8501:
 14351                           
 14352                           ;doprnt.c: 1430: (putch(' ') );
 14353  000C14  0E20               	movlw	32
 14354  000C16  EC3A  F01E         	call	_putch
 14355                           
 14356                           ;doprnt.c: 1431: while(--width);
 14357  000C1A  0636               	decf	printf@width,f,c
 14358  000C1C  A0D8               	btfss	status,0,c
 14359  000C1E  0637               	decf	printf@width+1,f,c
 14360  000C20  5036               	movf	printf@width,w,c
 14361  000C22  1037               	iorwf	printf@width+1,w,c
 14362  000C24  B4D8               	btfsc	status,2,c
 14363  000C26  D002               	goto	l8505
 14364  000C28  D7F5               	goto	l8501
 14365  000C2A  D000               	goto	l8505
 14366  000C2C                     l8505:
 14367                           
 14368                           ;doprnt.c: 1438: if(flag & 0x03)
 14369  000C2C  C035  F02B         	movff	printf@flag,??_printf
 14370  000C30  0E03               	movlw	3
 14371  000C32  162B               	andwf	??_printf,f,c
 14372  000C34  B4D8               	btfsc	status,2,c
 14373  000C36  D004               	goto	l8509
 14374                           
 14375                           ;doprnt.c: 1439: (putch('-') );
 14376  000C38  0E2D               	movlw	45
 14377  000C3A  EC3A  F01E         	call	_putch
 14378  000C3E  D000               	goto	l8509
 14379  000C40                     l8509:
 14380                           
 14381                           ;doprnt.c: 1469: }
 14382                           ;doprnt.c: 1472: prec = c;
 14383  000C40  C038  F032         	movff	printf@c,printf@prec
 14384                           
 14385                           ;doprnt.c: 1474: while(prec--) {
 14386  000C44  D053               	goto	l8523
 14387                           
 14388                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14389  000C46  D045               	goto	l8519
 14390  000C48                     l8511:
 14391                           
 14392                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14393  000C48  5032               	movf	printf@prec,w,c
 14394  000C4A  0D02               	mullw	2
 14395  000C4C  0E78               	movlw	low _dpowers
 14396  000C4E  24F3               	addwf	prodl,w,c
 14397  000C50  6EF6               	movwf	tblptrl,c
 14398  000C52  0EFE               	movlw	high _dpowers
 14399  000C54  20F4               	addwfc	prodh,w,c
 14400  000C56  6EF7               	movwf	tblptrh,c
 14401  000C58                     	if	0	;There are less than 3 active tblptr bytes
 14402  000C58                     	endif
 14403  000C58  0009               	tblrd		*+
 14404  000C5A  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14405  000C5E  000A               	tblrd		*-
 14406  000C60  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14407  000C64  C033  F011         	movff	printf@val,___lwdiv@dividend
 14408  000C68  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14409  000C6C  ECEC  F018         	call	___lwdiv	;wreg free
 14410  000C70  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14411  000C74  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14412  000C78  0E00               	movlw	0
 14413  000C7A  6E1B               	movwf	___lwmod@divisor+1,c
 14414  000C7C  0E0A               	movlw	10
 14415  000C7E  6E1A               	movwf	___lwmod@divisor,c
 14416  000C80  EC35  F01A         	call	___lwmod	;wreg free
 14417  000C84  5018               	movf	?___lwmod,w,c
 14418  000C86  0F30               	addlw	48
 14419  000C88  6E38               	movwf	printf@c,c
 14420                           
 14421                           ;doprnt.c: 1491: break;
 14422  000C8A  D02C               	goto	l8521
 14423  000C8C                     l8513:
 14424                           
 14425                           ;doprnt.c: 1499: {
 14426                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14427  000C8C  C033  F011         	movff	printf@val,___lwdiv@dividend
 14428  000C90  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14429  000C94  5032               	movf	printf@prec,w,c
 14430  000C96  0D02               	mullw	2
 14431  000C98  0E82               	movlw	low _hexpowers
 14432  000C9A  24F3               	addwf	prodl,w,c
 14433  000C9C  6EF6               	movwf	tblptrl,c
 14434  000C9E  0EFE               	movlw	high _hexpowers
 14435  000CA0  20F4               	addwfc	prodh,w,c
 14436  000CA2  6EF7               	movwf	tblptrh,c
 14437  000CA4                     	if	0	;There are less than 3 active tblptr bytes
 14438  000CA4                     	endif
 14439  000CA4  0009               	tblrd		*+
 14440  000CA6  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14441  000CAA  000A               	tblrd		*-
 14442  000CAC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14443  000CB0  ECEC  F018         	call	___lwdiv	;wreg free
 14444  000CB4  5011               	movf	?___lwdiv,w,c
 14445  000CB6  0B0F               	andlw	15
 14446  000CB8  6E2F               	movwf	printf@idx,c
 14447                           
 14448                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14449  000CBA  502F               	movf	printf@idx,w,c
 14450  000CBC  0D01               	mullw	1
 14451  000CBE  0E3E               	movlw	low STR_38
 14452  000CC0  24F3               	addwf	prodl,w,c
 14453  000CC2  6EF6               	movwf	tblptrl,c
 14454  000CC4  0EFF               	movlw	high STR_38
 14455  000CC6  20F4               	addwfc	prodh,w,c
 14456  000CC8  6EF7               	movwf	tblptrh,c
 14457  000CCA                     	if	0	;There are less than 3 active tblptr bytes
 14458  000CCA                     	endif
 14459  000CCA  0008               	tblrd		*
 14460  000CCC  CFF5 F038          	movff	tablat,printf@c
 14461                           
 14462                           ;doprnt.c: 1523: }
 14463                           
 14464                           ;doprnt.c: 1508: }
 14465                           ;doprnt.c: 1510: break;
 14466  000CD0  D009               	goto	l8521
 14467  000CD2                     l8519:
 14468  000CD2  5035               	movf	printf@flag,w,c
 14469  000CD4  0B80               	andlw	128
 14470                           
 14471                           ; Switch size 1, requested type "space"
 14472                           ; Number of cases is 2, Range of values is 0 to 128
 14473                           ; switch strategies available:
 14474                           ; Name         Instructions Cycles
 14475                           ; simple_byte            7     4 (average)
 14476                           ;	Chosen strategy is simple_byte
 14477  000CD6  0A00               	xorlw	0	; case 0
 14478  000CD8  B4D8               	btfsc	status,2,c
 14479  000CDA  D7B6               	goto	l8511
 14480  000CDC  0A80               	xorlw	128	; case 128
 14481  000CDE  B4D8               	btfsc	status,2,c
 14482  000CE0  D7D5               	goto	l8513
 14483  000CE2  D000               	goto	l8521
 14484  000CE4                     l8521:
 14485                           
 14486                           ;doprnt.c: 1524: (putch(c) );
 14487  000CE4  5038               	movf	printf@c,w,c
 14488  000CE6  EC3A  F01E         	call	_putch
 14489  000CEA  D000               	goto	l8523
 14490  000CEC                     l8523:
 14491  000CEC  0632               	decf	printf@prec,f,c
 14492  000CEE  2832               	incf	printf@prec,w,c
 14493  000CF0  B4D8               	btfsc	status,2,c
 14494  000CF2  D002               	goto	l8525
 14495  000CF4  D7EE               	goto	l8519
 14496  000CF6  D000               	goto	l8525
 14497  000CF8                     l8525:
 14498  000CF8  C01D  FFF6         	movff	printf@f,tblptrl
 14499  000CFC  C01E  FFF7         	movff	printf@f+1,tblptrh
 14500  000D00  4A1D               	infsnz	printf@f,f,c
 14501  000D02  2A1E               	incf	printf@f+1,f,c
 14502  000D04                     	if	0	;tblptru may be non-zero
 14503  000D04                     	endif
 14504  000D04                     	if	0	;tblptru may be non-zero
 14505  000D04                     	endif
 14506  000D04  0008               	tblrd		*
 14507  000D06  CFF5 F038          	movff	tablat,printf@c
 14508  000D0A  5038               	movf	printf@c,w,c
 14509  000D0C  B4D8               	btfsc	status,2,c
 14510  000D0E  D002               	goto	l1457
 14511  000D10  D65A               	goto	l8399
 14512  000D12  D000               	goto	l1457
 14513  000D14                     l1457:
 14514  000D14  0012               	return		;funcret
 14515  000D16                     __end_of_printf:
 14516                           	opt stack 0
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           intcon2	equ	0xFF1
 14525                           postinc0	equ	0xFEE
 14526                           wreg	equ	0xFE8
 14527                           postdec1	equ	0xFE5
 14528                           fsr1l	equ	0xFE1
 14529                           indf2	equ	0xFDF
 14530                           postinc2	equ	0xFDE
 14531                           postdec2	equ	0xFDD
 14532                           fsr2h	equ	0xFDA
 14533                           fsr2l	equ	0xFD9
 14534                           status	equ	0xFD8
 14535                           
 14536 ;; *************** function _putch *****************
 14537 ;; Defined at:
 14538 ;;		line 78 in file "Main.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;  c               1    wreg     unsigned char 
 14541 ;; Auto vars:     Size  Location     Type
 14542 ;;  c               1   16[COMRAM] unsigned char 
 14543 ;; Return value:  Size  Location     Type
 14544 ;;		None               void
 14545 ;; Registers used:
 14546 ;;		wreg
 14547 ;; Tracked objects:
 14548 ;;		On entry : 0/0
 14549 ;;		On exit  : 0/0
 14550 ;;		Unchanged: 0/0
 14551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14556 ;;Total ram usage:        1 bytes
 14557 ;; Hardware stack levels used:    1
 14558 ;; Hardware stack levels required when called:    3
 14559 ;; This function calls:
 14560 ;;		Nothing
 14561 ;; This function is called by:
 14562 ;;		_printf
 14563 ;; This function uses a non-reentrant model
 14564 ;;
 14565                           
 14566                           	psect	text80
 14567  003C74                     __ptext80:
 14568                           	opt stack 0
 14569  003C74                     _putch:
 14570                           	opt stack 26
 14571                           
 14572                           ;incstack = 0
 14573                           ;putch@c stored from wreg
 14574  003C74  6E11               	movwf	putch@c,c
 14575                           
 14576                           ;Main.c: 79: while (!TRMT);
 14577  003C76  D000               	goto	l520
 14578  003C78                     l520:
 14579  003C78  A2AC               	btfss	4012,1,c	;volatile
 14580  003C7A  D7FE               	goto	l520
 14581                           
 14582                           ;Main.c: 80: TXREG = c;
 14583  003C7C  C011  FFAD         	movff	putch@c,4013	;volatile
 14584  003C80  0012               	return		;funcret
 14585  003C82                     __end_of_putch:
 14586                           	opt stack 0
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           intcon2	equ	0xFF1
 14595                           postinc0	equ	0xFEE
 14596                           wreg	equ	0xFE8
 14597                           postdec1	equ	0xFE5
 14598                           fsr1l	equ	0xFE1
 14599                           indf2	equ	0xFDF
 14600                           postinc2	equ	0xFDE
 14601                           postdec2	equ	0xFDD
 14602                           fsr2h	equ	0xFDA
 14603                           fsr2l	equ	0xFD9
 14604                           status	equ	0xFD8
 14605                           
 14606 ;; *************** function _isdigit *****************
 14607 ;; Defined at:
 14608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 14609 ;; Parameters:    Size  Location     Type
 14610 ;;  c               1    wreg     unsigned char 
 14611 ;; Auto vars:     Size  Location     Type
 14612 ;;  c               1   18[COMRAM] unsigned char 
 14613 ;; Return value:  Size  Location     Type
 14614 ;;		None               void
 14615 ;; Registers used:
 14616 ;;		wreg, status,2, status,0
 14617 ;; Tracked objects:
 14618 ;;		On entry : 0/0
 14619 ;;		On exit  : 0/0
 14620 ;;		Unchanged: 0/0
 14621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14625 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14626 ;;Total ram usage:        3 bytes
 14627 ;; Hardware stack levels used:    1
 14628 ;; Hardware stack levels required when called:    3
 14629 ;; This function calls:
 14630 ;;		Nothing
 14631 ;; This function is called by:
 14632 ;;		_printf
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text81
 14637  00396E                     __ptext81:
 14638                           	opt stack 0
 14639  00396E                     _isdigit:
 14640                           	opt stack 26
 14641                           
 14642                           ;incstack = 0
 14643                           ;isdigit@c stored from wreg
 14644  00396E  6E13               	movwf	isdigit@c,c
 14645  003970  0E00               	movlw	0
 14646  003972  6E12               	movwf	_isdigit$2894,c
 14647  003974  0E3A               	movlw	58
 14648  003976  6013               	cpfslt	isdigit@c,c
 14649  003978  D006               	goto	l5381
 14650  00397A  0E2F               	movlw	47
 14651  00397C  6413               	cpfsgt	isdigit@c,c
 14652  00397E  D003               	goto	l5381
 14653  003980  0E01               	movlw	1
 14654  003982  6E12               	movwf	_isdigit$2894,c
 14655  003984  D000               	goto	l5381
 14656  003986                     l5381:
 14657  003986  C012  F011         	movff	_isdigit$2894,??_isdigit
 14658  00398A  3011               	rrcf	??_isdigit,w,c
 14659  00398C  D000               	goto	l1924
 14660  00398E                     l1924:
 14661  00398E  0012               	return		;funcret
 14662  003990                     __end_of_isdigit:
 14663                           	opt stack 0
 14664                           tblptru	equ	0xFF8
 14665                           tblptrh	equ	0xFF7
 14666                           tblptrl	equ	0xFF6
 14667                           tablat	equ	0xFF5
 14668                           prodh	equ	0xFF4
 14669                           prodl	equ	0xFF3
 14670                           intcon	equ	0xFF2
 14671                           intcon2	equ	0xFF1
 14672                           postinc0	equ	0xFEE
 14673                           wreg	equ	0xFE8
 14674                           postdec1	equ	0xFE5
 14675                           fsr1l	equ	0xFE1
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           fsr2h	equ	0xFDA
 14680                           fsr2l	equ	0xFD9
 14681                           status	equ	0xFD8
 14682                           
 14683 ;; *************** function ___lwmod *****************
 14684 ;; Defined at:
 14685 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  dividend        2   23[COMRAM] unsigned int 
 14688 ;;  divisor         2   25[COMRAM] unsigned int 
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;  counter         1   27[COMRAM] unsigned char 
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  2   23[COMRAM] unsigned int 
 14693 ;; Registers used:
 14694 ;;		wreg, status,2, status,0
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;Total ram usage:        5 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:    3
 14707 ;; This function calls:
 14708 ;;		Nothing
 14709 ;; This function is called by:
 14710 ;;		_printf
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           	psect	text82
 14715  00346A                     __ptext82:
 14716                           	opt stack 0
 14717  00346A                     ___lwmod:
 14718                           	opt stack 26
 14719                           
 14720                           ;incstack = 0
 14721  00346A  501A               	movf	___lwmod@divisor,w,c
 14722  00346C  101B               	iorwf	___lwmod@divisor+1,w,c
 14723  00346E  B4D8               	btfsc	status,2,c
 14724  003470  D01D               	goto	l2026
 14725  003472  0E01               	movlw	1
 14726  003474  6E1C               	movwf	___lwmod@counter,c
 14727  003476  D005               	goto	l5529
 14728  003478                     l5527:
 14729  003478  90D8               	bcf	status,0,c
 14730  00347A  361A               	rlcf	___lwmod@divisor,f,c
 14731  00347C  361B               	rlcf	___lwmod@divisor+1,f,c
 14732  00347E  2A1C               	incf	___lwmod@counter,f,c
 14733  003480  D000               	goto	l5529
 14734  003482                     l5529:
 14735  003482  BE1B               	btfsc	___lwmod@divisor+1,7,c
 14736  003484  D002               	goto	l5531
 14737  003486  D7F8               	goto	l5527
 14738  003488  D000               	goto	l5531
 14739  00348A                     l5531:
 14740  00348A  501A               	movf	___lwmod@divisor,w,c
 14741  00348C  5C18               	subwf	___lwmod@dividend,w,c
 14742  00348E  501B               	movf	___lwmod@divisor+1,w,c
 14743  003490  5819               	subwfb	___lwmod@dividend+1,w,c
 14744  003492  A0D8               	btfss	status,0,c
 14745  003494  D005               	goto	l5535
 14746  003496  501A               	movf	___lwmod@divisor,w,c
 14747  003498  5E18               	subwf	___lwmod@dividend,f,c
 14748  00349A  501B               	movf	___lwmod@divisor+1,w,c
 14749  00349C  5A19               	subwfb	___lwmod@dividend+1,f,c
 14750  00349E  D000               	goto	l5535
 14751  0034A0                     l5535:
 14752  0034A0  90D8               	bcf	status,0,c
 14753  0034A2  321B               	rrcf	___lwmod@divisor+1,f,c
 14754  0034A4  321A               	rrcf	___lwmod@divisor,f,c
 14755  0034A6  2E1C               	decfsz	___lwmod@counter,f,c
 14756  0034A8  D7F0               	goto	l5531
 14757  0034AA  D000               	goto	l2026
 14758  0034AC                     l2026:
 14759  0034AC  C018  F018         	movff	___lwmod@dividend,?___lwmod
 14760  0034B0  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 14761  0034B4  0012               	return		;funcret
 14762  0034B6                     __end_of___lwmod:
 14763                           	opt stack 0
 14764                           tblptru	equ	0xFF8
 14765                           tblptrh	equ	0xFF7
 14766                           tblptrl	equ	0xFF6
 14767                           tablat	equ	0xFF5
 14768                           prodh	equ	0xFF4
 14769                           prodl	equ	0xFF3
 14770                           intcon	equ	0xFF2
 14771                           intcon2	equ	0xFF1
 14772                           postinc0	equ	0xFEE
 14773                           wreg	equ	0xFE8
 14774                           postdec1	equ	0xFE5
 14775                           fsr1l	equ	0xFE1
 14776                           indf2	equ	0xFDF
 14777                           postinc2	equ	0xFDE
 14778                           postdec2	equ	0xFDD
 14779                           fsr2h	equ	0xFDA
 14780                           fsr2l	equ	0xFD9
 14781                           status	equ	0xFD8
 14782                           
 14783 ;; *************** function ___lwdiv *****************
 14784 ;; Defined at:
 14785 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;  dividend        2   16[COMRAM] unsigned int 
 14788 ;;  divisor         2   18[COMRAM] unsigned int 
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;  quotient        2   20[COMRAM] unsigned int 
 14791 ;;  counter         1   22[COMRAM] unsigned char 
 14792 ;; Return value:  Size  Location     Type
 14793 ;;                  2   16[COMRAM] unsigned int 
 14794 ;; Registers used:
 14795 ;;		wreg, status,2, status,0
 14796 ;; Tracked objects:
 14797 ;;		On entry : 0/0
 14798 ;;		On exit  : 0/0
 14799 ;;		Unchanged: 0/0
 14800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14804 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14805 ;;Total ram usage:        7 bytes
 14806 ;; Hardware stack levels used:    1
 14807 ;; Hardware stack levels required when called:    3
 14808 ;; This function calls:
 14809 ;;		Nothing
 14810 ;; This function is called by:
 14811 ;;		_printf
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text83
 14816  0031D8                     __ptext83:
 14817                           	opt stack 0
 14818  0031D8                     ___lwdiv:
 14819                           	opt stack 26
 14820                           
 14821                           ;incstack = 0
 14822  0031D8  0E00               	movlw	0
 14823  0031DA  6E16               	movwf	___lwdiv@quotient+1,c
 14824  0031DC  0E00               	movlw	0
 14825  0031DE  6E15               	movwf	___lwdiv@quotient,c
 14826  0031E0  5013               	movf	___lwdiv@divisor,w,c
 14827  0031E2  1014               	iorwf	___lwdiv@divisor+1,w,c
 14828  0031E4  B4D8               	btfsc	status,2,c
 14829  0031E6  D021               	goto	l2016
 14830  0031E8  0E01               	movlw	1
 14831  0031EA  6E17               	movwf	___lwdiv@counter,c
 14832  0031EC  D005               	goto	l5509
 14833  0031EE                     l5507:
 14834  0031EE  90D8               	bcf	status,0,c
 14835  0031F0  3613               	rlcf	___lwdiv@divisor,f,c
 14836  0031F2  3614               	rlcf	___lwdiv@divisor+1,f,c
 14837  0031F4  2A17               	incf	___lwdiv@counter,f,c
 14838  0031F6  D000               	goto	l5509
 14839  0031F8                     l5509:
 14840  0031F8  BE14               	btfsc	___lwdiv@divisor+1,7,c
 14841  0031FA  D002               	goto	l5511
 14842  0031FC  D7F8               	goto	l5507
 14843  0031FE  D000               	goto	l5511
 14844  003200                     l5511:
 14845  003200  90D8               	bcf	status,0,c
 14846  003202  3615               	rlcf	___lwdiv@quotient,f,c
 14847  003204  3616               	rlcf	___lwdiv@quotient+1,f,c
 14848  003206  5013               	movf	___lwdiv@divisor,w,c
 14849  003208  5C11               	subwf	___lwdiv@dividend,w,c
 14850  00320A  5014               	movf	___lwdiv@divisor+1,w,c
 14851  00320C  5812               	subwfb	___lwdiv@dividend+1,w,c
 14852  00320E  A0D8               	btfss	status,0,c
 14853  003210  D006               	goto	l5519
 14854  003212  5013               	movf	___lwdiv@divisor,w,c
 14855  003214  5E11               	subwf	___lwdiv@dividend,f,c
 14856  003216  5014               	movf	___lwdiv@divisor+1,w,c
 14857  003218  5A12               	subwfb	___lwdiv@dividend+1,f,c
 14858  00321A  8015               	bsf	___lwdiv@quotient,0,c
 14859  00321C  D000               	goto	l5519
 14860  00321E                     l5519:
 14861  00321E  90D8               	bcf	status,0,c
 14862  003220  3214               	rrcf	___lwdiv@divisor+1,f,c
 14863  003222  3213               	rrcf	___lwdiv@divisor,f,c
 14864  003224  2E17               	decfsz	___lwdiv@counter,f,c
 14865  003226  D7EC               	goto	l5511
 14866  003228  D000               	goto	l2016
 14867  00322A                     l2016:
 14868  00322A  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 14869  00322E  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14870  003232  0012               	return		;funcret
 14871  003234                     __end_of___lwdiv:
 14872                           	opt stack 0
 14873                           tblptru	equ	0xFF8
 14874                           tblptrh	equ	0xFF7
 14875                           tblptrl	equ	0xFF6
 14876                           tablat	equ	0xFF5
 14877                           prodh	equ	0xFF4
 14878                           prodl	equ	0xFF3
 14879                           intcon	equ	0xFF2
 14880                           intcon2	equ	0xFF1
 14881                           postinc0	equ	0xFEE
 14882                           wreg	equ	0xFE8
 14883                           postdec1	equ	0xFE5
 14884                           fsr1l	equ	0xFE1
 14885                           indf2	equ	0xFDF
 14886                           postinc2	equ	0xFDE
 14887                           postdec2	equ	0xFDD
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8
 14891                           
 14892 ;; *************** function _drawtext *****************
 14893 ;; Defined at:
 14894 ;;		line 474 in file "ST7735_TFT.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;  x               1    wreg     unsigned char 
 14897 ;;  y               1   56[COMRAM] unsigned char 
 14898 ;;  _text           2   57[COMRAM] PTR unsigned char 
 14899 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 14900 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 14901 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 14902 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 14903 ;;		 -> tempC(4), 
 14904 ;;  color           2   59[COMRAM] unsigned int 
 14905 ;;  bg              2   61[COMRAM] unsigned int 
 14906 ;;  size            1   63[COMRAM] unsigned char 
 14907 ;; Auto vars:     Size  Location     Type
 14908 ;;  x               1    0[BANK1 ] unsigned char 
 14909 ;;  i               2    3[BANK1 ] unsigned int 
 14910 ;;  textsize        2    1[BANK1 ] unsigned int 
 14911 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 14912 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 14913 ;; Return value:  Size  Location     Type
 14914 ;;		None               void
 14915 ;; Registers used:
 14916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14922 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;      Totals:         8       2       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;Total ram usage:       17 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; Hardware stack levels required when called:    9
 14929 ;; This function calls:
 14930 ;;		_drawChar
 14931 ;;		_strlen
 14932 ;; This function is called by:
 14933 ;;		_Initialize_Screen
 14934 ;;		_Update_Screen
 14935 ;;		_Initialize_Setup_Alarm_Time_Screen
 14936 ;;		_Update_Setup_Alarm_Time_Screen
 14937 ;;		_Initialize_Setup_Heater_Screen
 14938 ;;		_Update_Setup_Heater_Screen
 14939 ;;		_Initialize_Setup_Time_Screen
 14940 ;;		_Update_Setup_Time_Screen
 14941 ;; This function uses a non-reentrant model
 14942 ;;
 14943                           
 14944                           	psect	text84
 14945  001856                     __ptext84:
 14946                           	opt stack 0
 14947  001856                     _drawtext:
 14948                           	opt stack 20
 14949                           
 14950                           ;incstack = 0
 14951                           ;drawtext@x stored from wreg
 14952  001856  0101               	movlb	1	; () banked
 14953  001858  6F34               	movwf	drawtext@x& (0+255),b
 14954                           
 14955                           ; BSR set to: 1
 14956                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 14957                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 14958                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 14959  00185A  C134  F13A         	movff	drawtext@x,drawtext@cursor_x
 14960                           
 14961                           ; BSR set to: 1
 14962  00185E  C039  F139         	movff	drawtext@y,drawtext@cursor_y
 14963                           
 14964                           ; BSR set to: 1
 14965                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 14966  001862  C03A  F011         	movff	drawtext@_text,strlen@s
 14967  001866  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 14968  00186A  EC29  F01B         	call	_strlen	;wreg free
 14969  00186E  C011  F135         	movff	?_strlen,drawtext@textsize
 14970  001872  C012  F136         	movff	?_strlen+1,drawtext@textsize+1
 14971                           
 14972                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 14973  001876  0E00               	movlw	0
 14974  001878  0101               	movlb	1	; () banked
 14975  00187A  6F38               	movwf	(drawtext@i+1)& (0+255),b
 14976  00187C  0E00               	movlw	0
 14977  00187E  6F37               	movwf	drawtext@i& (0+255),b
 14978  001880  D06C               	goto	l8591
 14979  001882                     l8565:
 14980                           
 14981                           ; BSR set to: 1
 14982                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 14983  001882  0100               	movlb	0	; () banked
 14984  001884  5181               	movf	_wrap& (0+255),w,b
 14985  001886  0100               	movlb	0	; () banked
 14986  001888  B4D8               	btfsc	status,2,c
 14987  00188A  D03A               	goto	l8581
 14988                           
 14989                           ; BSR set to: 0
 14990  00188C  5040               	movf	drawtext@size,w,c
 14991  00188E  0D05               	mullw	5
 14992  001890  0101               	movlb	1	; () banked
 14993  001892  513A               	movf	drawtext@cursor_x& (0+255),w,b
 14994  001894  0100               	movlb	0	; () banked
 14995  001896  6FFB               	movwf	??_drawtext& (0+255),b
 14996  001898  6BFC               	clrf	(??_drawtext+1)& (0+255),b
 14997  00189A  50F3               	movf	prodl,w,c
 14998  00189C  0100               	movlb	0	; () banked
 14999  00189E  27FB               	addwf	??_drawtext& (0+255),f,b
 15000  0018A0  50F4               	movf	prodh,w,c
 15001  0018A2  0100               	movlb	0	; () banked
 15002  0018A4  23FC               	addwfc	(??_drawtext+1)& (0+255),f,b
 15003  0018A6  0100               	movlb	0	; () banked
 15004  0018A8  BFFC               	btfsc	(??_drawtext+1)& (0+255),7,b
 15005  0018AA  D02A               	goto	l8581
 15006  0018AC  0100               	movlb	0	; () banked
 15007  0018AE  51FC               	movf	(??_drawtext+1)& (0+255),w,b
 15008  0018B0  E105               	bnz	u6270
 15009  0018B2  0E81               	movlw	129
 15010  0018B4  0100               	movlb	0	; () banked
 15011  0018B6  5DFB               	subwf	??_drawtext& (0+255),w,b
 15012  0018B8  A0D8               	btfss	status,0,c
 15013  0018BA  D022               	goto	l8581
 15014  0018BC                     u6270:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;ST7735_TFT.c: 482: cursor_x = 0;
 15018  0018BC  0E00               	movlw	0
 15019  0018BE  0101               	movlb	1	; () banked
 15020  0018C0  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15021                           
 15022                           ; BSR set to: 1
 15023                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 15024  0018C2  5040               	movf	drawtext@size,w,c
 15025  0018C4  0D07               	mullw	7
 15026  0018C6  50F3               	movf	prodl,w,c
 15027  0018C8  0101               	movlb	1	; () banked
 15028  0018CA  2539               	addwf	drawtext@cursor_y& (0+255),w,b
 15029  0018CC  0F03               	addlw	3
 15030  0018CE  0101               	movlb	1	; () banked
 15031  0018D0  6F39               	movwf	drawtext@cursor_y& (0+255),b
 15032                           
 15033                           ; BSR set to: 1
 15034                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 15035  0018D2  0EA0               	movlw	160
 15036  0018D4  0101               	movlb	1	; () banked
 15037  0018D6  6539               	cpfsgt	drawtext@cursor_y& (0+255),b
 15038  0018D8  D004               	goto	l8577
 15039                           
 15040                           ; BSR set to: 1
 15041  0018DA  0EA0               	movlw	160
 15042  0018DC  0101               	movlb	1	; () banked
 15043  0018DE  6F39               	movwf	drawtext@cursor_y& (0+255),b
 15044  0018E0  D000               	goto	l8577
 15045  0018E2                     l8577:
 15046                           
 15047                           ; BSR set to: 1
 15048                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 15049  0018E2  0101               	movlb	1	; () banked
 15050  0018E4  5137               	movf	drawtext@i& (0+255),w,b
 15051  0018E6  243A               	addwf	drawtext@_text,w,c
 15052  0018E8  6ED9               	movwf	fsr2l,c
 15053  0018EA  0101               	movlb	1	; () banked
 15054  0018EC  5138               	movf	(drawtext@i+1)& (0+255),w,b
 15055  0018EE  203B               	addwfc	drawtext@_text+1,w,c
 15056  0018F0  6EDA               	movwf	fsr2h,c
 15057  0018F2  0E20               	movlw	32
 15058  0018F4  18DE               	xorwf	postinc2,w,c
 15059  0018F6  B4D8               	btfsc	status,2,c
 15060  0018F8  D02C               	goto	l8589
 15061  0018FA  D002               	goto	l8581
 15062                           
 15063                           ; BSR set to: 1
 15064  0018FC  D02A               	goto	l8589
 15065                           
 15066                           ; BSR set to: 1
 15067  0018FE  D000               	goto	l8581
 15068  001900                     l8581:
 15069                           
 15070                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 15071  001900  C139  F02E         	movff	drawtext@cursor_y,drawChar@y
 15072  001904  0101               	movlb	1	; () banked
 15073  001906  5137               	movf	drawtext@i& (0+255),w,b
 15074  001908  243A               	addwf	drawtext@_text,w,c
 15075  00190A  6ED9               	movwf	fsr2l,c
 15076  00190C  0101               	movlb	1	; () banked
 15077  00190E  5138               	movf	(drawtext@i+1)& (0+255),w,b
 15078  001910  203B               	addwfc	drawtext@_text+1,w,c
 15079  001912  6EDA               	movwf	fsr2h,c
 15080  001914  50DF               	movf	indf2,w,c
 15081  001916  6E2F               	movwf	drawChar@c,c
 15082  001918  C03C  F030         	movff	drawtext@color,drawChar@color
 15083  00191C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 15084  001920  C03E  F032         	movff	drawtext@bg,drawChar@bg
 15085  001924  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 15086  001928  C040  F034         	movff	drawtext@size,drawChar@size
 15087  00192C  0101               	movlb	1	; () banked
 15088  00192E  513A               	movf	drawtext@cursor_x& (0+255),w,b
 15089  001930  EC80  F00B         	call	_drawChar
 15090                           
 15091                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 15092  001934  5040               	movf	drawtext@size,w,c
 15093  001936  0D06               	mullw	6
 15094  001938  50F3               	movf	prodl,w,c
 15095  00193A  0101               	movlb	1	; () banked
 15096  00193C  253A               	addwf	drawtext@cursor_x& (0+255),w,b
 15097  00193E  0101               	movlb	1	; () banked
 15098  001940  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15099                           
 15100                           ; BSR set to: 1
 15101                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 15102  001942  0E80               	movlw	128
 15103  001944  0101               	movlb	1	; () banked
 15104  001946  653A               	cpfsgt	drawtext@cursor_x& (0+255),b
 15105  001948  D004               	goto	l8589
 15106                           
 15107                           ; BSR set to: 1
 15108  00194A  0E80               	movlw	128
 15109  00194C  0101               	movlb	1	; () banked
 15110  00194E  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15111                           
 15112                           ; BSR set to: 1
 15113  001950  D000               	goto	l8589
 15114  001952                     l8589:
 15115                           
 15116                           ; BSR set to: 1
 15117  001952  0101               	movlb	1	; () banked
 15118  001954  4B37               	infsnz	drawtext@i& (0+255),f,b
 15119  001956  2B38               	incf	(drawtext@i+1)& (0+255),f,b
 15120  001958  D000               	goto	l8591
 15121  00195A                     l8591:
 15122                           
 15123                           ; BSR set to: 1
 15124  00195A  0101               	movlb	1	; () banked
 15125  00195C  5135               	movf	drawtext@textsize& (0+255),w,b
 15126  00195E  0101               	movlb	1	; () banked
 15127  001960  5D37               	subwf	drawtext@i& (0+255),w,b
 15128  001962  0101               	movlb	1	; () banked
 15129  001964  5136               	movf	(drawtext@textsize+1)& (0+255),w,b
 15130  001966  0101               	movlb	1	; () banked
 15131  001968  5938               	subwfb	(drawtext@i+1)& (0+255),w,b
 15132  00196A  A0D8               	btfss	status,0,c
 15133  00196C  D78A               	goto	l8565
 15134                           
 15135                           ; BSR set to: 1
 15136                           
 15137                           ; BSR set to: 1
 15138  00196E  0012               	return		;funcret
 15139  001970                     __end_of_drawtext:
 15140                           	opt stack 0
 15141                           tblptru	equ	0xFF8
 15142                           tblptrh	equ	0xFF7
 15143                           tblptrl	equ	0xFF6
 15144                           tablat	equ	0xFF5
 15145                           prodh	equ	0xFF4
 15146                           prodl	equ	0xFF3
 15147                           intcon	equ	0xFF2
 15148                           intcon2	equ	0xFF1
 15149                           postinc0	equ	0xFEE
 15150                           wreg	equ	0xFE8
 15151                           postdec1	equ	0xFE5
 15152                           fsr1l	equ	0xFE1
 15153                           indf2	equ	0xFDF
 15154                           postinc2	equ	0xFDE
 15155                           postdec2	equ	0xFDD
 15156                           fsr2h	equ	0xFDA
 15157                           fsr2l	equ	0xFD9
 15158                           status	equ	0xFD8
 15159                           
 15160 ;; *************** function _strlen *****************
 15161 ;; Defined at:
 15162 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;  s               2   16[COMRAM] PTR const unsigned char 
 15165 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15166 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15167 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15168 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15169 ;;		 -> tempC(4), 
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 15172 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15173 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15174 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15175 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15176 ;;		 -> tempC(4), 
 15177 ;; Return value:  Size  Location     Type
 15178 ;;                  2   16[COMRAM] unsigned int 
 15179 ;; Registers used:
 15180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15189 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15190 ;;Total ram usage:        6 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; Hardware stack levels required when called:    3
 15193 ;; This function calls:
 15194 ;;		Nothing
 15195 ;; This function is called by:
 15196 ;;		_drawtext
 15197 ;; This function uses a non-reentrant model
 15198 ;;
 15199                           
 15200                           	psect	text85
 15201  003652                     __ptext85:
 15202                           	opt stack 0
 15203  003652                     _strlen:
 15204                           	opt stack 25
 15205                           
 15206                           ; BSR set to: 1
 15207                           ;incstack = 0
 15208  003652  C011  F015         	movff	strlen@s,strlen@cp
 15209  003656  C012  F016         	movff	strlen@s+1,strlen@cp+1
 15210  00365A  D003               	goto	l8177
 15211  00365C                     l8175:
 15212  00365C  4A15               	infsnz	strlen@cp,f,c
 15213  00365E  2A16               	incf	strlen@cp+1,f,c
 15214  003660  D000               	goto	l8177
 15215  003662                     l8177:
 15216  003662  C015  FFD9         	movff	strlen@cp,fsr2l
 15217  003666  C016  FFDA         	movff	strlen@cp+1,fsr2h
 15218  00366A  50DF               	movf	indf2,w,c
 15219  00366C  A4D8               	btfss	status,2,c
 15220  00366E  D7F6               	goto	l8175
 15221  003670  C011  F013         	movff	strlen@s,??_strlen
 15222  003674  C012  F014         	movff	strlen@s+1,??_strlen+1
 15223  003678  1E13               	comf	??_strlen,f,c
 15224  00367A  1E14               	comf	??_strlen+1,f,c
 15225  00367C  4A13               	infsnz	??_strlen,f,c
 15226  00367E  2A14               	incf	??_strlen+1,f,c
 15227  003680  5015               	movf	strlen@cp,w,c
 15228  003682  2413               	addwf	??_strlen,w,c
 15229  003684  6E11               	movwf	?_strlen,c
 15230  003686  5016               	movf	strlen@cp+1,w,c
 15231  003688  2014               	addwfc	??_strlen+1,w,c
 15232  00368A  6E12               	movwf	?_strlen+1,c
 15233  00368C  D000               	goto	l2055
 15234  00368E                     l2055:
 15235  00368E  0012               	return		;funcret
 15236  003690                     __end_of_strlen:
 15237                           	opt stack 0
 15238                           tblptru	equ	0xFF8
 15239                           tblptrh	equ	0xFF7
 15240                           tblptrl	equ	0xFF6
 15241                           tablat	equ	0xFF5
 15242                           prodh	equ	0xFF4
 15243                           prodl	equ	0xFF3
 15244                           intcon	equ	0xFF2
 15245                           intcon2	equ	0xFF1
 15246                           postinc0	equ	0xFEE
 15247                           wreg	equ	0xFE8
 15248                           postdec1	equ	0xFE5
 15249                           fsr1l	equ	0xFE1
 15250                           indf2	equ	0xFDF
 15251                           postinc2	equ	0xFDE
 15252                           postdec2	equ	0xFDD
 15253                           fsr2h	equ	0xFDA
 15254                           fsr2l	equ	0xFD9
 15255                           status	equ	0xFD8
 15256                           
 15257 ;; *************** function _drawChar *****************
 15258 ;; Defined at:
 15259 ;;		line 447 in file "ST7735_TFT.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  x               1    wreg     unsigned char 
 15262 ;;  y               1   45[COMRAM] unsigned char 
 15263 ;;  c               1   46[COMRAM] unsigned char 
 15264 ;;  color           2   47[COMRAM] unsigned int 
 15265 ;;  bg              2   49[COMRAM] unsigned int 
 15266 ;;  size            1   51[COMRAM] unsigned char 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  x               1   53[COMRAM] unsigned char 
 15269 ;;  line            1   52[COMRAM] unsigned char 
 15270 ;;  i               1   55[COMRAM] unsigned char 
 15271 ;;  j               1   54[COMRAM] unsigned char 
 15272 ;; Return value:  Size  Location     Type
 15273 ;;		None               void
 15274 ;; Registers used:
 15275 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15276 ;; Tracked objects:
 15277 ;;		On entry : 0/0
 15278 ;;		On exit  : 0/0
 15279 ;;		Unchanged: 0/0
 15280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15281 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15284 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15285 ;;Total ram usage:       11 bytes
 15286 ;; Hardware stack levels used:    1
 15287 ;; Hardware stack levels required when called:    8
 15288 ;; This function calls:
 15289 ;;		___wmul
 15290 ;;		_drawPixel
 15291 ;;		_fillRect
 15292 ;; This function is called by:
 15293 ;;		_drawtext
 15294 ;; This function uses a non-reentrant model
 15295 ;;
 15296                           
 15297                           	psect	text86
 15298  001700                     __ptext86:
 15299                           	opt stack 0
 15300  001700                     _drawChar:
 15301                           	opt stack 20
 15302                           
 15303                           ;incstack = 0
 15304                           ;drawChar@x stored from wreg
 15305  001700  6E36               	movwf	drawChar@x,c
 15306                           
 15307                           ;ST7735_TFT.c: 449: char i, j;
 15308                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 15309  001702  0E80               	movlw	128
 15310  001704  6036               	cpfslt	drawChar@x,c
 15311  001706  D0A6               	goto	l765
 15312  001708  0E9F               	movlw	159
 15313  00170A  642E               	cpfsgt	drawChar@y,c
 15314  00170C  D001               	goto	l8123
 15315                           
 15316                           ;ST7735_TFT.c: 451: return;
 15317  00170E  D0A2               	goto	l765
 15318  001710                     l8123:
 15319                           
 15320                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 15321  001710  5034               	movf	drawChar@size,w,c
 15322  001712  A4D8               	btfss	status,2,c
 15323  001714  D003               	goto	l8127
 15324  001716  0E01               	movlw	1
 15325  001718  6E34               	movwf	drawChar@size,c
 15326  00171A  D000               	goto	l8127
 15327  00171C                     l8127:
 15328                           
 15329                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 15330  00171C  0E1F               	movlw	31
 15331  00171E  642F               	cpfsgt	drawChar@c,c
 15332  001720  D004               	goto	l8131
 15333  001722  0E7E               	movlw	126
 15334  001724  642F               	cpfsgt	drawChar@c,c
 15335  001726  D003               	goto	l767
 15336  001728  D000               	goto	l8131
 15337  00172A                     l8131:
 15338                           
 15339                           ;ST7735_TFT.c: 454: c = '?';
 15340  00172A  0E3F               	movlw	63
 15341  00172C  6E2F               	movwf	drawChar@c,c
 15342  00172E                     l767:
 15343                           
 15344                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 15345  00172E  0E00               	movlw	0
 15346  001730  6E38               	movwf	drawChar@i,c
 15347  001732                     l8133:
 15348  001732  0E04               	movlw	4
 15349  001734  6438               	cpfsgt	drawChar@i,c
 15350  001736  D001               	goto	l8137
 15351  001738  D08D               	goto	l765
 15352  00173A                     l8137:
 15353                           
 15354                           ;ST7735_TFT.c: 456: unsigned char line;
 15355                           ;ST7735_TFT.c: 457: if(c < 'S')
 15356  00173A  0E53               	movlw	83
 15357  00173C  602F               	cpfslt	drawChar@c,c
 15358  00173E  D015               	goto	l8141
 15359                           
 15360                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 15361  001740  0EE0               	movlw	224
 15362  001742  242F               	addwf	drawChar@c,w,c
 15363  001744  6E11               	movwf	___wmul@multiplier,c
 15364  001746  6A12               	clrf	___wmul@multiplier+1,c
 15365  001748  0EFF               	movlw	255
 15366  00174A  2212               	addwfc	___wmul@multiplier+1,f,c
 15367  00174C  0E00               	movlw	0
 15368  00174E  6E14               	movwf	___wmul@multiplicand+1,c
 15369  001750  0E05               	movlw	5
 15370  001752  6E13               	movwf	___wmul@multiplicand,c
 15371  001754  EC7D  F01C         	call	___wmul	;wreg free
 15372  001758  5038               	movf	drawChar@i,w,c
 15373  00175A  2611               	addwf	?___wmul,f,c
 15374  00175C  0E00               	movlw	0
 15375  00175E  2212               	addwfc	?___wmul+1,f,c
 15376  001760  0E9D               	movlw	low _font
 15377  001762  2411               	addwf	?___wmul,w,c
 15378  001764  6EF6               	movwf	tblptrl,c
 15379  001766  0EFC               	movlw	high _font
 15380  001768  D014               	goto	L14
 15381  00176A                     l8141:
 15382                           
 15383                           ;ST7735_TFT.c: 459: else
 15384                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 15385  00176A  0EAD               	movlw	173
 15386  00176C  242F               	addwf	drawChar@c,w,c
 15387  00176E  6E11               	movwf	___wmul@multiplier,c
 15388  001770  6A12               	clrf	___wmul@multiplier+1,c
 15389  001772  0EFF               	movlw	255
 15390  001774  2212               	addwfc	___wmul@multiplier+1,f,c
 15391  001776  0E00               	movlw	0
 15392  001778  6E14               	movwf	___wmul@multiplicand+1,c
 15393  00177A  0E05               	movlw	5
 15394  00177C  6E13               	movwf	___wmul@multiplicand,c
 15395  00177E  EC7D  F01C         	call	___wmul	;wreg free
 15396  001782  5038               	movf	drawChar@i,w,c
 15397  001784  2611               	addwf	?___wmul,f,c
 15398  001786  0E00               	movlw	0
 15399  001788  2212               	addwfc	?___wmul+1,f,c
 15400  00178A  0E9C               	movlw	low _font2
 15401  00178C  2411               	addwf	?___wmul,w,c
 15402  00178E  6EF6               	movwf	tblptrl,c
 15403  001790  0EFD               	movlw	high _font2
 15404  001792                     L14:
 15405  001792  2012               	addwfc	?___wmul+1,w,c
 15406  001794  6EF7               	movwf	tblptrh,c
 15407  001796                     	if	0	;There are less than 3 active tblptr bytes
 15408  001796                     	endif
 15409  001796  0008               	tblrd		*
 15410  001798  CFF5 F035          	movff	tablat,drawChar@line
 15411  00179C  D000               	goto	l8143
 15412  00179E                     l8143:
 15413                           
 15414                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 15415  00179E  0E00               	movlw	0
 15416  0017A0  6E37               	movwf	drawChar@j,c
 15417  0017A2                     l8145:
 15418  0017A2  0E06               	movlw	6
 15419  0017A4  6437               	cpfsgt	drawChar@j,c
 15420  0017A6  D001               	goto	l774
 15421  0017A8  D053               	goto	l8169
 15422  0017AA                     l774:
 15423                           
 15424                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 15425  0017AA  A035               	btfss	drawChar@line,0,c
 15426  0017AC  D023               	goto	l8155
 15427                           
 15428                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 15429  0017AE  0434               	decf	drawChar@size,w,c
 15430  0017B0  A4D8               	btfss	status,2,c
 15431  0017B2  D00C               	goto	l8153
 15432  0017B4  502E               	movf	drawChar@y,w,c
 15433  0017B6  2437               	addwf	drawChar@j,w,c
 15434  0017B8  6E18               	movwf	drawPixel@y,c
 15435  0017BA  C030  F019         	movff	drawChar@color,drawPixel@color
 15436  0017BE  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 15437  0017C2  5036               	movf	drawChar@x,w,c
 15438  0017C4  2438               	addwf	drawChar@i,w,c
 15439  0017C6  EC25  F01C         	call	_drawPixel
 15440  0017CA  D03E               	goto	l8163
 15441  0017CC                     l8153:
 15442                           
 15443                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15444  0017CC  5037               	movf	drawChar@j,w,c
 15445  0017CE  0234               	mulwf	drawChar@size,c
 15446  0017D0  50F3               	movf	prodl,w,c
 15447  0017D2  242E               	addwf	drawChar@y,w,c
 15448  0017D4  6E23               	movwf	fillRect@y,c
 15449  0017D6  C034  F024         	movff	drawChar@size,fillRect@w
 15450  0017DA  C034  F025         	movff	drawChar@size,fillRect@h
 15451  0017DE  C030  F026         	movff	drawChar@color,fillRect@color
 15452  0017E2  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 15453  0017E6  5038               	movf	drawChar@i,w,c
 15454  0017E8  0234               	mulwf	drawChar@size,c
 15455  0017EA  50F3               	movf	prodl,w,c
 15456  0017EC  2436               	addwf	drawChar@x,w,c
 15457  0017EE  EC80  F01A         	call	_fillRect
 15458                           
 15459                           ;ST7735_TFT.c: 465: }
 15460  0017F2  D02A               	goto	l8163
 15461  0017F4                     l8155:
 15462                           
 15463                           ;ST7735_TFT.c: 466: else if(bg != color) {
 15464  0017F4  5030               	movf	drawChar@color,w,c
 15465  0017F6  1832               	xorwf	drawChar@bg,w,c
 15466  0017F8  E104               	bnz	u5690
 15467  0017FA  5031               	movf	drawChar@color+1,w,c
 15468  0017FC  1833               	xorwf	drawChar@bg+1,w,c
 15469  0017FE  B4D8               	btfsc	status,2,c
 15470  001800  D023               	goto	l8163
 15471  001802                     u5690:
 15472                           
 15473                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 15474  001802  0434               	decf	drawChar@size,w,c
 15475  001804  A4D8               	btfss	status,2,c
 15476  001806  D00C               	goto	l8161
 15477  001808  502E               	movf	drawChar@y,w,c
 15478  00180A  2437               	addwf	drawChar@j,w,c
 15479  00180C  6E18               	movwf	drawPixel@y,c
 15480  00180E  C032  F019         	movff	drawChar@bg,drawPixel@color
 15481  001812  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 15482  001816  5036               	movf	drawChar@x,w,c
 15483  001818  2438               	addwf	drawChar@i,w,c
 15484  00181A  EC25  F01C         	call	_drawPixel
 15485  00181E  D014               	goto	l8163
 15486  001820                     l8161:
 15487                           
 15488                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 15489  001820  5037               	movf	drawChar@j,w,c
 15490  001822  0234               	mulwf	drawChar@size,c
 15491  001824  50F3               	movf	prodl,w,c
 15492  001826  242E               	addwf	drawChar@y,w,c
 15493  001828  6E23               	movwf	fillRect@y,c
 15494  00182A  C034  F024         	movff	drawChar@size,fillRect@w
 15495  00182E  C034  F025         	movff	drawChar@size,fillRect@h
 15496  001832  C032  F026         	movff	drawChar@bg,fillRect@color
 15497  001836  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 15498  00183A  5038               	movf	drawChar@i,w,c
 15499  00183C  0234               	mulwf	drawChar@size,c
 15500  00183E  50F3               	movf	prodl,w,c
 15501  001840  2436               	addwf	drawChar@x,w,c
 15502  001842  EC80  F01A         	call	_fillRect
 15503  001846  D000               	goto	l8163
 15504  001848                     l8163:
 15505  001848  2A37               	incf	drawChar@j,f,c
 15506  00184A  90D8               	bcf	status,0,c
 15507  00184C  3235               	rrcf	drawChar@line,f,c
 15508  00184E  D7A9               	goto	l8145
 15509  001850                     l8169:
 15510  001850  2A38               	incf	drawChar@i,f,c
 15511  001852  D76F               	goto	l8133
 15512  001854                     l765:
 15513  001854  0012               	return		;funcret
 15514  001856                     __end_of_drawChar:
 15515                           	opt stack 0
 15516                           tblptru	equ	0xFF8
 15517                           tblptrh	equ	0xFF7
 15518                           tblptrl	equ	0xFF6
 15519                           tablat	equ	0xFF5
 15520                           prodh	equ	0xFF4
 15521                           prodl	equ	0xFF3
 15522                           intcon	equ	0xFF2
 15523                           intcon2	equ	0xFF1
 15524                           postinc0	equ	0xFEE
 15525                           wreg	equ	0xFE8
 15526                           postdec1	equ	0xFE5
 15527                           fsr1l	equ	0xFE1
 15528                           indf2	equ	0xFDF
 15529                           postinc2	equ	0xFDE
 15530                           postdec2	equ	0xFDD
 15531                           fsr2h	equ	0xFDA
 15532                           fsr2l	equ	0xFD9
 15533                           status	equ	0xFD8
 15534                           
 15535 ;; *************** function _fillRect *****************
 15536 ;; Defined at:
 15537 ;;		line 437 in file "ST7735_TFT.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;  x               1    wreg     unsigned char 
 15540 ;;  y               1   34[COMRAM] unsigned char 
 15541 ;;  w               1   35[COMRAM] unsigned char 
 15542 ;;  h               1   36[COMRAM] unsigned char 
 15543 ;;  color           2   37[COMRAM] unsigned int 
 15544 ;; Auto vars:     Size  Location     Type
 15545 ;;  x               1   42[COMRAM] unsigned char 
 15546 ;;  i               2   43[COMRAM] int 
 15547 ;; Return value:  Size  Location     Type
 15548 ;;		None               void
 15549 ;; Registers used:
 15550 ;;		wreg, status,2, status,0, cstack
 15551 ;; Tracked objects:
 15552 ;;		On entry : 0/0
 15553 ;;		On exit  : 0/0
 15554 ;;		Unchanged: 0/0
 15555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15556 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15557 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;Total ram usage:       11 bytes
 15561 ;; Hardware stack levels used:    1
 15562 ;; Hardware stack levels required when called:    7
 15563 ;; This function calls:
 15564 ;;		_drawFastVLine
 15565 ;; This function is called by:
 15566 ;;		_drawChar
 15567 ;;		_Initialize_Setup_Alarm_Time_Screen
 15568 ;;		_Initialize_Setup_Time_Screen
 15569 ;;		_Update_Setup_Screen_Cursor_Forward
 15570 ;;		_Update_Setup_Screen_Cursor_Backward
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           	psect	text87
 15575  003500                     __ptext87:
 15576                           	opt stack 0
 15577  003500                     _fillRect:
 15578                           	opt stack 20
 15579                           
 15580                           ;incstack = 0
 15581                           ;fillRect@x stored from wreg
 15582  003500  6E2B               	movwf	fillRect@x,c
 15583                           
 15584                           ;ST7735_TFT.c: 439: signed int i;
 15585                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 15586  003502  C02B  F02C         	movff	fillRect@x,fillRect@i
 15587  003506  6A2D               	clrf	fillRect@i+1,c
 15588  003508  D00E               	goto	l7945
 15589  00350A                     l7941:
 15590                           
 15591                           ;ST7735_TFT.c: 442: {
 15592                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 15593  00350A  C023  F018         	movff	fillRect@y,drawFastVLine@y
 15594  00350E  C025  F019         	movff	fillRect@h,drawFastVLine@h
 15595  003512  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 15596  003516  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 15597  00351A  502C               	movf	fillRect@i,w,c
 15598  00351C  EC3A  F016         	call	_drawFastVLine
 15599  003520  4A2C               	infsnz	fillRect@i,f,c
 15600  003522  2A2D               	incf	fillRect@i+1,f,c
 15601  003524  D000               	goto	l7945
 15602  003526                     l7945:
 15603  003526  5024               	movf	fillRect@w,w,c
 15604  003528  C02B  F028         	movff	fillRect@x,??_fillRect
 15605  00352C  6A29               	clrf	(??_fillRect+1)& (0+255),c
 15606  00352E  2628               	addwf	??_fillRect,f,c
 15607  003530  0E00               	movlw	0
 15608  003532  2229               	addwfc	??_fillRect+1,f,c
 15609  003534  5028               	movf	??_fillRect,w,c
 15610  003536  5C2C               	subwf	fillRect@i,w,c
 15611  003538  502D               	movf	fillRect@i+1,w,c
 15612  00353A  0A80               	xorlw	128
 15613  00353C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 15614  00353E  5029               	movf	??_fillRect+1,w,c
 15615  003540  0A80               	xorlw	128
 15616  003542  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 15617  003544  A0D8               	btfss	status,0,c
 15618  003546  D7E1               	goto	l7941
 15619  003548  0012               	return		;funcret
 15620  00354A                     __end_of_fillRect:
 15621                           	opt stack 0
 15622                           tblptru	equ	0xFF8
 15623                           tblptrh	equ	0xFF7
 15624                           tblptrl	equ	0xFF6
 15625                           tablat	equ	0xFF5
 15626                           prodh	equ	0xFF4
 15627                           prodl	equ	0xFF3
 15628                           intcon	equ	0xFF2
 15629                           intcon2	equ	0xFF1
 15630                           postinc0	equ	0xFEE
 15631                           wreg	equ	0xFE8
 15632                           postdec1	equ	0xFE5
 15633                           fsr1l	equ	0xFE1
 15634                           indf2	equ	0xFDF
 15635                           postinc2	equ	0xFDE
 15636                           postdec2	equ	0xFDD
 15637                           fsr2h	equ	0xFDA
 15638                           fsr2l	equ	0xFD9
 15639                           status	equ	0xFD8
 15640                           
 15641 ;; *************** function _drawFastVLine *****************
 15642 ;; Defined at:
 15643 ;;		line 416 in file "ST7735_TFT.c"
 15644 ;; Parameters:    Size  Location     Type
 15645 ;;  x               1    wreg     unsigned char 
 15646 ;;  y               1   23[COMRAM] unsigned char 
 15647 ;;  h               1   24[COMRAM] unsigned char 
 15648 ;;  color           2   25[COMRAM] unsigned int 
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;  x               1   33[COMRAM] unsigned char 
 15651 ;;  lo              1   32[COMRAM] unsigned char 
 15652 ;;  hi              1   31[COMRAM] unsigned char 
 15653 ;; Return value:  Size  Location     Type
 15654 ;;		None               void
 15655 ;; Registers used:
 15656 ;;		wreg, status,2, status,0, cstack
 15657 ;; Tracked objects:
 15658 ;;		On entry : 0/0
 15659 ;;		On exit  : 0/0
 15660 ;;		Unchanged: 0/0
 15661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15663 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15665 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15666 ;;Total ram usage:       11 bytes
 15667 ;; Hardware stack levels used:    1
 15668 ;; Hardware stack levels required when called:    6
 15669 ;; This function calls:
 15670 ;;		_setAddrWindow
 15671 ;;		_spiwrite
 15672 ;; This function is called by:
 15673 ;;		_fillRect
 15674 ;;		_fillCircleHelper
 15675 ;;		_fillCircle
 15676 ;;		_drawRect
 15677 ;; This function uses a non-reentrant model
 15678 ;;
 15679                           
 15680                           	psect	text88
 15681  002C74                     __ptext88:
 15682                           	opt stack 0
 15683  002C74                     _drawFastVLine:
 15684                           	opt stack 20
 15685                           
 15686                           ;incstack = 0
 15687                           ;drawFastVLine@x stored from wreg
 15688  002C74  6E22               	movwf	drawFastVLine@x,c
 15689                           
 15690                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 15691                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 15692  002C76  0E80               	movlw	128
 15693  002C78  6022               	cpfslt	drawFastVLine@x,c
 15694  002C7A  D03F               	goto	l749
 15695  002C7C  0E9F               	movlw	159
 15696  002C7E  6418               	cpfsgt	drawFastVLine@y,c
 15697  002C80  D001               	goto	l7879
 15698                           
 15699                           ;ST7735_TFT.c: 420: return;
 15700  002C82  D03B               	goto	l749
 15701  002C84                     l7879:
 15702                           
 15703                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 15704  002C84  0EFF               	movlw	255
 15705  002C86  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15706  002C88  0EFF               	movlw	255
 15707  002C8A  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 15708  002C8C  5019               	movf	drawFastVLine@h,w,c
 15709  002C8E  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 15710  002C92  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 15711  002C94  261E               	addwf	??_drawFastVLine+2,f,c
 15712  002C96  0E00               	movlw	0
 15713  002C98  221F               	addwfc	??_drawFastVLine+3,f,c
 15714  002C9A  501C               	movf	??_drawFastVLine,w,c
 15715  002C9C  261E               	addwf	??_drawFastVLine+2,f,c
 15716  002C9E  501D               	movf	??_drawFastVLine+1,w,c
 15717  002CA0  221F               	addwfc	??_drawFastVLine+3,f,c
 15718  002CA2  BE1F               	btfsc	??_drawFastVLine+3,7,c
 15719  002CA4  D00B               	goto	l7883
 15720  002CA6  501F               	movf	??_drawFastVLine+3,w,c
 15721  002CA8  E104               	bnz	u5460
 15722  002CAA  0EA0               	movlw	160
 15723  002CAC  5C1E               	subwf	??_drawFastVLine+2,w,c
 15724  002CAE  A0D8               	btfss	status,0,c
 15725  002CB0  D005               	goto	l7883
 15726  002CB2                     u5460:
 15727                           
 15728                           ;ST7735_TFT.c: 422: h = 160 - y;
 15729  002CB2  5018               	movf	drawFastVLine@y,w,c
 15730  002CB4  0800               	sublw	0
 15731  002CB6  0FA0               	addlw	160
 15732  002CB8  6E19               	movwf	drawFastVLine@h,c
 15733  002CBA  D000               	goto	l7883
 15734  002CBC                     l7883:
 15735                           
 15736                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 15737  002CBC  501B               	movf	drawFastVLine@color+1,w,c
 15738  002CBE  6E20               	movwf	drawFastVLine@hi,c
 15739  002CC0  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 15740                           
 15741                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 15742  002CC4  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 15743  002CC8  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 15744  002CCC  5018               	movf	drawFastVLine@y,w,c
 15745  002CCE  2419               	addwf	drawFastVLine@h,w,c
 15746  002CD0  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15747  002CD2  041C               	decf	??_drawFastVLine,w,c
 15748  002CD4  6E16               	movwf	setAddrWindow@y1,c
 15749  002CD6  5022               	movf	drawFastVLine@x,w,c
 15750  002CD8  ECE8  F019         	call	_setAddrWindow
 15751                           
 15752                           ;ST7735_TFT.c: 425: PORTDbits.RD3 = 1;
 15753  002CDC  8683               	bsf	3971,3,c	;volatile
 15754                           
 15755                           ;ST7735_TFT.c: 426: PORTDbits.RD4 = 0;
 15756  002CDE  9883               	bcf	3971,4,c	;volatile
 15757                           
 15758                           ;ST7735_TFT.c: 428: while (h--) {
 15759  002CE0  D007               	goto	l7895
 15760  002CE2                     l7893:
 15761                           
 15762                           ;ST7735_TFT.c: 429: spiwrite(hi);
 15763  002CE2  5020               	movf	drawFastVLine@hi,w,c
 15764  002CE4  ECA0  F01D         	call	_spiwrite
 15765                           
 15766                           ;ST7735_TFT.c: 430: spiwrite(lo);
 15767  002CE8  5021               	movf	drawFastVLine@lo,w,c
 15768  002CEA  ECA0  F01D         	call	_spiwrite
 15769  002CEE  D000               	goto	l7895
 15770  002CF0                     l7895:
 15771  002CF0  0619               	decf	drawFastVLine@h,f,c
 15772  002CF2  2819               	incf	drawFastVLine@h,w,c
 15773  002CF4  A4D8               	btfss	status,2,c
 15774  002CF6  D7F5               	goto	l7893
 15775                           
 15776                           ;ST7735_TFT.c: 431: }
 15777                           ;ST7735_TFT.c: 432: PORTDbits.RD4 = 1;
 15778  002CF8  8883               	bsf	3971,4,c	;volatile
 15779  002CFA                     l749:
 15780  002CFA  0012               	return		;funcret
 15781  002CFC                     __end_of_drawFastVLine:
 15782                           	opt stack 0
 15783                           tblptru	equ	0xFF8
 15784                           tblptrh	equ	0xFF7
 15785                           tblptrl	equ	0xFF6
 15786                           tablat	equ	0xFF5
 15787                           prodh	equ	0xFF4
 15788                           prodl	equ	0xFF3
 15789                           intcon	equ	0xFF2
 15790                           intcon2	equ	0xFF1
 15791                           postinc0	equ	0xFEE
 15792                           wreg	equ	0xFE8
 15793                           postdec1	equ	0xFE5
 15794                           fsr1l	equ	0xFE1
 15795                           indf2	equ	0xFDF
 15796                           postinc2	equ	0xFDE
 15797                           postdec2	equ	0xFDD
 15798                           fsr2h	equ	0xFDA
 15799                           fsr2l	equ	0xFD9
 15800                           status	equ	0xFD8
 15801                           
 15802 ;; *************** function _drawPixel *****************
 15803 ;; Defined at:
 15804 ;;		line 407 in file "ST7735_TFT.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;  x               1    wreg     unsigned char 
 15807 ;;  y               1   23[COMRAM] unsigned char 
 15808 ;;  color           2   24[COMRAM] unsigned int 
 15809 ;; Auto vars:     Size  Location     Type
 15810 ;;  x               1   26[COMRAM] unsigned char 
 15811 ;; Return value:  Size  Location     Type
 15812 ;;		None               void
 15813 ;; Registers used:
 15814 ;;		wreg, status,2, status,0, cstack
 15815 ;; Tracked objects:
 15816 ;;		On entry : 0/0
 15817 ;;		On exit  : 0/0
 15818 ;;		Unchanged: 0/0
 15819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15820 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15824 ;;Total ram usage:        4 bytes
 15825 ;; Hardware stack levels used:    1
 15826 ;; Hardware stack levels required when called:    6
 15827 ;; This function calls:
 15828 ;;		_setAddrWindow
 15829 ;;		_write_data
 15830 ;; This function is called by:
 15831 ;;		_drawChar
 15832 ;;		_drawCircle
 15833 ;;		_drawCircleHelper
 15834 ;; This function uses a non-reentrant model
 15835 ;;
 15836                           
 15837                           	psect	text89
 15838  00384A                     __ptext89:
 15839                           	opt stack 0
 15840  00384A                     _drawPixel:
 15841                           	opt stack 21
 15842                           
 15843                           ;incstack = 0
 15844                           ;drawPixel@x stored from wreg
 15845  00384A  6E1B               	movwf	drawPixel@x,c
 15846                           
 15847                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 15848  00384C  0E80               	movlw	128
 15849  00384E  601B               	cpfslt	drawPixel@x,c
 15850  003850  D013               	goto	l743
 15851  003852  0E9F               	movlw	159
 15852  003854  6418               	cpfsgt	drawPixel@y,c
 15853  003856  D001               	goto	l7933
 15854                           
 15855                           ;ST7735_TFT.c: 410: return;
 15856  003858  D00F               	goto	l743
 15857  00385A                     l7933:
 15858                           
 15859                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 15860  00385A  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 15861  00385E  281B               	incf	drawPixel@x,w,c
 15862  003860  6E15               	movwf	setAddrWindow@x1,c
 15863  003862  2818               	incf	drawPixel@y,w,c
 15864  003864  6E16               	movwf	setAddrWindow@y1,c
 15865  003866  501B               	movf	drawPixel@x,w,c
 15866  003868  ECE8  F019         	call	_setAddrWindow
 15867                           
 15868                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 15869  00386C  501A               	movf	drawPixel@color+1,w,c
 15870  00386E  EC1C  F01E         	call	_write_data
 15871                           
 15872                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 15873  003872  5019               	movf	drawPixel@color,w,c
 15874  003874  EC1C  F01E         	call	_write_data
 15875  003878                     l743:
 15876  003878  0012               	return		;funcret
 15877  00387A                     __end_of_drawPixel:
 15878                           	opt stack 0
 15879                           tblptru	equ	0xFF8
 15880                           tblptrh	equ	0xFF7
 15881                           tblptrl	equ	0xFF6
 15882                           tablat	equ	0xFF5
 15883                           prodh	equ	0xFF4
 15884                           prodl	equ	0xFF3
 15885                           intcon	equ	0xFF2
 15886                           intcon2	equ	0xFF1
 15887                           postinc0	equ	0xFEE
 15888                           wreg	equ	0xFE8
 15889                           postdec1	equ	0xFE5
 15890                           fsr1l	equ	0xFE1
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function _setAddrWindow *****************
 15899 ;; Defined at:
 15900 ;;		line 392 in file "ST7735_TFT.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;  x0              1    wreg     unsigned char 
 15903 ;;  y0              1   19[COMRAM] unsigned char 
 15904 ;;  x1              1   20[COMRAM] unsigned char 
 15905 ;;  y1              1   21[COMRAM] unsigned char 
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;  x0              1   22[COMRAM] unsigned char 
 15908 ;; Return value:  Size  Location     Type
 15909 ;;		None               void
 15910 ;; Registers used:
 15911 ;;		wreg, status,2, status,0, cstack
 15912 ;; Tracked objects:
 15913 ;;		On entry : 0/0
 15914 ;;		On exit  : 0/0
 15915 ;;		Unchanged: 0/0
 15916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15917 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15921 ;;Total ram usage:        4 bytes
 15922 ;; Hardware stack levels used:    1
 15923 ;; Hardware stack levels required when called:    5
 15924 ;; This function calls:
 15925 ;;		_write_command
 15926 ;;		_write_data
 15927 ;; This function is called by:
 15928 ;;		_drawPixel
 15929 ;;		_drawFastVLine
 15930 ;;		_fillRectangle
 15931 ;;		_drawFastHLine
 15932 ;; This function uses a non-reentrant model
 15933 ;;
 15934                           
 15935                           	psect	text90
 15936  0033D0                     __ptext90:
 15937                           	opt stack 0
 15938  0033D0                     _setAddrWindow:
 15939                           	opt stack 20
 15940                           
 15941                           ;incstack = 0
 15942                           ;setAddrWindow@x0 stored from wreg
 15943  0033D0  6E17               	movwf	setAddrWindow@x0,c
 15944                           
 15945                           ;ST7735_TFT.c: 394: write_command(0x2A);
 15946  0033D2  0E2A               	movlw	42
 15947  0033D4  EC24  F01E         	call	_write_command
 15948                           
 15949                           ;ST7735_TFT.c: 395: write_data(0);
 15950  0033D8  0E00               	movlw	0
 15951  0033DA  EC1C  F01E         	call	_write_data
 15952                           
 15953                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 15954  0033DE  5017               	movf	setAddrWindow@x0,w,c
 15955  0033E0  245A               	addwf	_colstart,w,c
 15956  0033E2  EC1C  F01E         	call	_write_data
 15957                           
 15958                           ;ST7735_TFT.c: 397: write_data(0);
 15959  0033E6  0E00               	movlw	0
 15960  0033E8  EC1C  F01E         	call	_write_data
 15961                           
 15962                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 15963  0033EC  5015               	movf	setAddrWindow@x1,w,c
 15964  0033EE  245A               	addwf	_colstart,w,c
 15965  0033F0  EC1C  F01E         	call	_write_data
 15966                           
 15967                           ;ST7735_TFT.c: 399: write_command(0x2B);
 15968  0033F4  0E2B               	movlw	43
 15969  0033F6  EC24  F01E         	call	_write_command
 15970                           
 15971                           ;ST7735_TFT.c: 400: write_data(0);
 15972  0033FA  0E00               	movlw	0
 15973  0033FC  EC1C  F01E         	call	_write_data
 15974                           
 15975                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 15976  003400  5014               	movf	setAddrWindow@y0,w,c
 15977  003402  2462               	addwf	_rowstart,w,c
 15978  003404  EC1C  F01E         	call	_write_data
 15979                           
 15980                           ;ST7735_TFT.c: 402: write_data(0);
 15981  003408  0E00               	movlw	0
 15982  00340A  EC1C  F01E         	call	_write_data
 15983                           
 15984                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 15985  00340E  5016               	movf	setAddrWindow@y1,w,c
 15986  003410  2462               	addwf	_rowstart,w,c
 15987  003412  EC1C  F01E         	call	_write_data
 15988                           
 15989                           ;ST7735_TFT.c: 404: write_command(0x2C);
 15990  003416  0E2C               	movlw	44
 15991  003418  EC24  F01E         	call	_write_command
 15992  00341C  0012               	return		;funcret
 15993  00341E                     __end_of_setAddrWindow:
 15994                           	opt stack 0
 15995                           tblptru	equ	0xFF8
 15996                           tblptrh	equ	0xFF7
 15997                           tblptrl	equ	0xFF6
 15998                           tablat	equ	0xFF5
 15999                           prodh	equ	0xFF4
 16000                           prodl	equ	0xFF3
 16001                           intcon	equ	0xFF2
 16002                           intcon2	equ	0xFF1
 16003                           postinc0	equ	0xFEE
 16004                           wreg	equ	0xFE8
 16005                           postdec1	equ	0xFE5
 16006                           fsr1l	equ	0xFE1
 16007                           indf2	equ	0xFDF
 16008                           postinc2	equ	0xFDE
 16009                           postdec2	equ	0xFDD
 16010                           fsr2h	equ	0xFDA
 16011                           fsr2l	equ	0xFD9
 16012                           status	equ	0xFD8
 16013                           
 16014 ;; *************** function _write_data *****************
 16015 ;; Defined at:
 16016 ;;		line 209 in file "ST7735_TFT.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  data_           1    wreg     unsigned char 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;  data_           1   18[COMRAM] unsigned char 
 16021 ;; Return value:  Size  Location     Type
 16022 ;;		None               void
 16023 ;; Registers used:
 16024 ;;		wreg, status,2, cstack
 16025 ;; Tracked objects:
 16026 ;;		On entry : 0/0
 16027 ;;		On exit  : 0/0
 16028 ;;		Unchanged: 0/0
 16029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16034 ;;Total ram usage:        1 bytes
 16035 ;; Hardware stack levels used:    1
 16036 ;; Hardware stack levels required when called:    4
 16037 ;; This function calls:
 16038 ;;		_spiwrite
 16039 ;; This function is called by:
 16040 ;;		_Rcmd1
 16041 ;;		_Rcmd2red
 16042 ;;		_Rcmd3
 16043 ;;		_setAddrWindow
 16044 ;;		_drawPixel
 16045 ;;		_TFT_GreenTab_Initialize
 16046 ;;		_Bcmd
 16047 ;;		_setScrollDefinition
 16048 ;;		_Rcmd2green
 16049 ;;		_VerticalScroll
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           	psect	text91
 16054  003C38                     __ptext91:
 16055                           	opt stack 0
 16056  003C38                     _write_data:
 16057                           	opt stack 20
 16058                           
 16059                           ;incstack = 0
 16060                           ;write_data@data_ stored from wreg
 16061  003C38  6E13               	movwf	write_data@data_,c
 16062                           
 16063                           ;ST7735_TFT.c: 211: PORTDbits.RD4 = 0;
 16064  003C3A  9883               	bcf	3971,4,c	;volatile
 16065                           
 16066                           ;ST7735_TFT.c: 212: PORTDbits.RD3 = 1;
 16067  003C3C  8683               	bsf	3971,3,c	;volatile
 16068                           
 16069                           ;ST7735_TFT.c: 213: spiwrite(data_);
 16070  003C3E  5013               	movf	write_data@data_,w,c
 16071  003C40  ECA0  F01D         	call	_spiwrite
 16072                           
 16073                           ;ST7735_TFT.c: 214: PORTDbits.RD4 = 1;
 16074  003C44  8883               	bsf	3971,4,c	;volatile
 16075  003C46  0012               	return		;funcret
 16076  003C48                     __end_of_write_data:
 16077                           	opt stack 0
 16078                           tblptru	equ	0xFF8
 16079                           tblptrh	equ	0xFF7
 16080                           tblptrl	equ	0xFF6
 16081                           tablat	equ	0xFF5
 16082                           prodh	equ	0xFF4
 16083                           prodl	equ	0xFF3
 16084                           intcon	equ	0xFF2
 16085                           intcon2	equ	0xFF1
 16086                           postinc0	equ	0xFEE
 16087                           wreg	equ	0xFE8
 16088                           postdec1	equ	0xFE5
 16089                           fsr1l	equ	0xFE1
 16090                           indf2	equ	0xFDF
 16091                           postinc2	equ	0xFDE
 16092                           postdec2	equ	0xFDD
 16093                           fsr2h	equ	0xFDA
 16094                           fsr2l	equ	0xFD9
 16095                           status	equ	0xFD8
 16096                           
 16097 ;; *************** function _write_command *****************
 16098 ;; Defined at:
 16099 ;;		line 198 in file "ST7735_TFT.c"
 16100 ;; Parameters:    Size  Location     Type
 16101 ;;  cmd_            1    wreg     unsigned char 
 16102 ;; Auto vars:     Size  Location     Type
 16103 ;;  cmd_            1   18[COMRAM] unsigned char 
 16104 ;; Return value:  Size  Location     Type
 16105 ;;		None               void
 16106 ;; Registers used:
 16107 ;;		wreg, status,2, cstack
 16108 ;; Tracked objects:
 16109 ;;		On entry : 0/0
 16110 ;;		On exit  : 0/0
 16111 ;;		Unchanged: 0/0
 16112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16117 ;;Total ram usage:        1 bytes
 16118 ;; Hardware stack levels used:    1
 16119 ;; Hardware stack levels required when called:    4
 16120 ;; This function calls:
 16121 ;;		_spiwrite
 16122 ;; This function is called by:
 16123 ;;		_Rcmd1
 16124 ;;		_Rcmd2red
 16125 ;;		_Rcmd3
 16126 ;;		_setAddrWindow
 16127 ;;		_TFT_GreenTab_Initialize
 16128 ;;		_Bcmd
 16129 ;;		_setScrollDefinition
 16130 ;;		_Rcmd2green
 16131 ;;		_VerticalScroll
 16132 ;; This function uses a non-reentrant model
 16133 ;;
 16134                           
 16135                           	psect	text92
 16136  003C48                     __ptext92:
 16137                           	opt stack 0
 16138  003C48                     _write_command:
 16139                           	opt stack 20
 16140                           
 16141                           ;incstack = 0
 16142                           ;write_command@cmd_ stored from wreg
 16143  003C48  6E13               	movwf	write_command@cmd_,c
 16144                           
 16145                           ;ST7735_TFT.c: 200: PORTDbits.RD4 = 0;
 16146  003C4A  9883               	bcf	3971,4,c	;volatile
 16147                           
 16148                           ;ST7735_TFT.c: 202: PORTDbits.RD3 = 0;
 16149  003C4C  9683               	bcf	3971,3,c	;volatile
 16150                           
 16151                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 16152  003C4E  5013               	movf	write_command@cmd_,w,c
 16153  003C50  ECA0  F01D         	call	_spiwrite
 16154                           
 16155                           ;ST7735_TFT.c: 205: PORTDbits.RD4 = 1;
 16156  003C54  8883               	bsf	3971,4,c	;volatile
 16157  003C56  0012               	return		;funcret
 16158  003C58                     __end_of_write_command:
 16159                           	opt stack 0
 16160                           tblptru	equ	0xFF8
 16161                           tblptrh	equ	0xFF7
 16162                           tblptrl	equ	0xFF6
 16163                           tablat	equ	0xFF5
 16164                           prodh	equ	0xFF4
 16165                           prodl	equ	0xFF3
 16166                           intcon	equ	0xFF2
 16167                           intcon2	equ	0xFF1
 16168                           postinc0	equ	0xFEE
 16169                           wreg	equ	0xFE8
 16170                           postdec1	equ	0xFE5
 16171                           fsr1l	equ	0xFE1
 16172                           indf2	equ	0xFDF
 16173                           postinc2	equ	0xFDE
 16174                           postdec2	equ	0xFDD
 16175                           fsr2h	equ	0xFDA
 16176                           fsr2l	equ	0xFD9
 16177                           status	equ	0xFD8
 16178                           
 16179 ;; *************** function _spiwrite *****************
 16180 ;; Defined at:
 16181 ;;		line 189 in file "ST7735_TFT.c"
 16182 ;; Parameters:    Size  Location     Type
 16183 ;;  spidata         1    wreg     unsigned char 
 16184 ;; Auto vars:     Size  Location     Type
 16185 ;;  spidata         1   17[COMRAM] unsigned char 
 16186 ;;  x               1   16[COMRAM] unsigned char 
 16187 ;; Return value:  Size  Location     Type
 16188 ;;		None               void
 16189 ;; Registers used:
 16190 ;;		wreg
 16191 ;; Tracked objects:
 16192 ;;		On entry : 0/0
 16193 ;;		On exit  : 0/0
 16194 ;;		Unchanged: 0/0
 16195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16200 ;;Total ram usage:        2 bytes
 16201 ;; Hardware stack levels used:    1
 16202 ;; Hardware stack levels required when called:    3
 16203 ;; This function calls:
 16204 ;;		Nothing
 16205 ;; This function is called by:
 16206 ;;		_write_command
 16207 ;;		_write_data
 16208 ;;		_drawFastVLine
 16209 ;;		_fillRectangle
 16210 ;;		_drawFastHLine
 16211 ;; This function uses a non-reentrant model
 16212 ;;
 16213                           
 16214                           	psect	text93
 16215  003B40                     __ptext93:
 16216                           	opt stack 0
 16217  003B40                     _spiwrite:
 16218                           	opt stack 22
 16219                           
 16220                           ;incstack = 0
 16221                           ;spiwrite@spidata stored from wreg
 16222  003B40  6E12               	movwf	spiwrite@spidata,c
 16223                           
 16224                           ;ST7735_TFT.c: 191: char x;
 16225                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 16226  003B42  969E               	bcf	3998,3,c	;volatile
 16227                           
 16228                           ;ST7735_TFT.c: 193: x = SSPBUF;
 16229  003B44  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 16230                           
 16231                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 16232  003B48  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 16233                           
 16234                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 16235  003B4C  D000               	goto	l699
 16236  003B4E                     l699:
 16237  003B4E  A0C7               	btfss	4039,0,c	;volatile
 16238  003B50  D7FE               	goto	l699
 16239  003B52  0012               	return		;funcret
 16240  003B54                     __end_of_spiwrite:
 16241                           	opt stack 0
 16242                           tblptru	equ	0xFF8
 16243                           tblptrh	equ	0xFF7
 16244                           tblptrl	equ	0xFF6
 16245                           tablat	equ	0xFF5
 16246                           prodh	equ	0xFF4
 16247                           prodl	equ	0xFF3
 16248                           intcon	equ	0xFF2
 16249                           intcon2	equ	0xFF1
 16250                           postinc0	equ	0xFEE
 16251                           wreg	equ	0xFE8
 16252                           postdec1	equ	0xFE5
 16253                           fsr1l	equ	0xFE1
 16254                           indf2	equ	0xFDF
 16255                           postinc2	equ	0xFDE
 16256                           postdec2	equ	0xFDD
 16257                           fsr2h	equ	0xFDA
 16258                           fsr2l	equ	0xFD9
 16259                           status	equ	0xFD8
 16260                           
 16261 ;; *************** function ___wmul *****************
 16262 ;; Defined at:
 16263 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;  multiplier      2   16[COMRAM] unsigned int 
 16266 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  product         2   20[COMRAM] unsigned int 
 16269 ;; Return value:  Size  Location     Type
 16270 ;;                  2   16[COMRAM] unsigned int 
 16271 ;; Registers used:
 16272 ;;		wreg, status,2, status,0, prodl, prodh
 16273 ;; Tracked objects:
 16274 ;;		On entry : 0/0
 16275 ;;		On exit  : 0/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16281 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;Total ram usage:        6 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:    3
 16285 ;; This function calls:
 16286 ;;		Nothing
 16287 ;; This function is called by:
 16288 ;;		_get_RPM
 16289 ;;		_main
 16290 ;;		_delay_ms
 16291 ;;		_drawChar
 16292 ;;		_read_volt
 16293 ;;		_printf
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           	psect	text94
 16298  0038FA                     __ptext94:
 16299                           	opt stack 0
 16300  0038FA                     ___wmul:
 16301                           	opt stack 26
 16302                           
 16303                           ;incstack = 0
 16304  0038FA  5011               	movf	___wmul@multiplier,w,c
 16305  0038FC  0213               	mulwf	___wmul@multiplicand,c
 16306  0038FE  CFF3 F015          	movff	prodl,___wmul@product
 16307  003902  CFF4 F016          	movff	prodh,___wmul@product+1
 16308  003906  5011               	movf	___wmul@multiplier,w,c
 16309  003908  0214               	mulwf	___wmul@multiplicand+1,c
 16310  00390A  50F3               	movf	prodl,w,c
 16311  00390C  2616               	addwf	___wmul@product+1,f,c
 16312  00390E  5012               	movf	___wmul@multiplier+1,w,c
 16313  003910  0213               	mulwf	___wmul@multiplicand,c
 16314  003912  50F3               	movf	prodl,w,c
 16315  003914  2616               	addwf	___wmul@product+1,f,c
 16316  003916  C015  F011         	movff	___wmul@product,?___wmul
 16317  00391A  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16318  00391E  D000               	goto	l1493
 16319  003920                     l1493:
 16320  003920  0012               	return		;funcret
 16321  003922                     __end_of___wmul:
 16322                           	opt stack 0
 16323                           tblptru	equ	0xFF8
 16324                           tblptrh	equ	0xFF7
 16325                           tblptrl	equ	0xFF6
 16326                           tablat	equ	0xFF5
 16327                           prodh	equ	0xFF4
 16328                           prodl	equ	0xFF3
 16329                           intcon	equ	0xFF2
 16330                           intcon2	equ	0xFF1
 16331                           postinc0	equ	0xFEE
 16332                           wreg	equ	0xFE8
 16333                           postdec1	equ	0xFE5
 16334                           fsr1l	equ	0xFE1
 16335                           indf2	equ	0xFDF
 16336                           postinc2	equ	0xFDE
 16337                           postdec2	equ	0xFDD
 16338                           fsr2h	equ	0xFDA
 16339                           fsr2l	equ	0xFD9
 16340                           status	equ	0xFD8
 16341                           
 16342 ;; *************** function ___awmod *****************
 16343 ;; Defined at:
 16344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16345 ;; Parameters:    Size  Location     Type
 16346 ;;  dividend        2   58[COMRAM] int 
 16347 ;;  divisor         2   60[COMRAM] int 
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;  sign            1   63[COMRAM] unsigned char 
 16350 ;;  counter         1   62[COMRAM] unsigned char 
 16351 ;; Return value:  Size  Location     Type
 16352 ;;                  2   58[COMRAM] int 
 16353 ;; Registers used:
 16354 ;;		wreg, status,2, status,0
 16355 ;; Tracked objects:
 16356 ;;		On entry : 0/0
 16357 ;;		On exit  : 0/0
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16364 ;;Total ram usage:        6 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; Hardware stack levels required when called:    3
 16367 ;; This function calls:
 16368 ;;		Nothing
 16369 ;; This function is called by:
 16370 ;;		_Update_Screen
 16371 ;;		_Update_Setup_Alarm_Time_Screen
 16372 ;;		_Update_Setup_Heater_Screen
 16373 ;;		_Update_Setup_Time_Screen
 16374 ;;		_dec_2_bcd
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           	psect	text95
 16379  002E04                     __ptext95:
 16380                           	opt stack 0
 16381  002E04                     ___awmod:
 16382                           	opt stack 26
 16383                           
 16384                           ;incstack = 0
 16385  002E04  0E00               	movlw	0
 16386  002E06  6E40               	movwf	___awmod@sign,c
 16387  002E08  AE3C               	btfss	___awmod@dividend+1,7,c
 16388  002E0A  D007               	goto	l8311
 16389  002E0C  6C3B               	negf	___awmod@dividend,c
 16390  002E0E  1E3C               	comf	___awmod@dividend+1,f,c
 16391  002E10  B0D8               	btfsc	status,0,c
 16392  002E12  2A3C               	incf	___awmod@dividend+1,f,c
 16393  002E14  0E01               	movlw	1
 16394  002E16  6E40               	movwf	___awmod@sign,c
 16395  002E18  D000               	goto	l8311
 16396  002E1A                     l8311:
 16397  002E1A  AE3E               	btfss	___awmod@divisor+1,7,c
 16398  002E1C  D005               	goto	l8315
 16399  002E1E  6C3D               	negf	___awmod@divisor,c
 16400  002E20  1E3E               	comf	___awmod@divisor+1,f,c
 16401  002E22  B0D8               	btfsc	status,0,c
 16402  002E24  2A3E               	incf	___awmod@divisor+1,f,c
 16403  002E26  D000               	goto	l8315
 16404  002E28                     l8315:
 16405  002E28  503D               	movf	___awmod@divisor,w,c
 16406  002E2A  103E               	iorwf	___awmod@divisor+1,w,c
 16407  002E2C  B4D8               	btfsc	status,2,c
 16408  002E2E  D01D               	goto	l8331
 16409  002E30  0E01               	movlw	1
 16410  002E32  6E3F               	movwf	___awmod@counter,c
 16411  002E34  D005               	goto	l8321
 16412  002E36                     l8319:
 16413  002E36  90D8               	bcf	status,0,c
 16414  002E38  363D               	rlcf	___awmod@divisor,f,c
 16415  002E3A  363E               	rlcf	___awmod@divisor+1,f,c
 16416  002E3C  2A3F               	incf	___awmod@counter,f,c
 16417  002E3E  D000               	goto	l8321
 16418  002E40                     l8321:
 16419  002E40  BE3E               	btfsc	___awmod@divisor+1,7,c
 16420  002E42  D002               	goto	l8323
 16421  002E44  D7F8               	goto	l8319
 16422  002E46  D000               	goto	l8323
 16423  002E48                     l8323:
 16424  002E48  503D               	movf	___awmod@divisor,w,c
 16425  002E4A  5C3B               	subwf	___awmod@dividend,w,c
 16426  002E4C  503E               	movf	___awmod@divisor+1,w,c
 16427  002E4E  583C               	subwfb	___awmod@dividend+1,w,c
 16428  002E50  A0D8               	btfss	status,0,c
 16429  002E52  D005               	goto	l8327
 16430  002E54  503D               	movf	___awmod@divisor,w,c
 16431  002E56  5E3B               	subwf	___awmod@dividend,f,c
 16432  002E58  503E               	movf	___awmod@divisor+1,w,c
 16433  002E5A  5A3C               	subwfb	___awmod@dividend+1,f,c
 16434  002E5C  D000               	goto	l8327
 16435  002E5E                     l8327:
 16436  002E5E  90D8               	bcf	status,0,c
 16437  002E60  323E               	rrcf	___awmod@divisor+1,f,c
 16438  002E62  323D               	rrcf	___awmod@divisor,f,c
 16439  002E64  2E3F               	decfsz	___awmod@counter,f,c
 16440  002E66  D7F0               	goto	l8323
 16441  002E68  D000               	goto	l8331
 16442  002E6A                     l8331:
 16443  002E6A  5040               	movf	___awmod@sign,w,c
 16444  002E6C  B4D8               	btfsc	status,2,c
 16445  002E6E  D005               	goto	l8335
 16446  002E70  6C3B               	negf	___awmod@dividend,c
 16447  002E72  1E3C               	comf	___awmod@dividend+1,f,c
 16448  002E74  B0D8               	btfsc	status,0,c
 16449  002E76  2A3C               	incf	___awmod@dividend+1,f,c
 16450  002E78  D000               	goto	l8335
 16451  002E7A                     l8335:
 16452  002E7A  C03B  F03B         	movff	___awmod@dividend,?___awmod
 16453  002E7E  C03C  F03C         	movff	___awmod@dividend+1,?___awmod+1
 16454  002E82  D000               	goto	l1699
 16455  002E84                     l1699:
 16456  002E84  0012               	return		;funcret
 16457  002E86                     __end_of___awmod:
 16458                           	opt stack 0
 16459                           tblptru	equ	0xFF8
 16460                           tblptrh	equ	0xFF7
 16461                           tblptrl	equ	0xFF6
 16462                           tablat	equ	0xFF5
 16463                           prodh	equ	0xFF4
 16464                           prodl	equ	0xFF3
 16465                           intcon	equ	0xFF2
 16466                           intcon2	equ	0xFF1
 16467                           postinc0	equ	0xFEE
 16468                           wreg	equ	0xFE8
 16469                           postdec1	equ	0xFE5
 16470                           fsr1l	equ	0xFE1
 16471                           indf2	equ	0xFDF
 16472                           postinc2	equ	0xFDE
 16473                           postdec2	equ	0xFDD
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function ___awdiv *****************
 16479 ;; Defined at:
 16480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  dividend        2   22[COMRAM] int 
 16483 ;;  divisor         2   24[COMRAM] int 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;  quotient        2   28[COMRAM] int 
 16486 ;;  sign            1   27[COMRAM] unsigned char 
 16487 ;;  counter         1   26[COMRAM] unsigned char 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  2   22[COMRAM] int 
 16490 ;; Registers used:
 16491 ;;		wreg, status,2, status,0
 16492 ;; Tracked objects:
 16493 ;;		On entry : 0/0
 16494 ;;		On exit  : 0/0
 16495 ;;		Unchanged: 0/0
 16496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;Total ram usage:        8 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; Hardware stack levels required when called:    3
 16504 ;; This function calls:
 16505 ;;		Nothing
 16506 ;; This function is called by:
 16507 ;;		_get_RPM
 16508 ;;		_main
 16509 ;;		_Update_Screen
 16510 ;;		_Update_Setup_Alarm_Time_Screen
 16511 ;;		_Update_Setup_Heater_Screen
 16512 ;;		_Update_Setup_Time_Screen
 16513 ;;		_dec_2_bcd
 16514 ;; This function uses a non-reentrant model
 16515 ;;
 16516                           
 16517                           	psect	text96
 16518  00299A                     __ptext96:
 16519                           	opt stack 0
 16520  00299A                     ___awdiv:
 16521                           	opt stack 26
 16522                           
 16523                           ;incstack = 0
 16524  00299A  0E00               	movlw	0
 16525  00299C  6E1C               	movwf	___awdiv@sign,c
 16526  00299E  AE1A               	btfss	___awdiv@divisor+1,7,c
 16527  0029A0  D007               	goto	l8267
 16528  0029A2  6C19               	negf	___awdiv@divisor,c
 16529  0029A4  1E1A               	comf	___awdiv@divisor+1,f,c
 16530  0029A6  B0D8               	btfsc	status,0,c
 16531  0029A8  2A1A               	incf	___awdiv@divisor+1,f,c
 16532  0029AA  0E01               	movlw	1
 16533  0029AC  6E1C               	movwf	___awdiv@sign,c
 16534  0029AE  D000               	goto	l8267
 16535  0029B0                     l8267:
 16536  0029B0  AE18               	btfss	___awdiv@dividend+1,7,c
 16537  0029B2  D007               	goto	l8273
 16538  0029B4  6C17               	negf	___awdiv@dividend,c
 16539  0029B6  1E18               	comf	___awdiv@dividend+1,f,c
 16540  0029B8  B0D8               	btfsc	status,0,c
 16541  0029BA  2A18               	incf	___awdiv@dividend+1,f,c
 16542  0029BC  0E01               	movlw	1
 16543  0029BE  1A1C               	xorwf	___awdiv@sign,f,c
 16544  0029C0  D000               	goto	l8273
 16545  0029C2                     l8273:
 16546  0029C2  0E00               	movlw	0
 16547  0029C4  6E1E               	movwf	___awdiv@quotient+1,c
 16548  0029C6  0E00               	movlw	0
 16549  0029C8  6E1D               	movwf	___awdiv@quotient,c
 16550  0029CA  5019               	movf	___awdiv@divisor,w,c
 16551  0029CC  101A               	iorwf	___awdiv@divisor+1,w,c
 16552  0029CE  B4D8               	btfsc	status,2,c
 16553  0029D0  D021               	goto	l8295
 16554  0029D2  0E01               	movlw	1
 16555  0029D4  6E1B               	movwf	___awdiv@counter,c
 16556  0029D6  D005               	goto	l8281
 16557  0029D8                     l8279:
 16558  0029D8  90D8               	bcf	status,0,c
 16559  0029DA  3619               	rlcf	___awdiv@divisor,f,c
 16560  0029DC  361A               	rlcf	___awdiv@divisor+1,f,c
 16561  0029DE  2A1B               	incf	___awdiv@counter,f,c
 16562  0029E0  D000               	goto	l8281
 16563  0029E2                     l8281:
 16564  0029E2  BE1A               	btfsc	___awdiv@divisor+1,7,c
 16565  0029E4  D002               	goto	l8283
 16566  0029E6  D7F8               	goto	l8279
 16567  0029E8  D000               	goto	l8283
 16568  0029EA                     l8283:
 16569  0029EA  90D8               	bcf	status,0,c
 16570  0029EC  361D               	rlcf	___awdiv@quotient,f,c
 16571  0029EE  361E               	rlcf	___awdiv@quotient+1,f,c
 16572  0029F0  5019               	movf	___awdiv@divisor,w,c
 16573  0029F2  5C17               	subwf	___awdiv@dividend,w,c
 16574  0029F4  501A               	movf	___awdiv@divisor+1,w,c
 16575  0029F6  5818               	subwfb	___awdiv@dividend+1,w,c
 16576  0029F8  A0D8               	btfss	status,0,c
 16577  0029FA  D006               	goto	l8291
 16578  0029FC  5019               	movf	___awdiv@divisor,w,c
 16579  0029FE  5E17               	subwf	___awdiv@dividend,f,c
 16580  002A00  501A               	movf	___awdiv@divisor+1,w,c
 16581  002A02  5A18               	subwfb	___awdiv@dividend+1,f,c
 16582  002A04  801D               	bsf	___awdiv@quotient,0,c
 16583  002A06  D000               	goto	l8291
 16584  002A08                     l8291:
 16585  002A08  90D8               	bcf	status,0,c
 16586  002A0A  321A               	rrcf	___awdiv@divisor+1,f,c
 16587  002A0C  3219               	rrcf	___awdiv@divisor,f,c
 16588  002A0E  2E1B               	decfsz	___awdiv@counter,f,c
 16589  002A10  D7EC               	goto	l8283
 16590  002A12  D000               	goto	l8295
 16591  002A14                     l8295:
 16592  002A14  501C               	movf	___awdiv@sign,w,c
 16593  002A16  B4D8               	btfsc	status,2,c
 16594  002A18  D005               	goto	l8299
 16595  002A1A  6C1D               	negf	___awdiv@quotient,c
 16596  002A1C  1E1E               	comf	___awdiv@quotient+1,f,c
 16597  002A1E  B0D8               	btfsc	status,0,c
 16598  002A20  2A1E               	incf	___awdiv@quotient+1,f,c
 16599  002A22  D000               	goto	l8299
 16600  002A24                     l8299:
 16601  002A24  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 16602  002A28  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 16603  002A2C  D000               	goto	l1686
 16604  002A2E                     l1686:
 16605  002A2E  0012               	return		;funcret
 16606  002A30                     __end_of___awdiv:
 16607                           	opt stack 0
 16608                           tblptru	equ	0xFF8
 16609                           tblptrh	equ	0xFF7
 16610                           tblptrl	equ	0xFF6
 16611                           tablat	equ	0xFF5
 16612                           prodh	equ	0xFF4
 16613                           prodl	equ	0xFF3
 16614                           intcon	equ	0xFF2
 16615                           intcon2	equ	0xFF1
 16616                           postinc0	equ	0xFEE
 16617                           wreg	equ	0xFE8
 16618                           postdec1	equ	0xFE5
 16619                           fsr1l	equ	0xFE1
 16620                           indf2	equ	0xFDF
 16621                           postinc2	equ	0xFDE
 16622                           postdec2	equ	0xFDD
 16623                           fsr2h	equ	0xFDA
 16624                           fsr2l	equ	0xFD9
 16625                           status	equ	0xFD8
 16626                           
 16627 ;; *************** function _Do_Init *****************
 16628 ;; Defined at:
 16629 ;;		line 98 in file "Main.c"
 16630 ;; Parameters:    Size  Location     Type
 16631 ;;		None
 16632 ;; Auto vars:     Size  Location     Type
 16633 ;;		None
 16634 ;; Return value:  Size  Location     Type
 16635 ;;		None               void
 16636 ;; Registers used:
 16637 ;;		wreg, status,2, status,0, cstack
 16638 ;; Tracked objects:
 16639 ;;		On entry : 0/0
 16640 ;;		On exit  : 0/0
 16641 ;;		Unchanged: 0/0
 16642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;Total ram usage:        0 bytes
 16648 ;; Hardware stack levels used:    1
 16649 ;; Hardware stack levels required when called:    7
 16650 ;; This function calls:
 16651 ;;		_DS1621_Init
 16652 ;;		_I2C_Init
 16653 ;;		_Init_ADC
 16654 ;;		_Init_Interrupt
 16655 ;;		_Turn_Off_Fan
 16656 ;;		_init_UART
 16657 ;; This function is called by:
 16658 ;;		_main
 16659 ;; This function uses a non-reentrant model
 16660 ;;
 16661                           
 16662                           	psect	text97
 16663  003234                     __ptext97:
 16664                           	opt stack 0
 16665  003234                     _Do_Init:
 16666                           	opt stack 23
 16667                           
 16668                           ;Main.c: 100: Turn_Off_Fan();
 16669                           
 16670                           ;incstack = 0
 16671  003234  EC54  F01E         	call	_Turn_Off_Fan	;wreg free
 16672                           
 16673                           ;Main.c: 101: init_UART();
 16674  003238  ECAA  F01D         	call	_init_UART	;wreg free
 16675                           
 16676                           ;Main.c: 102: Init_ADC();
 16677  00323C  EC41  F01E         	call	_Init_ADC	;wreg free
 16678                           
 16679                           ;Main.c: 103: OSCCON=0x70;
 16680  003240  0E70               	movlw	112
 16681  003242  6ED3               	movwf	4051,c	;volatile
 16682                           
 16683                           ;Main.c: 105: TRISA = 0x11;
 16684  003244  0E11               	movlw	17
 16685  003246  6E92               	movwf	3986,c	;volatile
 16686                           
 16687                           ;Main.c: 106: TRISB = 0x07;
 16688  003248  0E07               	movlw	7
 16689  00324A  6E93               	movwf	3987,c	;volatile
 16690                           
 16691                           ;Main.c: 107: TRISC = 0x01;
 16692  00324C  0E01               	movlw	1
 16693  00324E  6E94               	movwf	3988,c	;volatile
 16694                           
 16695                           ;Main.c: 108: TRISD = 0x00;
 16696  003250  0E00               	movlw	0
 16697  003252  6E95               	movwf	3989,c	;volatile
 16698                           
 16699                           ;Main.c: 109: TRISE = 0x00;
 16700  003254  0E00               	movlw	0
 16701  003256  6E96               	movwf	3990,c	;volatile
 16702                           
 16703                           ;Main.c: 110: PORTE = 0x00;
 16704  003258  0E00               	movlw	0
 16705  00325A  6E84               	movwf	3972,c	;volatile
 16706                           
 16707                           ;Main.c: 112: HEATER = 0;
 16708  00325C  0E00               	movlw	0
 16709  00325E  6E4E               	movwf	_HEATER,c
 16710                           
 16711                           ;Main.c: 113: RBPU=0;
 16712  003260  9EF1               	bcf	intcon2,7,c	;volatile
 16713                           
 16714                           ;Main.c: 115: TMR3L = 0x00;
 16715  003262  0E00               	movlw	0
 16716  003264  6EB2               	movwf	4018,c	;volatile
 16717                           
 16718                           ;Main.c: 116: T3CON = 0x03;
 16719  003266  0E03               	movlw	3
 16720  003268  6EB1               	movwf	4017,c	;volatile
 16721                           
 16722                           ;Main.c: 117: I2C_Init(100000);
 16723  00326A  0EA0               	movlw	160
 16724  00326C  6E11               	movwf	I2C_Init@c,c
 16725  00326E  0E86               	movlw	134
 16726  003270  6E12               	movwf	I2C_Init@c+1,c
 16727  003272  0E01               	movlw	1
 16728  003274  6E13               	movwf	I2C_Init@c+2,c
 16729  003276  0E00               	movlw	0
 16730  003278  6E14               	movwf	I2C_Init@c+3,c
 16731  00327A  EC59  F01E         	call	_I2C_Init	;wreg free
 16732                           
 16733                           ;Main.c: 119: DS1621_Init();
 16734  00327E  EC07  F01D         	call	_DS1621_Init	;wreg free
 16735                           
 16736                           ;Main.c: 120: Init_Interrupt();
 16737  003282  ECEA  F01A         	call	_Init_Interrupt	;wreg free
 16738                           
 16739                           ;Main.c: 121: heater_set_temp = 75;
 16740  003286  0E4B               	movlw	75
 16741  003288  6E6F               	movwf	_heater_set_temp,c
 16742  00328A  0012               	return		;funcret
 16743  00328C                     __end_of_Do_Init:
 16744                           	opt stack 0
 16745                           tblptru	equ	0xFF8
 16746                           tblptrh	equ	0xFF7
 16747                           tblptrl	equ	0xFF6
 16748                           tablat	equ	0xFF5
 16749                           prodh	equ	0xFF4
 16750                           prodl	equ	0xFF3
 16751                           intcon	equ	0xFF2
 16752                           intcon2	equ	0xFF1
 16753                           postinc0	equ	0xFEE
 16754                           wreg	equ	0xFE8
 16755                           postdec1	equ	0xFE5
 16756                           fsr1l	equ	0xFE1
 16757                           indf2	equ	0xFDF
 16758                           postinc2	equ	0xFDE
 16759                           postdec2	equ	0xFDD
 16760                           fsr2h	equ	0xFDA
 16761                           fsr2l	equ	0xFD9
 16762                           status	equ	0xFD8
 16763                           
 16764 ;; *************** function _init_UART *****************
 16765 ;; Defined at:
 16766 ;;		line 83 in file "Main.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;		None
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;		None
 16771 ;; Return value:  Size  Location     Type
 16772 ;;		None               void
 16773 ;; Registers used:
 16774 ;;		wreg, status,2, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16784 ;;Total ram usage:        0 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    4
 16787 ;; This function calls:
 16788 ;;		_OpenUSART
 16789 ;; This function is called by:
 16790 ;;		_Do_Init
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           	psect	text98
 16795  003B54                     __ptext98:
 16796                           	opt stack 0
 16797  003B54                     _init_UART:
 16798                           	opt stack 25
 16799                           
 16800                           ;Main.c: 84: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111, 25);
 16801                           
 16802                           ;incstack = 0
 16803  003B54  0E00               	movlw	0
 16804  003B56  6E12               	movwf	OpenUSART@spbrg+1,c
 16805  003B58  0E19               	movlw	25
 16806  003B5A  6E11               	movwf	OpenUSART@spbrg,c
 16807  003B5C  0E3C               	movlw	60
 16808  003B5E  ECB6  F017         	call	_OpenUSART
 16809                           
 16810                           ;Main.c: 85: OSCCON = 0x70;
 16811  003B62  0E70               	movlw	112
 16812  003B64  6ED3               	movwf	4051,c	;volatile
 16813  003B66  0012               	return		;funcret
 16814  003B68                     __end_of_init_UART:
 16815                           	opt stack 0
 16816                           tblptru	equ	0xFF8
 16817                           tblptrh	equ	0xFF7
 16818                           tblptrl	equ	0xFF6
 16819                           tablat	equ	0xFF5
 16820                           prodh	equ	0xFF4
 16821                           prodl	equ	0xFF3
 16822                           intcon	equ	0xFF2
 16823                           intcon2	equ	0xFF1
 16824                           postinc0	equ	0xFEE
 16825                           wreg	equ	0xFE8
 16826                           postdec1	equ	0xFE5
 16827                           fsr1l	equ	0xFE1
 16828                           indf2	equ	0xFDF
 16829                           postinc2	equ	0xFDE
 16830                           postdec2	equ	0xFDD
 16831                           fsr2h	equ	0xFDA
 16832                           fsr2l	equ	0xFD9
 16833                           status	equ	0xFD8
 16834                           
 16835 ;; *************** function _OpenUSART *****************
 16836 ;; Defined at:
 16837 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;  config          1    wreg     unsigned char 
 16840 ;;  spbrg           2   16[COMRAM] unsigned int 
 16841 ;; Auto vars:     Size  Location     Type
 16842 ;;  config          1   18[COMRAM] unsigned char 
 16843 ;; Return value:  Size  Location     Type
 16844 ;;		None               void
 16845 ;; Registers used:
 16846 ;;		wreg, status,2
 16847 ;; Tracked objects:
 16848 ;;		On entry : 0/0
 16849 ;;		On exit  : 0/0
 16850 ;;		Unchanged: 0/0
 16851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;Total ram usage:        3 bytes
 16857 ;; Hardware stack levels used:    1
 16858 ;; Hardware stack levels required when called:    3
 16859 ;; This function calls:
 16860 ;;		Nothing
 16861 ;; This function is called by:
 16862 ;;		_init_UART
 16863 ;; This function uses a non-reentrant model
 16864 ;;
 16865                           
 16866                           	psect	text99
 16867  002F6C                     __ptext99:
 16868                           	opt stack 0
 16869  002F6C                     _OpenUSART:
 16870                           	opt stack 25
 16871                           
 16872                           ;incstack = 0
 16873                           ;OpenUSART@config stored from wreg
 16874  002F6C  6E13               	movwf	OpenUSART@config,c
 16875  002F6E  0E00               	movlw	0
 16876  002F70  6EAC               	movwf	4012,c	;volatile
 16877  002F72  0E00               	movlw	0
 16878  002F74  6EAB               	movwf	4011,c	;volatile
 16879  002F76  A013               	btfss	OpenUSART@config,0,c
 16880  002F78  D002               	goto	l6157
 16881  002F7A  88AC               	bsf	4012,4,c	;volatile
 16882  002F7C  D000               	goto	l6157
 16883  002F7E                     l6157:
 16884  002F7E  A213               	btfss	OpenUSART@config,1,c
 16885  002F80  D003               	goto	l6161
 16886  002F82  8CAC               	bsf	4012,6,c	;volatile
 16887  002F84  8CAB               	bsf	4011,6,c	;volatile
 16888  002F86  D000               	goto	l6161
 16889  002F88                     l6161:
 16890  002F88  A413               	btfss	OpenUSART@config,2,c
 16891  002F8A  D002               	goto	l6165
 16892  002F8C  8EAC               	bsf	4012,7,c	;volatile
 16893  002F8E  D000               	goto	l6165
 16894  002F90                     l6165:
 16895  002F90  A613               	btfss	OpenUSART@config,3,c
 16896  002F92  D002               	goto	l1481
 16897  002F94  88AB               	bsf	4011,4,c	;volatile
 16898  002F96  D002               	goto	l6169
 16899  002F98                     l1481:
 16900  002F98  8AAB               	bsf	4011,5,c	;volatile
 16901  002F9A  D000               	goto	l6169
 16902  002F9C                     l6169:
 16903  002F9C  B813               	btfsc	OpenUSART@config,4,c
 16904  002F9E  84AC               	bsf	4012,2,c	;volatile
 16905  002FA0  989E               	bcf	3998,4,c	;volatile
 16906  002FA2  AA13               	btfss	OpenUSART@config,5,c
 16907  002FA4  D002               	goto	l6177
 16908  002FA6  86AB               	bsf	4011,3,c	;volatile
 16909  002FA8  D000               	goto	l6177
 16910  002FAA                     l6177:
 16911  002FAA  AC13               	btfss	OpenUSART@config,6,c
 16912  002FAC  D002               	goto	l1485
 16913  002FAE  8A9D               	bsf	3997,5,c	;volatile
 16914  002FB0  D001               	goto	l1486
 16915  002FB2                     l1485:
 16916  002FB2  9A9D               	bcf	3997,5,c	;volatile
 16917  002FB4                     l1486:
 16918  002FB4  9A9E               	bcf	3998,5,c	;volatile
 16919  002FB6  AE13               	btfss	OpenUSART@config,7,c
 16920  002FB8  D002               	goto	l1487
 16921  002FBA  889D               	bsf	3997,4,c	;volatile
 16922  002FBC  D001               	goto	l1488
 16923  002FBE                     l1487:
 16924  002FBE  989D               	bcf	3997,4,c	;volatile
 16925  002FC0                     l1488:
 16926  002FC0  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 16927  002FC4  5012               	movf	OpenUSART@spbrg+1,w,c
 16928  002FC6  6EB0               	movwf	4016,c	;volatile
 16929  002FC8  8AAC               	bsf	4012,5,c	;volatile
 16930  002FCA  8EAB               	bsf	4011,7,c	;volatile
 16931  002FCC  9C94               	bcf	3988,6,c	;volatile
 16932  002FCE  8E94               	bsf	3988,7,c	;volatile
 16933  002FD0  B8AC               	btfsc	4012,4,c	;volatile
 16934  002FD2  BEAC               	btfsc	4012,7,c	;volatile
 16935  002FD4  D002               	goto	l1490
 16936  002FD6  8C94               	bsf	3988,6,c	;volatile
 16937  002FD8  D000               	goto	l1490
 16938  002FDA                     l1490:
 16939  002FDA  0012               	return		;funcret
 16940  002FDC                     __end_of_OpenUSART:
 16941                           	opt stack 0
 16942                           tblptru	equ	0xFF8
 16943                           tblptrh	equ	0xFF7
 16944                           tblptrl	equ	0xFF6
 16945                           tablat	equ	0xFF5
 16946                           prodh	equ	0xFF4
 16947                           prodl	equ	0xFF3
 16948                           intcon	equ	0xFF2
 16949                           intcon2	equ	0xFF1
 16950                           postinc0	equ	0xFEE
 16951                           wreg	equ	0xFE8
 16952                           postdec1	equ	0xFE5
 16953                           fsr1l	equ	0xFE1
 16954                           indf2	equ	0xFDF
 16955                           postinc2	equ	0xFDE
 16956                           postdec2	equ	0xFDD
 16957                           fsr2h	equ	0xFDA
 16958                           fsr2l	equ	0xFD9
 16959                           status	equ	0xFD8
 16960                           
 16961 ;; *************** function _Turn_Off_Fan *****************
 16962 ;; Defined at:
 16963 ;;		line 57 in file "Fan_Support.c"
 16964 ;; Parameters:    Size  Location     Type
 16965 ;;		None
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;		None
 16968 ;; Return value:  Size  Location     Type
 16969 ;;		None               void
 16970 ;; Registers used:
 16971 ;;		wreg, status,2
 16972 ;; Tracked objects:
 16973 ;;		On entry : 0/0
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16981 ;;Total ram usage:        0 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:    3
 16984 ;; This function calls:
 16985 ;;		Nothing
 16986 ;; This function is called by:
 16987 ;;		_Monitor_Heater
 16988 ;;		_Do_Init
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992                           	psect	text100
 16993  003CA8                     __ptext100:
 16994                           	opt stack 0
 16995  003CA8                     _Turn_Off_Fan:
 16996                           	opt stack 26
 16997                           
 16998                           ;Fan_Support.c: 59: FAN = 0;
 16999                           
 17000                           ;incstack = 0
 17001  003CA8  0E00               	movlw	0
 17002  003CAA  6E4D               	movwf	_FAN,c
 17003                           
 17004                           ;Fan_Support.c: 60: PORTAbits.RA5 = 0;
 17005  003CAC  9A80               	bcf	3968,5,c	;volatile
 17006                           
 17007                           ;Fan_Support.c: 61: PORTEbits.RE2 = 0;
 17008  003CAE  9484               	bcf	3972,2,c	;volatile
 17009  003CB0  0012               	return		;funcret
 17010  003CB2                     __end_of_Turn_Off_Fan:
 17011                           	opt stack 0
 17012                           tblptru	equ	0xFF8
 17013                           tblptrh	equ	0xFF7
 17014                           tblptrl	equ	0xFF6
 17015                           tablat	equ	0xFF5
 17016                           prodh	equ	0xFF4
 17017                           prodl	equ	0xFF3
 17018                           intcon	equ	0xFF2
 17019                           intcon2	equ	0xFF1
 17020                           postinc0	equ	0xFEE
 17021                           wreg	equ	0xFE8
 17022                           postdec1	equ	0xFE5
 17023                           fsr1l	equ	0xFE1
 17024                           indf2	equ	0xFDF
 17025                           postinc2	equ	0xFDE
 17026                           postdec2	equ	0xFDD
 17027                           fsr2h	equ	0xFDA
 17028                           fsr2l	equ	0xFD9
 17029                           status	equ	0xFD8
 17030                           
 17031 ;; *************** function _Init_Interrupt *****************
 17032 ;; Defined at:
 17033 ;;		line 17 in file "Interrupt.c"
 17034 ;; Parameters:    Size  Location     Type
 17035 ;;		None
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;		None
 17038 ;; Return value:  Size  Location     Type
 17039 ;;		None               void
 17040 ;; Registers used:
 17041 ;;		wreg, status,2
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17051 ;;Total ram usage:        0 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    3
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		_Do_Init
 17058 ;; This function uses a non-reentrant model
 17059 ;;
 17060                           
 17061                           	psect	text101
 17062  0035D4                     __ptext101:
 17063                           	opt stack 0
 17064  0035D4                     _Init_Interrupt:
 17065                           	opt stack 26
 17066                           
 17067                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 17068                           
 17069                           ;incstack = 0
 17070  0035D4  92F2               	bcf	intcon,1,c	;volatile
 17071                           
 17072                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 17073  0035D6  90F0               	bcf	intcon3,0,c	;volatile
 17074                           
 17075                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 17076  0035D8  92F0               	bcf	intcon3,1,c	;volatile
 17077                           
 17078                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 17079  0035DA  88F2               	bsf	intcon,4,c	;volatile
 17080                           
 17081                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 17082  0035DC  86F0               	bsf	intcon3,3,c	;volatile
 17083                           
 17084                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 17085  0035DE  88F0               	bsf	intcon3,4,c	;volatile
 17086                           
 17087                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 17088  0035E0  9CF1               	bcf	intcon2,6,c	;volatile
 17089                           
 17090                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 17091  0035E2  9AF1               	bcf	intcon2,5,c	;volatile
 17092                           
 17093                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 17094  0035E4  98F1               	bcf	intcon2,4,c	;volatile
 17095                           
 17096                           ;Interrupt.c: 29: TMR1H = 0;
 17097  0035E6  0E00               	movlw	0
 17098  0035E8  6ECF               	movwf	4047,c	;volatile
 17099                           
 17100                           ;Interrupt.c: 30: TMR1L = 0;
 17101  0035EA  0E00               	movlw	0
 17102  0035EC  6ECE               	movwf	4046,c	;volatile
 17103                           
 17104                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 17105  0035EE  909E               	bcf	3998,0,c	;volatile
 17106                           
 17107                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 17108  0035F0  809D               	bsf	3997,0,c	;volatile
 17109                           
 17110                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 17111  0035F2  8CF2               	bsf	intcon,6,c	;volatile
 17112                           
 17113                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 17114  0035F4  8EF2               	bsf	intcon,7,c	;volatile
 17115                           
 17116                           ;Interrupt.c: 35: nec_ok = 0;
 17117  0035F6  0E00               	movlw	0
 17118  0035F8  0100               	movlb	0	; () banked
 17119  0035FA  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 17120  0035FC  0E00               	movlw	0
 17121  0035FE  6FF2               	movwf	_nec_ok& (0+255),b
 17122                           
 17123                           ;Interrupt.c: 36: Nec_code = 0x00;
 17124  003600  0E00               	movlw	0
 17125  003602  0100               	movlb	0	; () banked
 17126  003604  6FE3               	movwf	_Nec_code& (0+255),b
 17127  003606  0E00               	movlw	0
 17128  003608  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 17129  00360A  0E00               	movlw	0
 17130  00360C  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 17131  00360E  0E00               	movlw	0
 17132  003610  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 17133                           
 17134                           ; BSR set to: 0
 17135  003612  0012               	return		;funcret
 17136  003614                     __end_of_Init_Interrupt:
 17137                           	opt stack 0
 17138                           tblptru	equ	0xFF8
 17139                           tblptrh	equ	0xFF7
 17140                           tblptrl	equ	0xFF6
 17141                           tablat	equ	0xFF5
 17142                           prodh	equ	0xFF4
 17143                           prodl	equ	0xFF3
 17144                           intcon	equ	0xFF2
 17145                           intcon2	equ	0xFF1
 17146                           intcon3	equ	0xFF0
 17147                           postinc0	equ	0xFEE
 17148                           wreg	equ	0xFE8
 17149                           postdec1	equ	0xFE5
 17150                           fsr1l	equ	0xFE1
 17151                           indf2	equ	0xFDF
 17152                           postinc2	equ	0xFDE
 17153                           postdec2	equ	0xFDD
 17154                           fsr2h	equ	0xFDA
 17155                           fsr2l	equ	0xFD9
 17156                           status	equ	0xFD8
 17157                           
 17158 ;; *************** function _Init_ADC *****************
 17159 ;; Defined at:
 17160 ;;		line 206 in file "utils.c"
 17161 ;; Parameters:    Size  Location     Type
 17162 ;;		None
 17163 ;; Auto vars:     Size  Location     Type
 17164 ;;		None
 17165 ;; Return value:  Size  Location     Type
 17166 ;;		None               void
 17167 ;; Registers used:
 17168 ;;		wreg, status,2
 17169 ;; Tracked objects:
 17170 ;;		On entry : 0/0
 17171 ;;		On exit  : 0/0
 17172 ;;		Unchanged: 0/0
 17173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17178 ;;Total ram usage:        0 bytes
 17179 ;; Hardware stack levels used:    1
 17180 ;; Hardware stack levels required when called:    3
 17181 ;; This function calls:
 17182 ;;		Nothing
 17183 ;; This function is called by:
 17184 ;;		_Do_Init
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           	psect	text102
 17189  003C82                     __ptext102:
 17190                           	opt stack 0
 17191  003C82                     _Init_ADC:
 17192                           	opt stack 26
 17193                           
 17194                           ;utils.c: 208: ADCON0 = 0x01;
 17195                           
 17196                           ; BSR set to: 0
 17197                           ;incstack = 0
 17198  003C82  0E01               	movlw	1
 17199  003C84  6EC2               	movwf	4034,c	;volatile
 17200                           
 17201                           ;utils.c: 209: ADCON1 = 0x0E;
 17202  003C86  0E0E               	movlw	14
 17203  003C88  6EC1               	movwf	4033,c	;volatile
 17204                           
 17205                           ;utils.c: 210: ADCON2 = 0xA9;
 17206  003C8A  0EA9               	movlw	169
 17207  003C8C  6EC0               	movwf	4032,c	;volatile
 17208  003C8E  0012               	return		;funcret
 17209  003C90                     __end_of_Init_ADC:
 17210                           	opt stack 0
 17211                           tblptru	equ	0xFF8
 17212                           tblptrh	equ	0xFF7
 17213                           tblptrl	equ	0xFF6
 17214                           tablat	equ	0xFF5
 17215                           prodh	equ	0xFF4
 17216                           prodl	equ	0xFF3
 17217                           intcon	equ	0xFF2
 17218                           intcon2	equ	0xFF1
 17219                           intcon3	equ	0xFF0
 17220                           postinc0	equ	0xFEE
 17221                           wreg	equ	0xFE8
 17222                           postdec1	equ	0xFE5
 17223                           fsr1l	equ	0xFE1
 17224                           indf2	equ	0xFDF
 17225                           postinc2	equ	0xFDE
 17226                           postdec2	equ	0xFDD
 17227                           fsr2h	equ	0xFDA
 17228                           fsr2l	equ	0xFD9
 17229                           status	equ	0xFD8
 17230                           
 17231 ;; *************** function _I2C_Init *****************
 17232 ;; Defined at:
 17233 ;;		line 10 in file "I2C.c"
 17234 ;; Parameters:    Size  Location     Type
 17235 ;;  c               4   16[COMRAM] unsigned long 
 17236 ;; Auto vars:     Size  Location     Type
 17237 ;;		None
 17238 ;; Return value:  Size  Location     Type
 17239 ;;		None               void
 17240 ;; Registers used:
 17241 ;;		wreg, cstack
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 0/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17250 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;Total ram usage:        4 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    4
 17254 ;; This function calls:
 17255 ;;		_i2cHighScl
 17256 ;;		_i2cHighSda
 17257 ;; This function is called by:
 17258 ;;		_Do_Init
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           	psect	text103
 17263  003CB2                     __ptext103:
 17264                           	opt stack 0
 17265  003CB2                     _I2C_Init:
 17266                           	opt stack 25
 17267                           
 17268                           ;I2C.c: 12: i2cHighScl();
 17269                           
 17270                           ;incstack = 0
 17271  003CB2  EC48  F01E         	call	_i2cHighScl	;wreg free
 17272                           
 17273                           ;I2C.c: 13: i2cHighSda();
 17274  003CB6  EC75  F01E         	call	_i2cHighSda	;wreg free
 17275  003CBA  0012               	return		;funcret
 17276  003CBC                     __end_of_I2C_Init:
 17277                           	opt stack 0
 17278                           tblptru	equ	0xFF8
 17279                           tblptrh	equ	0xFF7
 17280                           tblptrl	equ	0xFF6
 17281                           tablat	equ	0xFF5
 17282                           prodh	equ	0xFF4
 17283                           prodl	equ	0xFF3
 17284                           intcon	equ	0xFF2
 17285                           intcon2	equ	0xFF1
 17286                           intcon3	equ	0xFF0
 17287                           postinc0	equ	0xFEE
 17288                           wreg	equ	0xFE8
 17289                           postdec1	equ	0xFE5
 17290                           fsr1l	equ	0xFE1
 17291                           indf2	equ	0xFDF
 17292                           postinc2	equ	0xFDE
 17293                           postdec2	equ	0xFDD
 17294                           fsr2h	equ	0xFDA
 17295                           fsr2l	equ	0xFD9
 17296                           status	equ	0xFD8
 17297                           
 17298 ;; *************** function _DS1621_Init *****************
 17299 ;; Defined at:
 17300 ;;		line 22 in file "I2C_Support.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;		None
 17303 ;; Auto vars:     Size  Location     Type
 17304 ;;  Device          1   21[COMRAM] unsigned char 
 17305 ;; Return value:  Size  Location     Type
 17306 ;;		None               void
 17307 ;; Registers used:
 17308 ;;		wreg, status,2, status,0, cstack
 17309 ;; Tracked objects:
 17310 ;;		On entry : 0/0
 17311 ;;		On exit  : 0/0
 17312 ;;		Unchanged: 0/0
 17313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17317 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17318 ;;Total ram usage:        1 bytes
 17319 ;; Hardware stack levels used:    1
 17320 ;; Hardware stack levels required when called:    6
 17321 ;; This function calls:
 17322 ;;		_I2C_Write_Cmd_Only
 17323 ;;		_I2C_Write_Cmd_Write_Data
 17324 ;; This function is called by:
 17325 ;;		_Do_Init
 17326 ;; This function uses a non-reentrant model
 17327 ;;
 17328                           
 17329                           	psect	text104
 17330  003A0E                     __ptext104:
 17331                           	opt stack 0
 17332  003A0E                     _DS1621_Init:
 17333                           	opt stack 23
 17334                           
 17335                           ;I2C_Support.c: 24: char Device = 0x48;
 17336                           
 17337                           ;incstack = 0
 17338  003A0E  0E48               	movlw	72
 17339  003A10  6E16               	movwf	DS1621_Init@Device,c
 17340                           
 17341                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 17342  003A12  0EAC               	movlw	172
 17343  003A14  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 17344  003A16  0E02               	movlw	2
 17345  003A18  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 17346  003A1A  5016               	movf	DS1621_Init@Device,w,c
 17347  003A1C  ECE8  F01C         	call	_I2C_Write_Cmd_Write_Data
 17348                           
 17349                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 17350  003A20  0EEE               	movlw	238
 17351  003A22  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 17352  003A24  5016               	movf	DS1621_Init@Device,w,c
 17353  003A26  EC24  F01D         	call	_I2C_Write_Cmd_Only
 17354  003A2A  0012               	return		;funcret
 17355  003A2C                     __end_of_DS1621_Init:
 17356                           	opt stack 0
 17357                           tblptru	equ	0xFF8
 17358                           tblptrh	equ	0xFF7
 17359                           tblptrl	equ	0xFF6
 17360                           tablat	equ	0xFF5
 17361                           prodh	equ	0xFF4
 17362                           prodl	equ	0xFF3
 17363                           intcon	equ	0xFF2
 17364                           intcon2	equ	0xFF1
 17365                           intcon3	equ	0xFF0
 17366                           postinc0	equ	0xFEE
 17367                           wreg	equ	0xFE8
 17368                           postdec1	equ	0xFE5
 17369                           fsr1l	equ	0xFE1
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           fsr2h	equ	0xFDA
 17374                           fsr2l	equ	0xFD9
 17375                           status	equ	0xFD8
 17376                           
 17377 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 17378 ;; Defined at:
 17379 ;;		line 148 in file "I2C.c"
 17380 ;; Parameters:    Size  Location     Type
 17381 ;;  Device          1    wreg     unsigned char 
 17382 ;;  Cmd             1   18[COMRAM] unsigned char 
 17383 ;;  Data_Out        1   19[COMRAM] unsigned char 
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;  Device          1   20[COMRAM] unsigned char 
 17386 ;; Return value:  Size  Location     Type
 17387 ;;		None               void
 17388 ;; Registers used:
 17389 ;;		wreg, status,2, status,0, cstack
 17390 ;; Tracked objects:
 17391 ;;		On entry : 0/0
 17392 ;;		On exit  : 0/0
 17393 ;;		Unchanged: 0/0
 17394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;Total ram usage:        3 bytes
 17400 ;; Hardware stack levels used:    1
 17401 ;; Hardware stack levels required when called:    5
 17402 ;; This function calls:
 17403 ;;		_I2C_Start
 17404 ;;		_I2C_Stop
 17405 ;;		_I2C_Write
 17406 ;; This function is called by:
 17407 ;;		_DS1621_Init
 17408 ;; This function uses a non-reentrant model
 17409 ;;
 17410                           
 17411                           	psect	text105
 17412  0039D0                     __ptext105:
 17413                           	opt stack 0
 17414  0039D0                     _I2C_Write_Cmd_Write_Data:
 17415                           	opt stack 23
 17416                           
 17417                           ;incstack = 0
 17418                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 17419  0039D0  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 17420                           
 17421                           ;I2C.c: 150: I2C_Start();
 17422  0039D2  ECEA  F01D         	call	_I2C_Start	;wreg free
 17423                           
 17424                           ;I2C.c: 151: I2C_Write((Device << 1) | 0);
 17425  0039D6  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 17426  0039D8  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 17427  0039DA  EC48  F01B         	call	_I2C_Write
 17428                           
 17429                           ;I2C.c: 152: I2C_Write(Cmd);
 17430  0039DE  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 17431  0039E0  EC48  F01B         	call	_I2C_Write
 17432                           
 17433                           ;I2C.c: 153: I2C_Write(Data_Out);
 17434  0039E4  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 17435  0039E6  EC48  F01B         	call	_I2C_Write
 17436                           
 17437                           ;I2C.c: 154: I2C_Stop();
 17438  0039EA  ECE1  F01D         	call	_I2C_Stop	;wreg free
 17439  0039EE  0012               	return		;funcret
 17440  0039F0                     __end_of_I2C_Write_Cmd_Write_Data:
 17441                           	opt stack 0
 17442                           tblptru	equ	0xFF8
 17443                           tblptrh	equ	0xFF7
 17444                           tblptrl	equ	0xFF6
 17445                           tablat	equ	0xFF5
 17446                           prodh	equ	0xFF4
 17447                           prodl	equ	0xFF3
 17448                           intcon	equ	0xFF2
 17449                           intcon2	equ	0xFF1
 17450                           intcon3	equ	0xFF0
 17451                           postinc0	equ	0xFEE
 17452                           wreg	equ	0xFE8
 17453                           postdec1	equ	0xFE5
 17454                           fsr1l	equ	0xFE1
 17455                           indf2	equ	0xFDF
 17456                           postinc2	equ	0xFDE
 17457                           postdec2	equ	0xFDD
 17458                           fsr2h	equ	0xFDA
 17459                           fsr2l	equ	0xFD9
 17460                           status	equ	0xFD8
 17461                           
 17462 ;; *************** function _I2C_Write_Cmd_Only *****************
 17463 ;; Defined at:
 17464 ;;		line 140 in file "I2C.c"
 17465 ;; Parameters:    Size  Location     Type
 17466 ;;  Device          1    wreg     unsigned char 
 17467 ;;  Cmd             1   18[COMRAM] unsigned char 
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;  Device          1   19[COMRAM] unsigned char 
 17470 ;; Return value:  Size  Location     Type
 17471 ;;		None               void
 17472 ;; Registers used:
 17473 ;;		wreg, status,2, status,0, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17479 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17483 ;;Total ram usage:        2 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    5
 17486 ;; This function calls:
 17487 ;;		_I2C_Start
 17488 ;;		_I2C_Stop
 17489 ;;		_I2C_Write
 17490 ;; This function is called by:
 17491 ;;		_DS1621_Init
 17492 ;; This function uses a non-reentrant model
 17493 ;;
 17494                           
 17495                           	psect	text106
 17496  003A48                     __ptext106:
 17497                           	opt stack 0
 17498  003A48                     _I2C_Write_Cmd_Only:
 17499                           	opt stack 23
 17500                           
 17501                           ;incstack = 0
 17502                           ;I2C_Write_Cmd_Only@Device stored from wreg
 17503  003A48  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 17504                           
 17505                           ;I2C.c: 142: I2C_Start();
 17506  003A4A  ECEA  F01D         	call	_I2C_Start	;wreg free
 17507                           
 17508                           ;I2C.c: 143: I2C_Write((Device << 1) | 0);
 17509  003A4E  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 17510  003A50  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 17511  003A52  EC48  F01B         	call	_I2C_Write
 17512                           
 17513                           ;I2C.c: 144: I2C_Write(Cmd);
 17514  003A56  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 17515  003A58  EC48  F01B         	call	_I2C_Write
 17516                           
 17517                           ;I2C.c: 145: I2C_Stop();
 17518  003A5C  ECE1  F01D         	call	_I2C_Stop	;wreg free
 17519  003A60  0012               	return		;funcret
 17520  003A62                     __end_of_I2C_Write_Cmd_Only:
 17521                           	opt stack 0
 17522                           tblptru	equ	0xFF8
 17523                           tblptrh	equ	0xFF7
 17524                           tblptrl	equ	0xFF6
 17525                           tablat	equ	0xFF5
 17526                           prodh	equ	0xFF4
 17527                           prodl	equ	0xFF3
 17528                           intcon	equ	0xFF2
 17529                           intcon2	equ	0xFF1
 17530                           intcon3	equ	0xFF0
 17531                           postinc0	equ	0xFEE
 17532                           wreg	equ	0xFE8
 17533                           postdec1	equ	0xFE5
 17534                           fsr1l	equ	0xFE1
 17535                           indf2	equ	0xFDF
 17536                           postinc2	equ	0xFDE
 17537                           postdec2	equ	0xFDD
 17538                           fsr2h	equ	0xFDA
 17539                           fsr2l	equ	0xFD9
 17540                           status	equ	0xFD8
 17541                           
 17542 ;; *************** function _DS1621_Read_Temp *****************
 17543 ;; Defined at:
 17544 ;;		line 29 in file "I2C_Support.c"
 17545 ;; Parameters:    Size  Location     Type
 17546 ;;		None
 17547 ;; Auto vars:     Size  Location     Type
 17548 ;;  Device          1   23[COMRAM] unsigned char 
 17549 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 17550 ;;  Cmd             1   21[COMRAM] unsigned char 
 17551 ;; Return value:  Size  Location     Type
 17552 ;;                  2   19[COMRAM] int 
 17553 ;; Registers used:
 17554 ;;		wreg, status,2, status,0, cstack
 17555 ;; Tracked objects:
 17556 ;;		On entry : 0/0
 17557 ;;		On exit  : 0/0
 17558 ;;		Unchanged: 0/0
 17559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17560 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17561 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;Total ram usage:        5 bytes
 17565 ;; Hardware stack levels used:    1
 17566 ;; Hardware stack levels required when called:    6
 17567 ;; This function calls:
 17568 ;;		_I2C_ReStart
 17569 ;;		_I2C_Read
 17570 ;;		_I2C_Start
 17571 ;;		_I2C_Stop
 17572 ;;		_I2C_Write
 17573 ;; This function is called by:
 17574 ;;		_main
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           	psect	text107
 17579  003746                     __ptext107:
 17580                           	opt stack 0
 17581  003746                     _DS1621_Read_Temp:
 17582                           	opt stack 24
 17583                           
 17584                           ;I2C_Support.c: 32: char Device = 0x48;
 17585                           
 17586                           ;incstack = 0
 17587  003746  0E48               	movlw	72
 17588  003748  6E18               	movwf	DS1621_Read_Temp@Device,c
 17589                           
 17590                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 17591  00374A  0EAA               	movlw	170
 17592  00374C  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 17593                           
 17594                           ;I2C_Support.c: 34: char Data_Ret;
 17595                           ;I2C_Support.c: 35: I2C_Start();
 17596  00374E  ECEA  F01D         	call	_I2C_Start	;wreg free
 17597                           
 17598                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 17599  003752  5018               	movf	DS1621_Read_Temp@Device,w,c
 17600  003754  2418               	addwf	DS1621_Read_Temp@Device,w,c
 17601  003756  EC48  F01B         	call	_I2C_Write
 17602                           
 17603                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 17604  00375A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 17605  00375C  EC48  F01B         	call	_I2C_Write
 17606                           
 17607                           ;I2C_Support.c: 38: I2C_ReStart();
 17608  003760  EC6D  F01D         	call	_I2C_ReStart	;wreg free
 17609                           
 17610                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 17611  003764  80D8               	bsf	status,0,c
 17612  003766  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 17613  003768  EC48  F01B         	call	_I2C_Write
 17614                           
 17615                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 17616  00376C  0E00               	movlw	0
 17617  00376E  ECA5  F01A         	call	_I2C_Read
 17618  003772  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 17619                           
 17620                           ;I2C_Support.c: 41: I2C_Stop();
 17621  003774  ECE1  F01D         	call	_I2C_Stop	;wreg free
 17622                           
 17623                           ;I2C_Support.c: 42: return Data_Ret;
 17624  003778  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 17625  00377C  6A15               	clrf	?_DS1621_Read_Temp+1,c
 17626  00377E  D000               	goto	l202
 17627  003780                     l202:
 17628  003780  0012               	return		;funcret
 17629  003782                     __end_of_DS1621_Read_Temp:
 17630                           	opt stack 0
 17631                           tblptru	equ	0xFF8
 17632                           tblptrh	equ	0xFF7
 17633                           tblptrl	equ	0xFF6
 17634                           tablat	equ	0xFF5
 17635                           prodh	equ	0xFF4
 17636                           prodl	equ	0xFF3
 17637                           intcon	equ	0xFF2
 17638                           intcon2	equ	0xFF1
 17639                           intcon3	equ	0xFF0
 17640                           postinc0	equ	0xFEE
 17641                           wreg	equ	0xFE8
 17642                           postdec1	equ	0xFE5
 17643                           fsr1l	equ	0xFE1
 17644                           indf2	equ	0xFDF
 17645                           postinc2	equ	0xFDE
 17646                           postdec2	equ	0xFDD
 17647                           fsr2h	equ	0xFDA
 17648                           fsr2l	equ	0xFD9
 17649                           status	equ	0xFD8
 17650                           
 17651 ;; *************** function _I2C_Write *****************
 17652 ;; Defined at:
 17653 ;;		line 37 in file "I2C.c"
 17654 ;; Parameters:    Size  Location     Type
 17655 ;;  outByte         1    wreg     unsigned char 
 17656 ;; Auto vars:     Size  Location     Type
 17657 ;;  outByte         1   16[COMRAM] unsigned char 
 17658 ;;  n               1   17[COMRAM] unsigned char 
 17659 ;; Return value:  Size  Location     Type
 17660 ;;		None               void
 17661 ;; Registers used:
 17662 ;;		wreg, status,2, status,0, cstack
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17672 ;;Total ram usage:        2 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    4
 17675 ;; This function calls:
 17676 ;;		_i2cHighScl
 17677 ;;		_i2cHighSda
 17678 ;;		_i2cLowScl
 17679 ;;		_i2cLowSda
 17680 ;; This function is called by:
 17681 ;;		_I2C_Write_Address_Read_One_Byte
 17682 ;;		_I2C_Write_Address_Write_One_Byte
 17683 ;;		_I2C_Write_Cmd_Only
 17684 ;;		_I2C_Write_Cmd_Write_Data
 17685 ;;		_DS1621_Read_Temp
 17686 ;;		_DS3231_Read_Time
 17687 ;;		_DS3231_Write_Time
 17688 ;;		_DS3231_Read_Alarm_Time
 17689 ;;		_DS3231_Init
 17690 ;;		_DS3231_Write_Alarm_Time
 17691 ;;		_I2C_Write_Cmd_Read_One_Byte
 17692 ;;		_DS3231_Setup_Time
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           	psect	text108
 17697  003690                     __ptext108:
 17698                           	opt stack 0
 17699  003690                     _I2C_Write:
 17700                           	opt stack 23
 17701                           
 17702                           ;incstack = 0
 17703                           ;I2C_Write@outByte stored from wreg
 17704  003690  6E11               	movwf	I2C_Write@outByte,c
 17705                           
 17706                           ;I2C.c: 39: unsigned char n;
 17707                           ;I2C.c: 40: for(n=0; n<8; n++)
 17708  003692  0E00               	movlw	0
 17709  003694  6E12               	movwf	I2C_Write@n,c
 17710  003696                     l7981:
 17711  003696  0E07               	movlw	7
 17712  003698  6412               	cpfsgt	I2C_Write@n,c
 17713  00369A  D001               	goto	l90
 17714  00369C  D011               	goto	l7999
 17715  00369E                     l90:
 17716                           
 17717                           ;I2C.c: 41: {
 17718                           ;I2C.c: 42: if(outByte&0x80) i2cHighSda();
 17719  00369E  AE11               	btfss	I2C_Write@outByte,7,c
 17720  0036A0  D003               	goto	l7987
 17721  0036A2  EC75  F01E         	call	_i2cHighSda	;wreg free
 17722  0036A6  D003               	goto	l7989
 17723  0036A8                     l7987:
 17724                           
 17725                           ;I2C.c: 43: else i2cLowSda();
 17726  0036A8  EC63  F01E         	call	_i2cLowSda	;wreg free
 17727  0036AC  D000               	goto	l7989
 17728  0036AE                     l7989:
 17729                           
 17730                           ;I2C.c: 44: i2cHighScl();
 17731  0036AE  EC48  F01E         	call	_i2cHighScl	;wreg free
 17732                           
 17733                           ;I2C.c: 45: i2cLowScl();
 17734  0036B2  EC71  F01E         	call	_i2cLowScl	;wreg free
 17735                           
 17736                           ;I2C.c: 46: outByte = outByte << 1;
 17737  0036B6  5011               	movf	I2C_Write@outByte,w,c
 17738  0036B8  2411               	addwf	I2C_Write@outByte,w,c
 17739  0036BA  6E11               	movwf	I2C_Write@outByte,c
 17740  0036BC  2A12               	incf	I2C_Write@n,f,c
 17741  0036BE  D7EB               	goto	l7981
 17742  0036C0                     l7999:
 17743                           
 17744                           ;I2C.c: 47: }
 17745                           ;I2C.c: 48: i2cHighSda();
 17746  0036C0  EC75  F01E         	call	_i2cHighSda	;wreg free
 17747                           
 17748                           ;I2C.c: 49: i2cHighScl();
 17749  0036C4  EC48  F01E         	call	_i2cHighScl	;wreg free
 17750                           
 17751                           ;I2C.c: 50: i2cLowScl();
 17752  0036C8  EC71  F01E         	call	_i2cLowScl	;wreg free
 17753  0036CC  0012               	return		;funcret
 17754  0036CE                     __end_of_I2C_Write:
 17755                           	opt stack 0
 17756                           tblptru	equ	0xFF8
 17757                           tblptrh	equ	0xFF7
 17758                           tblptrl	equ	0xFF6
 17759                           tablat	equ	0xFF5
 17760                           prodh	equ	0xFF4
 17761                           prodl	equ	0xFF3
 17762                           intcon	equ	0xFF2
 17763                           intcon2	equ	0xFF1
 17764                           intcon3	equ	0xFF0
 17765                           postinc0	equ	0xFEE
 17766                           wreg	equ	0xFE8
 17767                           postdec1	equ	0xFE5
 17768                           fsr1l	equ	0xFE1
 17769                           indf2	equ	0xFDF
 17770                           postinc2	equ	0xFDE
 17771                           postdec2	equ	0xFDD
 17772                           fsr2h	equ	0xFDA
 17773                           fsr2l	equ	0xFD9
 17774                           status	equ	0xFD8
 17775                           
 17776 ;; *************** function _I2C_Stop *****************
 17777 ;; Defined at:
 17778 ;;		line 84 in file "I2C.c"
 17779 ;; Parameters:    Size  Location     Type
 17780 ;;		None
 17781 ;; Auto vars:     Size  Location     Type
 17782 ;;		None
 17783 ;; Return value:  Size  Location     Type
 17784 ;;		None               void
 17785 ;; Registers used:
 17786 ;;		wreg, cstack
 17787 ;; Tracked objects:
 17788 ;;		On entry : 0/0
 17789 ;;		On exit  : 0/0
 17790 ;;		Unchanged: 0/0
 17791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17796 ;;Total ram usage:        0 bytes
 17797 ;; Hardware stack levels used:    1
 17798 ;; Hardware stack levels required when called:    4
 17799 ;; This function calls:
 17800 ;;		_i2cHighScl
 17801 ;;		_i2cHighSda
 17802 ;;		_i2cLowScl
 17803 ;;		_i2cLowSda
 17804 ;; This function is called by:
 17805 ;;		_I2C_Write_Address_Read_One_Byte
 17806 ;;		_I2C_Write_Address_Write_One_Byte
 17807 ;;		_I2C_Write_Cmd_Only
 17808 ;;		_I2C_Write_Cmd_Write_Data
 17809 ;;		_DS1621_Read_Temp
 17810 ;;		_DS3231_Read_Time
 17811 ;;		_DS3231_Write_Time
 17812 ;;		_DS3231_Read_Alarm_Time
 17813 ;;		_DS3231_Init
 17814 ;;		_DS3231_Write_Alarm_Time
 17815 ;;		_I2C_Write_Cmd_Read_One_Byte
 17816 ;;		_DS3231_Setup_Time
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           	psect	text109
 17821  003BC2                     __ptext109:
 17822                           	opt stack 0
 17823  003BC2                     _I2C_Stop:
 17824                           	opt stack 23
 17825                           
 17826                           ;I2C.c: 86: i2cLowScl();
 17827                           
 17828                           ;incstack = 0
 17829  003BC2  EC71  F01E         	call	_i2cLowScl	;wreg free
 17830                           
 17831                           ;I2C.c: 87: i2cLowSda();
 17832  003BC6  EC63  F01E         	call	_i2cLowSda	;wreg free
 17833                           
 17834                           ;I2C.c: 88: i2cHighScl();
 17835  003BCA  EC48  F01E         	call	_i2cHighScl	;wreg free
 17836                           
 17837                           ;I2C.c: 89: i2cHighSda();
 17838  003BCE  EC75  F01E         	call	_i2cHighSda	;wreg free
 17839  003BD2  0012               	return		;funcret
 17840  003BD4                     __end_of_I2C_Stop:
 17841                           	opt stack 0
 17842                           tblptru	equ	0xFF8
 17843                           tblptrh	equ	0xFF7
 17844                           tblptrl	equ	0xFF6
 17845                           tablat	equ	0xFF5
 17846                           prodh	equ	0xFF4
 17847                           prodl	equ	0xFF3
 17848                           intcon	equ	0xFF2
 17849                           intcon2	equ	0xFF1
 17850                           intcon3	equ	0xFF0
 17851                           postinc0	equ	0xFEE
 17852                           wreg	equ	0xFE8
 17853                           postdec1	equ	0xFE5
 17854                           fsr1l	equ	0xFE1
 17855                           indf2	equ	0xFDF
 17856                           postinc2	equ	0xFDE
 17857                           postdec2	equ	0xFDD
 17858                           fsr2h	equ	0xFDA
 17859                           fsr2l	equ	0xFD9
 17860                           status	equ	0xFD8
 17861                           
 17862 ;; *************** function _I2C_Start *****************
 17863 ;; Defined at:
 17864 ;;		line 67 in file "I2C.c"
 17865 ;; Parameters:    Size  Location     Type
 17866 ;;		None
 17867 ;; Auto vars:     Size  Location     Type
 17868 ;;		None
 17869 ;; Return value:  Size  Location     Type
 17870 ;;		None               void
 17871 ;; Registers used:
 17872 ;;		wreg, cstack
 17873 ;; Tracked objects:
 17874 ;;		On entry : 0/0
 17875 ;;		On exit  : 0/0
 17876 ;;		Unchanged: 0/0
 17877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17882 ;;Total ram usage:        0 bytes
 17883 ;; Hardware stack levels used:    1
 17884 ;; Hardware stack levels required when called:    4
 17885 ;; This function calls:
 17886 ;;		_i2cHighScl
 17887 ;;		_i2cHighSda
 17888 ;;		_i2cLowScl
 17889 ;;		_i2cLowSda
 17890 ;; This function is called by:
 17891 ;;		_I2C_Write_Address_Read_One_Byte
 17892 ;;		_I2C_Write_Address_Write_One_Byte
 17893 ;;		_I2C_Write_Cmd_Only
 17894 ;;		_I2C_Write_Cmd_Write_Data
 17895 ;;		_DS1621_Read_Temp
 17896 ;;		_DS3231_Read_Time
 17897 ;;		_DS3231_Write_Time
 17898 ;;		_DS3231_Read_Alarm_Time
 17899 ;;		_DS3231_Init
 17900 ;;		_DS3231_Write_Alarm_Time
 17901 ;;		_I2C_Write_Cmd_Read_One_Byte
 17902 ;;		_DS3231_Setup_Time
 17903 ;; This function uses a non-reentrant model
 17904 ;;
 17905                           
 17906                           	psect	text110
 17907  003BD4                     __ptext110:
 17908                           	opt stack 0
 17909  003BD4                     _I2C_Start:
 17910                           	opt stack 23
 17911                           
 17912                           ;I2C.c: 69: i2cHighSda();
 17913                           
 17914                           ;incstack = 0
 17915  003BD4  EC75  F01E         	call	_i2cHighSda	;wreg free
 17916                           
 17917                           ;I2C.c: 70: i2cHighScl();
 17918  003BD8  EC48  F01E         	call	_i2cHighScl	;wreg free
 17919                           
 17920                           ;I2C.c: 71: i2cLowSda();
 17921  003BDC  EC63  F01E         	call	_i2cLowSda	;wreg free
 17922                           
 17923                           ;I2C.c: 72: i2cLowScl();
 17924  003BE0  EC71  F01E         	call	_i2cLowScl	;wreg free
 17925  003BE4  0012               	return		;funcret
 17926  003BE6                     __end_of_I2C_Start:
 17927                           	opt stack 0
 17928                           tblptru	equ	0xFF8
 17929                           tblptrh	equ	0xFF7
 17930                           tblptrl	equ	0xFF6
 17931                           tablat	equ	0xFF5
 17932                           prodh	equ	0xFF4
 17933                           prodl	equ	0xFF3
 17934                           intcon	equ	0xFF2
 17935                           intcon2	equ	0xFF1
 17936                           intcon3	equ	0xFF0
 17937                           postinc0	equ	0xFEE
 17938                           wreg	equ	0xFE8
 17939                           postdec1	equ	0xFE5
 17940                           fsr1l	equ	0xFE1
 17941                           indf2	equ	0xFDF
 17942                           postinc2	equ	0xFDE
 17943                           postdec2	equ	0xFDD
 17944                           fsr2h	equ	0xFDA
 17945                           fsr2l	equ	0xFD9
 17946                           status	equ	0xFD8
 17947                           
 17948 ;; *************** function _I2C_Read *****************
 17949 ;; Defined at:
 17950 ;;		line 16 in file "I2C.c"
 17951 ;; Parameters:    Size  Location     Type
 17952 ;;  ack             1    wreg     unsigned char 
 17953 ;; Auto vars:     Size  Location     Type
 17954 ;;  ack             1   16[COMRAM] unsigned char 
 17955 ;;  inByte          1   18[COMRAM] unsigned char 
 17956 ;;  n               1   17[COMRAM] unsigned char 
 17957 ;; Return value:  Size  Location     Type
 17958 ;;                  1    wreg      unsigned char 
 17959 ;; Registers used:
 17960 ;;		wreg, status,2, status,0, cstack
 17961 ;; Tracked objects:
 17962 ;;		On entry : 0/0
 17963 ;;		On exit  : 0/0
 17964 ;;		Unchanged: 0/0
 17965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17967 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17969 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17970 ;;Total ram usage:        3 bytes
 17971 ;; Hardware stack levels used:    1
 17972 ;; Hardware stack levels required when called:    5
 17973 ;; This function calls:
 17974 ;;		_i2cAck
 17975 ;;		_i2cHighScl
 17976 ;;		_i2cHighSda
 17977 ;;		_i2cLowScl
 17978 ;;		_i2cNack
 17979 ;; This function is called by:
 17980 ;;		_I2C_Write_Address_Read_One_Byte
 17981 ;;		_DS1621_Read_Temp
 17982 ;;		_DS3231_Read_Time
 17983 ;;		_DS3231_Read_Alarm_Time
 17984 ;;		_DS3231_Init
 17985 ;;		_I2C_Write_Cmd_Read_One_Byte
 17986 ;; This function uses a non-reentrant model
 17987 ;;
 17988                           
 17989                           	psect	text111
 17990  00354A                     __ptext111:
 17991                           	opt stack 0
 17992  00354A                     _I2C_Read:
 17993                           	opt stack 22
 17994                           
 17995                           ;incstack = 0
 17996                           ;I2C_Read@ack stored from wreg
 17997  00354A  6E11               	movwf	I2C_Read@ack,c
 17998                           
 17999                           ;I2C.c: 18: unsigned char inByte, n;
 18000                           ;I2C.c: 19: i2cHighSda();
 18001  00354C  EC75  F01E         	call	_i2cHighSda	;wreg free
 18002                           
 18003                           ;I2C.c: 20: for (n=0; n<8; n++)
 18004  003550  0E00               	movlw	0
 18005  003552  6E12               	movwf	I2C_Read@n,c
 18006  003554                     l7951:
 18007  003554  0E07               	movlw	7
 18008  003556  6412               	cpfsgt	I2C_Read@n,c
 18009  003558  D001               	goto	l7955
 18010  00355A  D00F               	goto	l7969
 18011  00355C                     l7955:
 18012                           
 18013                           ;I2C.c: 21: {
 18014                           ;I2C.c: 22: i2cHighScl();
 18015  00355C  EC48  F01E         	call	_i2cHighScl	;wreg free
 18016                           
 18017                           ;I2C.c: 24: if (PORTDbits.RD7)
 18018  003560  AE83               	btfss	3971,7,c	;volatile
 18019  003562  D003               	goto	l7961
 18020                           
 18021                           ;I2C.c: 25: inByte = (inByte << 1) | 0x01;
 18022  003564  80D8               	bsf	status,0,c
 18023  003566  3613               	rlcf	I2C_Read@inByte,f,c
 18024  003568  D004               	goto	l7963
 18025  00356A                     l7961:
 18026                           
 18027                           ;I2C.c: 26: else
 18028                           ;I2C.c: 27: inByte = inByte << 1;
 18029  00356A  5013               	movf	I2C_Read@inByte,w,c
 18030  00356C  2413               	addwf	I2C_Read@inByte,w,c
 18031  00356E  6E13               	movwf	I2C_Read@inByte,c
 18032  003570  D000               	goto	l7963
 18033  003572                     l7963:
 18034                           
 18035                           ;I2C.c: 28: i2cLowScl();
 18036  003572  EC71  F01E         	call	_i2cLowScl	;wreg free
 18037  003576  2A12               	incf	I2C_Read@n,f,c
 18038  003578  D7ED               	goto	l7951
 18039  00357A                     l7969:
 18040                           
 18041                           ;I2C.c: 29: }
 18042                           ;I2C.c: 30: if (ack) i2cAck();
 18043  00357A  5011               	movf	I2C_Read@ack,w,c
 18044  00357C  B4D8               	btfsc	status,2,c
 18045  00357E  D003               	goto	l7973
 18046  003580  ECF3  F01D         	call	_i2cAck	;wreg free
 18047  003584  D003               	goto	l7975
 18048  003586                     l7973:
 18049                           
 18050                           ;I2C.c: 31: else i2cNack();
 18051  003586  EC5E  F01E         	call	_i2cNack	;wreg free
 18052  00358A  D000               	goto	l7975
 18053  00358C                     l7975:
 18054                           
 18055                           ;I2C.c: 34: return(inByte);
 18056  00358C  5013               	movf	I2C_Read@inByte,w,c
 18057  00358E  D000               	goto	l87
 18058  003590                     l87:
 18059  003590  0012               	return		;funcret
 18060  003592                     __end_of_I2C_Read:
 18061                           	opt stack 0
 18062                           tblptru	equ	0xFF8
 18063                           tblptrh	equ	0xFF7
 18064                           tblptrl	equ	0xFF6
 18065                           tablat	equ	0xFF5
 18066                           prodh	equ	0xFF4
 18067                           prodl	equ	0xFF3
 18068                           intcon	equ	0xFF2
 18069                           intcon2	equ	0xFF1
 18070                           intcon3	equ	0xFF0
 18071                           postinc0	equ	0xFEE
 18072                           wreg	equ	0xFE8
 18073                           postdec1	equ	0xFE5
 18074                           fsr1l	equ	0xFE1
 18075                           indf2	equ	0xFDF
 18076                           postinc2	equ	0xFDE
 18077                           postdec2	equ	0xFDD
 18078                           fsr2h	equ	0xFDA
 18079                           fsr2l	equ	0xFD9
 18080                           status	equ	0xFD8
 18081                           
 18082 ;; *************** function _i2cNack *****************
 18083 ;; Defined at:
 18084 ;;		line 53 in file "I2C.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;		None
 18087 ;; Auto vars:     Size  Location     Type
 18088 ;;		None
 18089 ;; Return value:  Size  Location     Type
 18090 ;;		None               void
 18091 ;; Registers used:
 18092 ;;		wreg, cstack
 18093 ;; Tracked objects:
 18094 ;;		On entry : 0/0
 18095 ;;		On exit  : 0/0
 18096 ;;		Unchanged: 0/0
 18097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;Total ram usage:        0 bytes
 18103 ;; Hardware stack levels used:    1
 18104 ;; Hardware stack levels required when called:    4
 18105 ;; This function calls:
 18106 ;;		_i2cHighScl
 18107 ;;		_i2cLowScl
 18108 ;; This function is called by:
 18109 ;;		_I2C_Read
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           	psect	text112
 18114  003CBC                     __ptext112:
 18115                           	opt stack 0
 18116  003CBC                     _i2cNack:
 18117                           	opt stack 22
 18118                           
 18119                           ;I2C.c: 55: i2cHighScl();
 18120                           
 18121                           ;incstack = 0
 18122  003CBC  EC48  F01E         	call	_i2cHighScl	;wreg free
 18123                           
 18124                           ;I2C.c: 56: i2cLowScl();
 18125  003CC0  EC71  F01E         	call	_i2cLowScl	;wreg free
 18126  003CC4  0012               	return		;funcret
 18127  003CC6                     __end_of_i2cNack:
 18128                           	opt stack 0
 18129                           tblptru	equ	0xFF8
 18130                           tblptrh	equ	0xFF7
 18131                           tblptrl	equ	0xFF6
 18132                           tablat	equ	0xFF5
 18133                           prodh	equ	0xFF4
 18134                           prodl	equ	0xFF3
 18135                           intcon	equ	0xFF2
 18136                           intcon2	equ	0xFF1
 18137                           intcon3	equ	0xFF0
 18138                           postinc0	equ	0xFEE
 18139                           wreg	equ	0xFE8
 18140                           postdec1	equ	0xFE5
 18141                           fsr1l	equ	0xFE1
 18142                           indf2	equ	0xFDF
 18143                           postinc2	equ	0xFDE
 18144                           postdec2	equ	0xFDD
 18145                           fsr2h	equ	0xFDA
 18146                           fsr2l	equ	0xFD9
 18147                           status	equ	0xFD8
 18148                           
 18149 ;; *************** function _i2cAck *****************
 18150 ;; Defined at:
 18151 ;;		line 59 in file "I2C.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;		None
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;		None
 18156 ;; Return value:  Size  Location     Type
 18157 ;;		None               void
 18158 ;; Registers used:
 18159 ;;		wreg, cstack
 18160 ;; Tracked objects:
 18161 ;;		On entry : 0/0
 18162 ;;		On exit  : 0/0
 18163 ;;		Unchanged: 0/0
 18164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18169 ;;Total ram usage:        0 bytes
 18170 ;; Hardware stack levels used:    1
 18171 ;; Hardware stack levels required when called:    4
 18172 ;; This function calls:
 18173 ;;		_i2cHighScl
 18174 ;;		_i2cHighSda
 18175 ;;		_i2cLowScl
 18176 ;;		_i2cLowSda
 18177 ;; This function is called by:
 18178 ;;		_I2C_Read
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           	psect	text113
 18183  003BE6                     __ptext113:
 18184                           	opt stack 0
 18185  003BE6                     _i2cAck:
 18186                           	opt stack 22
 18187                           
 18188                           ;I2C.c: 61: i2cLowSda();
 18189                           
 18190                           ;incstack = 0
 18191  003BE6  EC63  F01E         	call	_i2cLowSda	;wreg free
 18192                           
 18193                           ;I2C.c: 62: i2cHighScl();
 18194  003BEA  EC48  F01E         	call	_i2cHighScl	;wreg free
 18195                           
 18196                           ;I2C.c: 63: i2cLowScl();
 18197  003BEE  EC71  F01E         	call	_i2cLowScl	;wreg free
 18198                           
 18199                           ;I2C.c: 64: i2cHighSda();
 18200  003BF2  EC75  F01E         	call	_i2cHighSda	;wreg free
 18201  003BF6  0012               	return		;funcret
 18202  003BF8                     __end_of_i2cAck:
 18203                           	opt stack 0
 18204                           tblptru	equ	0xFF8
 18205                           tblptrh	equ	0xFF7
 18206                           tblptrl	equ	0xFF6
 18207                           tablat	equ	0xFF5
 18208                           prodh	equ	0xFF4
 18209                           prodl	equ	0xFF3
 18210                           intcon	equ	0xFF2
 18211                           intcon2	equ	0xFF1
 18212                           intcon3	equ	0xFF0
 18213                           postinc0	equ	0xFEE
 18214                           wreg	equ	0xFE8
 18215                           postdec1	equ	0xFE5
 18216                           fsr1l	equ	0xFE1
 18217                           indf2	equ	0xFDF
 18218                           postinc2	equ	0xFDE
 18219                           postdec2	equ	0xFDD
 18220                           fsr2h	equ	0xFDA
 18221                           fsr2l	equ	0xFD9
 18222                           status	equ	0xFD8
 18223                           
 18224 ;; *************** function _I2C_ReStart *****************
 18225 ;; Defined at:
 18226 ;;		line 75 in file "I2C.c"
 18227 ;; Parameters:    Size  Location     Type
 18228 ;;		None
 18229 ;; Auto vars:     Size  Location     Type
 18230 ;;		None
 18231 ;; Return value:  Size  Location     Type
 18232 ;;		None               void
 18233 ;; Registers used:
 18234 ;;		wreg, cstack
 18235 ;; Tracked objects:
 18236 ;;		On entry : 0/0
 18237 ;;		On exit  : 0/0
 18238 ;;		Unchanged: 0/0
 18239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18244 ;;Total ram usage:        0 bytes
 18245 ;; Hardware stack levels used:    1
 18246 ;; Hardware stack levels required when called:    4
 18247 ;; This function calls:
 18248 ;;		_i2cHighScl
 18249 ;;		_i2cHighSda
 18250 ;;		_i2cLowScl
 18251 ;;		_i2cLowSda
 18252 ;; This function is called by:
 18253 ;;		_I2C_Write_Address_Read_One_Byte
 18254 ;;		_DS1621_Read_Temp
 18255 ;;		_DS3231_Read_Time
 18256 ;;		_DS3231_Read_Alarm_Time
 18257 ;;		_DS3231_Init
 18258 ;;		_I2C_Write_Cmd_Read_One_Byte
 18259 ;; This function uses a non-reentrant model
 18260 ;;
 18261                           
 18262                           	psect	text114
 18263  003ADA                     __ptext114:
 18264                           	opt stack 0
 18265  003ADA                     _I2C_ReStart:
 18266                           	opt stack 23
 18267                           
 18268                           ;I2C.c: 77: i2cLowScl();
 18269                           
 18270                           ;incstack = 0
 18271  003ADA  EC71  F01E         	call	_i2cLowScl	;wreg free
 18272                           
 18273                           ;I2C.c: 78: i2cHighSda();
 18274  003ADE  EC75  F01E         	call	_i2cHighSda	;wreg free
 18275                           
 18276                           ;I2C.c: 79: i2cHighScl();
 18277  003AE2  EC48  F01E         	call	_i2cHighScl	;wreg free
 18278                           
 18279                           ;I2C.c: 80: i2cLowSda();
 18280  003AE6  EC63  F01E         	call	_i2cLowSda	;wreg free
 18281                           
 18282                           ;I2C.c: 81: i2cLowScl();
 18283  003AEA  EC71  F01E         	call	_i2cLowScl	;wreg free
 18284  003AEE  0012               	return		;funcret
 18285  003AF0                     __end_of_I2C_ReStart:
 18286                           	opt stack 0
 18287                           tblptru	equ	0xFF8
 18288                           tblptrh	equ	0xFF7
 18289                           tblptrl	equ	0xFF6
 18290                           tablat	equ	0xFF5
 18291                           prodh	equ	0xFF4
 18292                           prodl	equ	0xFF3
 18293                           intcon	equ	0xFF2
 18294                           intcon2	equ	0xFF1
 18295                           intcon3	equ	0xFF0
 18296                           postinc0	equ	0xFEE
 18297                           wreg	equ	0xFE8
 18298                           postdec1	equ	0xFE5
 18299                           fsr1l	equ	0xFE1
 18300                           indf2	equ	0xFDF
 18301                           postinc2	equ	0xFDE
 18302                           postdec2	equ	0xFDD
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307 ;; *************** function _i2cLowSda *****************
 18308 ;; Defined at:
 18309 ;;		line 98 in file "I2C.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;		None
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;		None               void
 18316 ;; Registers used:
 18317 ;;		None
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18327 ;;Total ram usage:        0 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    3
 18330 ;; This function calls:
 18331 ;;		Nothing
 18332 ;; This function is called by:
 18333 ;;		_I2C_Write
 18334 ;;		_i2cAck
 18335 ;;		_I2C_Start
 18336 ;;		_I2C_ReStart
 18337 ;;		_I2C_Stop
 18338 ;; This function uses a non-reentrant model
 18339 ;;
 18340                           
 18341                           	psect	text115
 18342  003CC6                     __ptext115:
 18343                           	opt stack 0
 18344  003CC6                     _i2cLowSda:
 18345                           	opt stack 23
 18346                           
 18347                           ;I2C.c: 100: PORTDbits.RD7 = 0;
 18348                           
 18349                           ;incstack = 0
 18350  003CC6  9E83               	bcf	3971,7,c	;volatile
 18351                           
 18352                           ;I2C.c: 101: TRISDbits.RD7 = 0;
 18353  003CC8  9E95               	bcf	3989,7,c	;volatile
 18354                           
 18355                           ;I2C.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18356  003CCA  D000               	nop2		;2 cycle nop
 18357  003CCC  D000               	nop2		;2 cycle nop
 18358  003CCE  0012               	return		;funcret
 18359  003CD0                     __end_of_i2cLowSda:
 18360                           	opt stack 0
 18361                           tblptru	equ	0xFF8
 18362                           tblptrh	equ	0xFF7
 18363                           tblptrl	equ	0xFF6
 18364                           tablat	equ	0xFF5
 18365                           prodh	equ	0xFF4
 18366                           prodl	equ	0xFF3
 18367                           intcon	equ	0xFF2
 18368                           intcon2	equ	0xFF1
 18369                           intcon3	equ	0xFF0
 18370                           postinc0	equ	0xFEE
 18371                           wreg	equ	0xFE8
 18372                           postdec1	equ	0xFE5
 18373                           fsr1l	equ	0xFE1
 18374                           indf2	equ	0xFDF
 18375                           postinc2	equ	0xFDE
 18376                           postdec2	equ	0xFDD
 18377                           fsr2h	equ	0xFDA
 18378                           fsr2l	equ	0xFD9
 18379                           status	equ	0xFD8
 18380                           
 18381 ;; *************** function _i2cLowScl *****************
 18382 ;; Defined at:
 18383 ;;		line 111 in file "I2C.c"
 18384 ;; Parameters:    Size  Location     Type
 18385 ;;		None
 18386 ;; Auto vars:     Size  Location     Type
 18387 ;;		None
 18388 ;; Return value:  Size  Location     Type
 18389 ;;		None               void
 18390 ;; Registers used:
 18391 ;;		None
 18392 ;; Tracked objects:
 18393 ;;		On entry : 0/0
 18394 ;;		On exit  : 0/0
 18395 ;;		Unchanged: 0/0
 18396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18401 ;;Total ram usage:        0 bytes
 18402 ;; Hardware stack levels used:    1
 18403 ;; Hardware stack levels required when called:    3
 18404 ;; This function calls:
 18405 ;;		Nothing
 18406 ;; This function is called by:
 18407 ;;		_I2C_Read
 18408 ;;		_I2C_Write
 18409 ;;		_i2cNack
 18410 ;;		_i2cAck
 18411 ;;		_I2C_Start
 18412 ;;		_I2C_ReStart
 18413 ;;		_I2C_Stop
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           	psect	text116
 18418  003CE2                     __ptext116:
 18419                           	opt stack 0
 18420  003CE2                     _i2cLowScl:
 18421                           	opt stack 23
 18422                           
 18423                           ;I2C.c: 113: PORTDbits.RD6 = 0;
 18424                           
 18425                           ;incstack = 0
 18426  003CE2  9C83               	bcf	3971,6,c	;volatile
 18427                           
 18428                           ;I2C.c: 114: TRISDbits.RD6 = 0;
 18429  003CE4  9C95               	bcf	3989,6,c	;volatile
 18430                           
 18431                           ;I2C.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 18432  003CE6  D000               	nop2		;2 cycle nop
 18433  003CE8  0012               	return		;funcret
 18434  003CEA                     __end_of_i2cLowScl:
 18435                           	opt stack 0
 18436                           tblptru	equ	0xFF8
 18437                           tblptrh	equ	0xFF7
 18438                           tblptrl	equ	0xFF6
 18439                           tablat	equ	0xFF5
 18440                           prodh	equ	0xFF4
 18441                           prodl	equ	0xFF3
 18442                           intcon	equ	0xFF2
 18443                           intcon2	equ	0xFF1
 18444                           intcon3	equ	0xFF0
 18445                           postinc0	equ	0xFEE
 18446                           wreg	equ	0xFE8
 18447                           postdec1	equ	0xFE5
 18448                           fsr1l	equ	0xFE1
 18449                           indf2	equ	0xFDF
 18450                           postinc2	equ	0xFDE
 18451                           postdec2	equ	0xFDD
 18452                           fsr2h	equ	0xFDA
 18453                           fsr2l	equ	0xFD9
 18454                           status	equ	0xFD8
 18455                           
 18456 ;; *************** function _i2cHighSda *****************
 18457 ;; Defined at:
 18458 ;;		line 92 in file "I2C.c"
 18459 ;; Parameters:    Size  Location     Type
 18460 ;;		None
 18461 ;; Auto vars:     Size  Location     Type
 18462 ;;		None
 18463 ;; Return value:  Size  Location     Type
 18464 ;;		None               void
 18465 ;; Registers used:
 18466 ;;		None
 18467 ;; Tracked objects:
 18468 ;;		On entry : 0/0
 18469 ;;		On exit  : 0/0
 18470 ;;		Unchanged: 0/0
 18471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18476 ;;Total ram usage:        0 bytes
 18477 ;; Hardware stack levels used:    1
 18478 ;; Hardware stack levels required when called:    3
 18479 ;; This function calls:
 18480 ;;		Nothing
 18481 ;; This function is called by:
 18482 ;;		_I2C_Init
 18483 ;;		_I2C_Read
 18484 ;;		_I2C_Write
 18485 ;;		_i2cAck
 18486 ;;		_I2C_Start
 18487 ;;		_I2C_ReStart
 18488 ;;		_I2C_Stop
 18489 ;; This function uses a non-reentrant model
 18490 ;;
 18491                           
 18492                           	psect	text117
 18493  003CEA                     __ptext117:
 18494                           	opt stack 0
 18495  003CEA                     _i2cHighSda:
 18496                           	opt stack 23
 18497                           
 18498                           ;I2C.c: 94: TRISDbits.RD7 = 1;
 18499                           
 18500                           ;incstack = 0
 18501  003CEA  8E95               	bsf	3989,7,c	;volatile
 18502                           
 18503                           ;I2C.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18504  003CEC  D000               	nop2		;2 cycle nop
 18505  003CEE  D000               	nop2		;2 cycle nop
 18506  003CF0  0012               	return		;funcret
 18507  003CF2                     __end_of_i2cHighSda:
 18508                           	opt stack 0
 18509                           tblptru	equ	0xFF8
 18510                           tblptrh	equ	0xFF7
 18511                           tblptrl	equ	0xFF6
 18512                           tablat	equ	0xFF5
 18513                           prodh	equ	0xFF4
 18514                           prodl	equ	0xFF3
 18515                           intcon	equ	0xFF2
 18516                           intcon2	equ	0xFF1
 18517                           intcon3	equ	0xFF0
 18518                           postinc0	equ	0xFEE
 18519                           wreg	equ	0xFE8
 18520                           postdec1	equ	0xFE5
 18521                           fsr1l	equ	0xFE1
 18522                           indf2	equ	0xFDF
 18523                           postinc2	equ	0xFDE
 18524                           postdec2	equ	0xFDD
 18525                           fsr2h	equ	0xFDA
 18526                           fsr2l	equ	0xFD9
 18527                           status	equ	0xFD8
 18528                           
 18529 ;; *************** function _i2cHighScl *****************
 18530 ;; Defined at:
 18531 ;;		line 105 in file "I2C.c"
 18532 ;; Parameters:    Size  Location     Type
 18533 ;;		None
 18534 ;; Auto vars:     Size  Location     Type
 18535 ;;		None
 18536 ;; Return value:  Size  Location     Type
 18537 ;;		None               void
 18538 ;; Registers used:
 18539 ;;		wreg
 18540 ;; Tracked objects:
 18541 ;;		On entry : 0/0
 18542 ;;		On exit  : 0/0
 18543 ;;		Unchanged: 0/0
 18544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;Total ram usage:        0 bytes
 18550 ;; Hardware stack levels used:    1
 18551 ;; Hardware stack levels required when called:    3
 18552 ;; This function calls:
 18553 ;;		Nothing
 18554 ;; This function is called by:
 18555 ;;		_I2C_Init
 18556 ;;		_I2C_Read
 18557 ;;		_I2C_Write
 18558 ;;		_i2cNack
 18559 ;;		_i2cAck
 18560 ;;		_I2C_Start
 18561 ;;		_I2C_ReStart
 18562 ;;		_I2C_Stop
 18563 ;; This function uses a non-reentrant model
 18564 ;;
 18565                           
 18566                           	psect	text118
 18567  003C90                     __ptext118:
 18568                           	opt stack 0
 18569  003C90                     _i2cHighScl:
 18570                           	opt stack 23
 18571                           
 18572                           ;I2C.c: 107: TRISDbits.RD6 = 1;
 18573                           
 18574                           ;incstack = 0
 18575  003C90  8C95               	bsf	3989,6,c	;volatile
 18576                           
 18577                           ;I2C.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 18578  003C92  0E06               	movlw	6
 18579  003C94                     u7567:
 18580  003C94  2EE8               	decfsz	wreg,f,c
 18581  003C96  D7FE               	goto	u7567
 18582  003C98  D000               	nop2		;nop
 18583  003C9A  0012               	return		;funcret
 18584  003C9C                     __end_of_i2cHighScl:
 18585                           	opt stack 0
 18586                           tblptru	equ	0xFF8
 18587                           tblptrh	equ	0xFF7
 18588                           tblptrl	equ	0xFF6
 18589                           tablat	equ	0xFF5
 18590                           prodh	equ	0xFF4
 18591                           prodl	equ	0xFF3
 18592                           intcon	equ	0xFF2
 18593                           intcon2	equ	0xFF1
 18594                           intcon3	equ	0xFF0
 18595                           postinc0	equ	0xFEE
 18596                           wreg	equ	0xFE8
 18597                           postdec1	equ	0xFE5
 18598                           fsr1l	equ	0xFE1
 18599                           indf2	equ	0xFDF
 18600                           postinc2	equ	0xFDE
 18601                           postdec2	equ	0xFDD
 18602                           fsr2h	equ	0xFDA
 18603                           fsr2l	equ	0xFD9
 18604                           status	equ	0xFD8
 18605                           
 18606 ;; *************** function _chkisr *****************
 18607 ;; Defined at:
 18608 ;;		line 39 in file "Interrupt.c"
 18609 ;; Parameters:    Size  Location     Type
 18610 ;;		None
 18611 ;; Auto vars:     Size  Location     Type
 18612 ;;		None
 18613 ;; Return value:  Size  Location     Type
 18614 ;;		None               void
 18615 ;; Registers used:
 18616 ;;		wreg, status,2, status,0, cstack
 18617 ;; Tracked objects:
 18618 ;;		On entry : 0/0
 18619 ;;		On exit  : 0/0
 18620 ;;		Unchanged: 0/0
 18621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18624 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18625 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18626 ;;Total ram usage:       14 bytes
 18627 ;; Hardware stack levels used:    1
 18628 ;; Hardware stack levels required when called:    2
 18629 ;; This function calls:
 18630 ;;		_INT0_isr
 18631 ;;		_INT1_isr
 18632 ;;		_INT2_isr
 18633 ;;		_TIMER1_isr
 18634 ;; This function is called by:
 18635 ;;		Interrupt level 2
 18636 ;; This function uses a non-reentrant model
 18637 ;;
 18638                           
 18639                           	psect	intcode
 18640  000008                     __pintcode:
 18641                           	opt stack 0
 18642  000008                     _chkisr:
 18643                           	opt stack 18
 18644                           
 18645                           ;incstack = 0
 18646  000008  CFFA F003          	movff	pclath,??_chkisr
 18647  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 18648  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 18649  000014  EDF2  F015         	call	int_func,f	;refresh shadow registers
 18650                           pclatu	equ	0xFFB
 18651                           pclath	equ	0xFFA
 18652                           tblptru	equ	0xFF8
 18653                           tblptrh	equ	0xFF7
 18654                           tblptrl	equ	0xFF6
 18655                           tablat	equ	0xFF5
 18656                           prodh	equ	0xFF4
 18657                           prodl	equ	0xFF3
 18658                           intcon	equ	0xFF2
 18659                           intcon2	equ	0xFF1
 18660                           intcon3	equ	0xFF0
 18661                           postinc0	equ	0xFEE
 18662                           fsr0l	equ	0xFE9
 18663                           wreg	equ	0xFE8
 18664                           postdec1	equ	0xFE5
 18665                           fsr1l	equ	0xFE1
 18666                           indf2	equ	0xFDF
 18667                           postinc2	equ	0xFDE
 18668                           postdec2	equ	0xFDD
 18669                           fsr2h	equ	0xFDA
 18670                           fsr2l	equ	0xFD9
 18671                           status	equ	0xFD8
 18672                           
 18673                           	psect	intcode_body
 18674  002BE4                     __pintcode_body:
 18675                           	opt stack 18
 18676  002BE4                     int_func:
 18677                           	opt stack 18
 18678  002BE4  0006               	pop		; remove dummy address from shadow register refresh
 18679  002BE6  CFEA F006          	movff	fsr0h,??_chkisr+3
 18680  002BEA  CFE1 F007          	movff	fsr1l,??_chkisr+4
 18681  002BEE  CFE2 F008          	movff	fsr1h,??_chkisr+5
 18682  002BF2  CFD9 F009          	movff	fsr2l,??_chkisr+6
 18683  002BF6  CFDA F00A          	movff	fsr2h,??_chkisr+7
 18684  002BFA  CFF3 F00B          	movff	prodl,??_chkisr+8
 18685  002BFE  CFF4 F00C          	movff	prodh,??_chkisr+9
 18686  002C02  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 18687  002C06  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 18688  002C0A  CFF8 F00F          	movff	tblptru,??_chkisr+12
 18689  002C0E  CFF5 F010          	movff	tablat,??_chkisr+13
 18690                           
 18691                           ;Interrupt.c: 41: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 18692  002C12  A09E               	btfss	3998,0,c	;volatile
 18693  002C14  D003               	goto	i2l7507
 18694  002C16  EC4E  F01E         	call	_TIMER1_isr	;wreg free
 18695  002C1A  D000               	goto	i2l7507
 18696  002C1C                     i2l7507:
 18697                           
 18698                           ;Interrupt.c: 42: if (INTCONbits.INT0IF == 1) INT0_isr();
 18699  002C1C  A2F2               	btfss	intcon,1,c	;volatile
 18700  002C1E  D003               	goto	i2l7511
 18701  002C20  ECC7  F00A         	call	_INT0_isr	;wreg free
 18702  002C24  D000               	goto	i2l7511
 18703  002C26                     i2l7511:
 18704                           
 18705                           ;Interrupt.c: 43: if (INTCON3bits.INT1IF == 1) INT1_isr();
 18706  002C26  A0F0               	btfss	intcon3,0,c	;volatile
 18707  002C28  D003               	goto	i2l7515
 18708  002C2A  EC68  F01E         	call	_INT1_isr	;wreg free
 18709  002C2E  D000               	goto	i2l7515
 18710  002C30                     i2l7515:
 18711                           
 18712                           ;Interrupt.c: 44: if (INTCON3bits.INT2IF == 1) INT2_isr();
 18713  002C30  A2F0               	btfss	intcon3,1,c	;volatile
 18714  002C32  D003               	goto	i2l278
 18715  002C34  EC79  F01E         	call	_INT2_isr	;wreg free
 18716  002C38  D000               	goto	i2l278
 18717  002C3A                     i2l278:
 18718  002C3A  C010  FFF5         	movff	??_chkisr+13,tablat
 18719  002C3E  C00F  FFF8         	movff	??_chkisr+12,tblptru
 18720  002C42  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 18721  002C46  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 18722  002C4A  C00C  FFF4         	movff	??_chkisr+9,prodh
 18723  002C4E  C00B  FFF3         	movff	??_chkisr+8,prodl
 18724  002C52  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 18725  002C56  C009  FFD9         	movff	??_chkisr+6,fsr2l
 18726  002C5A  C008  FFE2         	movff	??_chkisr+5,fsr1h
 18727  002C5E  C007  FFE1         	movff	??_chkisr+4,fsr1l
 18728  002C62  C006  FFEA         	movff	??_chkisr+3,fsr0h
 18729  002C66  C005  FFE9         	movff	??_chkisr+2,fsr0l
 18730  002C6A  C004  FFFB         	movff	??_chkisr+1,pclatu
 18731  002C6E  C003  FFFA         	movff	??_chkisr,pclath
 18732  002C72  0011               	retfie		f
 18733  002C74                     __end_of_chkisr:
 18734                           	opt stack 0
 18735                           pclatu	equ	0xFFB
 18736                           pclath	equ	0xFFA
 18737                           tblptru	equ	0xFF8
 18738                           tblptrh	equ	0xFF7
 18739                           tblptrl	equ	0xFF6
 18740                           tablat	equ	0xFF5
 18741                           prodh	equ	0xFF4
 18742                           prodl	equ	0xFF3
 18743                           intcon	equ	0xFF2
 18744                           intcon2	equ	0xFF1
 18745                           intcon3	equ	0xFF0
 18746                           postinc0	equ	0xFEE
 18747                           fsr0h	equ	0xFEA
 18748                           fsr0l	equ	0xFE9
 18749                           wreg	equ	0xFE8
 18750                           postdec1	equ	0xFE5
 18751                           fsr1h	equ	0xFE2
 18752                           fsr1l	equ	0xFE1
 18753                           indf2	equ	0xFDF
 18754                           postinc2	equ	0xFDE
 18755                           postdec2	equ	0xFDD
 18756                           fsr2h	equ	0xFDA
 18757                           fsr2l	equ	0xFD9
 18758                           status	equ	0xFD8
 18759                           
 18760 ;; *************** function _TIMER1_isr *****************
 18761 ;; Defined at:
 18762 ;;		line 47 in file "Interrupt.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;		None
 18765 ;; Auto vars:     Size  Location     Type
 18766 ;;		None
 18767 ;; Return value:  Size  Location     Type
 18768 ;;		None               void
 18769 ;; Registers used:
 18770 ;;		wreg, status,2
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18780 ;;Total ram usage:        0 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; This function calls:
 18783 ;;		Nothing
 18784 ;; This function is called by:
 18785 ;;		_chkisr
 18786 ;; This function uses a non-reentrant model
 18787 ;;
 18788                           
 18789                           	psect	text120
 18790  003C9C                     __ptext120:
 18791                           	opt stack 0
 18792  003C9C                     _TIMER1_isr:
 18793                           	opt stack 19
 18794                           
 18795                           ;Interrupt.c: 49: Nec_state = 0;
 18796                           
 18797                           ;incstack = 0
 18798  003C9C  0E00               	movlw	0
 18799  003C9E  6E51               	movwf	_Nec_state,c
 18800                           
 18801                           ;Interrupt.c: 50: INTCON2bits.INTEDG0 = 0;
 18802  003CA0  9CF1               	bcf	intcon2,6,c	;volatile
 18803                           
 18804                           ;Interrupt.c: 51: T1CONbits.TMR1ON = 0;
 18805  003CA2  90CD               	bcf	4045,0,c	;volatile
 18806                           
 18807                           ;Interrupt.c: 52: PIR1bits.TMR1IF = 0;
 18808  003CA4  909E               	bcf	3998,0,c	;volatile
 18809  003CA6  0012               	return		;funcret
 18810  003CA8                     __end_of_TIMER1_isr:
 18811                           	opt stack 0
 18812                           pclatu	equ	0xFFB
 18813                           pclath	equ	0xFFA
 18814                           tblptru	equ	0xFF8
 18815                           tblptrh	equ	0xFF7
 18816                           tblptrl	equ	0xFF6
 18817                           tablat	equ	0xFF5
 18818                           prodh	equ	0xFF4
 18819                           prodl	equ	0xFF3
 18820                           intcon	equ	0xFF2
 18821                           intcon2	equ	0xFF1
 18822                           intcon3	equ	0xFF0
 18823                           postinc0	equ	0xFEE
 18824                           fsr0h	equ	0xFEA
 18825                           fsr0l	equ	0xFE9
 18826                           wreg	equ	0xFE8
 18827                           postdec1	equ	0xFE5
 18828                           fsr1h	equ	0xFE2
 18829                           fsr1l	equ	0xFE1
 18830                           indf2	equ	0xFDF
 18831                           postinc2	equ	0xFDE
 18832                           postdec2	equ	0xFDD
 18833                           fsr2h	equ	0xFDA
 18834                           fsr2l	equ	0xFD9
 18835                           status	equ	0xFD8
 18836                           
 18837 ;; *************** function _INT2_isr *****************
 18838 ;; Defined at:
 18839 ;;		line 162 in file "Interrupt.c"
 18840 ;; Parameters:    Size  Location     Type
 18841 ;;		None
 18842 ;; Auto vars:     Size  Location     Type
 18843 ;;		None
 18844 ;; Return value:  Size  Location     Type
 18845 ;;		None               void
 18846 ;; Registers used:
 18847 ;;		wreg, status,2
 18848 ;; Tracked objects:
 18849 ;;		On entry : 0/0
 18850 ;;		On exit  : 0/0
 18851 ;;		Unchanged: 0/0
 18852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18857 ;;Total ram usage:        0 bytes
 18858 ;; Hardware stack levels used:    1
 18859 ;; This function calls:
 18860 ;;		Nothing
 18861 ;; This function is called by:
 18862 ;;		_chkisr
 18863 ;; This function uses a non-reentrant model
 18864 ;;
 18865                           
 18866                           	psect	text121
 18867  003CF2                     __ptext121:
 18868                           	opt stack 0
 18869  003CF2                     _INT2_isr:
 18870                           	opt stack 19
 18871                           
 18872                           ;Interrupt.c: 164: INTCON3bits.INT2IF = 0;
 18873                           
 18874                           ;incstack = 0
 18875  003CF2  92F0               	bcf	intcon3,1,c	;volatile
 18876                           
 18877                           ;Interrupt.c: 165: INT2_flag = 1;
 18878  003CF4  0E01               	movlw	1
 18879  003CF6  6E4F               	movwf	_INT2_flag,c
 18880  003CF8  0012               	return		;funcret
 18881  003CFA                     __end_of_INT2_isr:
 18882                           	opt stack 0
 18883                           pclatu	equ	0xFFB
 18884                           pclath	equ	0xFFA
 18885                           tblptru	equ	0xFF8
 18886                           tblptrh	equ	0xFF7
 18887                           tblptrl	equ	0xFF6
 18888                           tablat	equ	0xFF5
 18889                           prodh	equ	0xFF4
 18890                           prodl	equ	0xFF3
 18891                           intcon	equ	0xFF2
 18892                           intcon2	equ	0xFF1
 18893                           intcon3	equ	0xFF0
 18894                           postinc0	equ	0xFEE
 18895                           fsr0h	equ	0xFEA
 18896                           fsr0l	equ	0xFE9
 18897                           wreg	equ	0xFE8
 18898                           postdec1	equ	0xFE5
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           indf2	equ	0xFDF
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           fsr2h	equ	0xFDA
 18905                           fsr2l	equ	0xFD9
 18906                           status	equ	0xFD8
 18907                           
 18908 ;; *************** function _INT1_isr *****************
 18909 ;; Defined at:
 18910 ;;		line 156 in file "Interrupt.c"
 18911 ;; Parameters:    Size  Location     Type
 18912 ;;		None
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;		None
 18915 ;; Return value:  Size  Location     Type
 18916 ;;		None               void
 18917 ;; Registers used:
 18918 ;;		wreg, status,2
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;Total ram usage:        0 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; This function calls:
 18931 ;;		Nothing
 18932 ;; This function is called by:
 18933 ;;		_chkisr
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           	psect	text122
 18938  003CD0                     __ptext122:
 18939                           	opt stack 0
 18940  003CD0                     _INT1_isr:
 18941                           	opt stack 19
 18942                           
 18943                           ;Interrupt.c: 158: INTCON3bits.INT1IF = 0;
 18944                           
 18945                           ;incstack = 0
 18946  003CD0  90F0               	bcf	intcon3,0,c	;volatile
 18947                           
 18948                           ;Interrupt.c: 159: INT1_flag = 1;
 18949  003CD2  0E01               	movlw	1
 18950  003CD4  0100               	movlb	0	; () banked
 18951  003CD6  6FF6               	movwf	_INT1_flag& (0+255),b
 18952                           
 18953                           ; BSR set to: 0
 18954  003CD8  0012               	return		;funcret
 18955  003CDA                     __end_of_INT1_isr:
 18956                           	opt stack 0
 18957                           pclatu	equ	0xFFB
 18958                           pclath	equ	0xFFA
 18959                           tblptru	equ	0xFF8
 18960                           tblptrh	equ	0xFF7
 18961                           tblptrl	equ	0xFF6
 18962                           tablat	equ	0xFF5
 18963                           prodh	equ	0xFF4
 18964                           prodl	equ	0xFF3
 18965                           intcon	equ	0xFF2
 18966                           intcon2	equ	0xFF1
 18967                           intcon3	equ	0xFF0
 18968                           postinc0	equ	0xFEE
 18969                           fsr0h	equ	0xFEA
 18970                           fsr0l	equ	0xFE9
 18971                           wreg	equ	0xFE8
 18972                           postdec1	equ	0xFE5
 18973                           fsr1h	equ	0xFE2
 18974                           fsr1l	equ	0xFE1
 18975                           indf2	equ	0xFDF
 18976                           postinc2	equ	0xFDE
 18977                           postdec2	equ	0xFDD
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function _INT0_isr *****************
 18983 ;; Defined at:
 18984 ;;		line 61 in file "Interrupt.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;		None
 18987 ;; Auto vars:     Size  Location     Type
 18988 ;;		None
 18989 ;; Return value:  Size  Location     Type
 18990 ;;		None               void
 18991 ;; Registers used:
 18992 ;;		wreg, status,2, status,0, cstack
 18993 ;; Tracked objects:
 18994 ;;		On entry : 0/0
 18995 ;;		On exit  : 0/0
 18996 ;;		Unchanged: 0/0
 18997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;Total ram usage:        2 bytes
 19003 ;; Hardware stack levels used:    1
 19004 ;; Hardware stack levels required when called:    1
 19005 ;; This function calls:
 19006 ;;		_force_nec_state0
 19007 ;; This function is called by:
 19008 ;;		_chkisr
 19009 ;; This function uses a non-reentrant model
 19010 ;;
 19011                           
 19012                           	psect	text123
 19013  00158E                     __ptext123:
 19014                           	opt stack 0
 19015  00158E                     _INT0_isr:
 19016                           	opt stack 18
 19017                           
 19018                           ;Interrupt.c: 63: INTCONbits.INT0IF = 0;
 19019                           
 19020                           ; BSR set to: 0
 19021                           ;incstack = 0
 19022  00158E  92F2               	bcf	intcon,1,c	;volatile
 19023                           
 19024                           ;Interrupt.c: 64: if (Nec_state != 0)
 19025  001590  5051               	movf	_Nec_state,w,c
 19026  001592  B4D8               	btfsc	status,2,c
 19027  001594  D0A3               	goto	i2l7025
 19028                           
 19029                           ;Interrupt.c: 65: {
 19030                           ;Interrupt.c: 66: Time_Elapsed = (TMR1H << 8) | TMR1L;
 19031  001596  50CE               	movf	4046,w,c	;volatile
 19032  001598  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 19033  00159C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 19034  00159E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 19035  0015A2  6A01               	clrf	??_INT0_isr,c
 19036  0015A4  1001               	iorwf	??_INT0_isr,w,c
 19037  0015A6  6E47               	movwf	_Time_Elapsed,c
 19038  0015A8  5002               	movf	??_INT0_isr+1,w,c
 19039  0015AA  6E48               	movwf	_Time_Elapsed+1,c
 19040                           
 19041                           ;Interrupt.c: 67: TMR1H = 0;
 19042  0015AC  0E00               	movlw	0
 19043  0015AE  6ECF               	movwf	4047,c	;volatile
 19044                           
 19045                           ;Interrupt.c: 68: TMR1L = 0;
 19046  0015B0  0E00               	movlw	0
 19047  0015B2  6ECE               	movwf	4046,c	;volatile
 19048                           
 19049                           ;Interrupt.c: 69: }
 19050                           ;Interrupt.c: 71: switch(Nec_state)
 19051  0015B4  D093               	goto	i2l7025
 19052  0015B6                     i2l6951:
 19053                           
 19054                           ;Interrupt.c: 74: {
 19055                           ;Interrupt.c: 76: TMR1H = 0;
 19056  0015B6  0E00               	movlw	0
 19057  0015B8  6ECF               	movwf	4047,c	;volatile
 19058                           
 19059                           ;Interrupt.c: 77: TMR1L = 0;
 19060  0015BA  0E00               	movlw	0
 19061  0015BC  6ECE               	movwf	4046,c	;volatile
 19062                           
 19063                           ;Interrupt.c: 78: PIR1bits.TMR1IF = 0;
 19064  0015BE  909E               	bcf	3998,0,c	;volatile
 19065                           
 19066                           ;Interrupt.c: 79: T1CON= 0x90;
 19067  0015C0  0E90               	movlw	144
 19068  0015C2  6ECD               	movwf	4045,c	;volatile
 19069                           
 19070                           ;Interrupt.c: 80: T1CONbits.TMR1ON = 1;
 19071  0015C4  80CD               	bsf	4045,0,c	;volatile
 19072                           
 19073                           ;Interrupt.c: 81: bit_count = 0;
 19074  0015C6  0E00               	movlw	0
 19075  0015C8  6E59               	movwf	_bit_count,c
 19076                           
 19077                           ;Interrupt.c: 82: Nec_code = 0;
 19078  0015CA  0E00               	movlw	0
 19079  0015CC  0100               	movlb	0	; () banked
 19080  0015CE  6FE3               	movwf	_Nec_code& (0+255),b
 19081  0015D0  0E00               	movlw	0
 19082  0015D2  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19083  0015D4  0E00               	movlw	0
 19084  0015D6  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19085  0015D8  0E00               	movlw	0
 19086  0015DA  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19087                           
 19088                           ;Interrupt.c: 83: Nec_state = 1;
 19089  0015DC  0E01               	movlw	1
 19090  0015DE  6E51               	movwf	_Nec_state,c
 19091  0015E0  D07B               	goto	i2l7019
 19092                           
 19093                           ; BSR set to: 0
 19094                           ;Interrupt.c: 85: return;
 19095                           
 19096                           ; BSR set to: 0
 19097                           ;Interrupt.c: 84: INTCON2bits.INTEDG0 = 1;
 19098  0015E2  D08D               	goto	i2l290
 19099  0015E4                     i2l6961:
 19100                           
 19101                           ;Interrupt.c: 89: {
 19102                           ;Interrupt.c: 90: if (Time_Elapsed > 8500 && Time_Elapsed < 9500){
 19103  0015E4  0E35               	movlw	53
 19104  0015E6  5C47               	subwf	_Time_Elapsed,w,c
 19105  0015E8  0E21               	movlw	33
 19106  0015EA  5848               	subwfb	_Time_Elapsed+1,w,c
 19107  0015EC  A0D8               	btfss	status,0,c
 19108  0015EE  D009               	goto	i2l6967
 19109  0015F0  0E1C               	movlw	28
 19110  0015F2  5C47               	subwf	_Time_Elapsed,w,c
 19111  0015F4  0E25               	movlw	37
 19112  0015F6  5848               	subwfb	_Time_Elapsed+1,w,c
 19113  0015F8  B0D8               	btfsc	status,0,c
 19114  0015FA  D003               	goto	i2l6967
 19115                           
 19116                           ;Interrupt.c: 91: Nec_state = 2;
 19117  0015FC  0E02               	movlw	2
 19118  0015FE  6E51               	movwf	_Nec_state,c
 19119                           
 19120                           ;Interrupt.c: 92: }
 19121  001600  D02A               	goto	i2l6993
 19122  001602                     i2l6967:
 19123                           
 19124                           ;Interrupt.c: 93: else{
 19125                           ;Interrupt.c: 94: force_nec_state0();
 19126  001602  EC7D  F01E         	call	_force_nec_state0	;wreg free
 19127  001606  D027               	goto	i2l6993
 19128  001608  D026               	goto	i2l6993
 19129                           
 19130                           ;Interrupt.c: 97: return;
 19131                           
 19132                           ;Interrupt.c: 95: }
 19133                           ;Interrupt.c: 96: INTCON2bits.INTEDG0 = 0;
 19134  00160A  D079               	goto	i2l290
 19135  00160C                     i2l6973:
 19136                           
 19137                           ;Interrupt.c: 101: {
 19138                           ;Interrupt.c: 102: if (Time_Elapsed > 4000 && Time_Elapsed < 5000){
 19139  00160C  0EA1               	movlw	161
 19140  00160E  5C47               	subwf	_Time_Elapsed,w,c
 19141  001610  0E0F               	movlw	15
 19142  001612  5848               	subwfb	_Time_Elapsed+1,w,c
 19143  001614  A0D8               	btfss	status,0,c
 19144  001616  D009               	goto	i2l6979
 19145  001618  0E88               	movlw	136
 19146  00161A  5C47               	subwf	_Time_Elapsed,w,c
 19147  00161C  0E13               	movlw	19
 19148  00161E  5848               	subwfb	_Time_Elapsed+1,w,c
 19149  001620  B0D8               	btfsc	status,0,c
 19150  001622  D003               	goto	i2l6979
 19151  001624                     
 19152                           ;Interrupt.c: 103: Nec_state = 3;
 19153  001624  0E03               	movlw	3
 19154  001626  6E51               	movwf	_Nec_state,c
 19155                           
 19156                           ;Interrupt.c: 104: }
 19157  001628  D057               	goto	i2l7019
 19158  00162A                     i2l6979:
 19159                           
 19160                           ;Interrupt.c: 105: else{
 19161                           ;Interrupt.c: 106: force_nec_state0();
 19162  00162A  EC7D  F01E         	call	_force_nec_state0	;wreg free
 19163  00162E  D054               	goto	i2l7019
 19164  001630  D053               	goto	i2l7019
 19165                           
 19166                           ;Interrupt.c: 109: return;
 19167                           
 19168                           ;Interrupt.c: 107: }
 19169                           ;Interrupt.c: 108: INTCON2bits.INTEDG0 = 1;
 19170  001632  D065               	goto	i2l290
 19171  001634                     i2l6985:
 19172                           
 19173                           ;Interrupt.c: 113: {
 19174                           ;Interrupt.c: 114: if (Time_Elapsed > 400 && Time_Elapsed < 700){
 19175  001634  0E91               	movlw	145
 19176  001636  5C47               	subwf	_Time_Elapsed,w,c
 19177  001638  0E01               	movlw	1
 19178  00163A  5848               	subwfb	_Time_Elapsed+1,w,c
 19179  00163C  A0D8               	btfss	status,0,c
 19180  00163E  D008               	goto	i2l6991
 19181  001640  0EBC               	movlw	188
 19182  001642  5C47               	subwf	_Time_Elapsed,w,c
 19183  001644  0E02               	movlw	2
 19184  001646  5848               	subwfb	_Time_Elapsed+1,w,c
 19185  001648  B0D8               	btfsc	status,0,c
 19186  00164A  D002               	goto	i2l6991
 19187                           
 19188                           ;Interrupt.c: 115: Nec_state = 4;
 19189  00164C  0E04               	movlw	4
 19190  00164E  D7D7               	goto	L15
 19191  001650                     i2l6991:
 19192                           
 19193                           ;Interrupt.c: 117: else{
 19194                           ;Interrupt.c: 118: force_nec_state0();
 19195  001650  EC7D  F01E         	call	_force_nec_state0	;wreg free
 19196  001654  D000               	goto	i2l6993
 19197  001656                     i2l6993:
 19198                           
 19199                           ;Interrupt.c: 119: }
 19200                           ;Interrupt.c: 120: INTCON2bits.INTEDG0 = 0;
 19201  001656  9CF1               	bcf	intcon2,6,c	;volatile
 19202                           
 19203                           ;Interrupt.c: 121: return;
 19204  001658  D052               	goto	i2l290
 19205  00165A                     i2l6997:
 19206                           
 19207                           ;Interrupt.c: 125: {
 19208                           ;Interrupt.c: 126: if (Time_Elapsed > 400 && Time_Elapsed < 1800){
 19209  00165A  0E91               	movlw	145
 19210  00165C  5C47               	subwf	_Time_Elapsed,w,c
 19211  00165E  0E01               	movlw	1
 19212  001660  5848               	subwfb	_Time_Elapsed+1,w,c
 19213  001662  A0D8               	btfss	status,0,c
 19214  001664  D034               	goto	i2l7015
 19215  001666  0E08               	movlw	8
 19216  001668  5C47               	subwf	_Time_Elapsed,w,c
 19217  00166A  0E07               	movlw	7
 19218  00166C  5848               	subwfb	_Time_Elapsed+1,w,c
 19219  00166E  B0D8               	btfsc	status,0,c
 19220  001670  D02E               	goto	i2l7015
 19221                           
 19222                           ;Interrupt.c: 128: Nec_code = Nec_code << 1;
 19223  001672  90D8               	bcf	status,0,c
 19224  001674  0100               	movlb	0	; () banked
 19225  001676  35E3               	rlcf	_Nec_code& (0+255),w,b
 19226  001678  0100               	movlb	0	; () banked
 19227  00167A  6FE3               	movwf	_Nec_code& (0+255),b
 19228  00167C  0100               	movlb	0	; () banked
 19229  00167E  35E4               	rlcf	(_Nec_code+1)& (0+255),w,b
 19230  001680  0100               	movlb	0	; () banked
 19231  001682  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19232  001684  0100               	movlb	0	; () banked
 19233  001686  35E5               	rlcf	(_Nec_code+2)& (0+255),w,b
 19234  001688  0100               	movlb	0	; () banked
 19235  00168A  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19236  00168C  0100               	movlb	0	; () banked
 19237  00168E  35E6               	rlcf	(_Nec_code+3)& (0+255),w,b
 19238  001690  0100               	movlb	0	; () banked
 19239  001692  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19240                           
 19241                           ;Interrupt.c: 130: if(Time_Elapsed > 1000){
 19242  001694  0EE9               	movlw	233
 19243  001696  5C47               	subwf	_Time_Elapsed,w,c
 19244  001698  0E03               	movlw	3
 19245  00169A  5848               	subwfb	_Time_Elapsed+1,w,c
 19246  00169C  A0D8               	btfss	status,0,c
 19247  00169E  D008               	goto	i2l7005
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;Interrupt.c: 131: Nec_code++;
 19251  0016A0  0E01               	movlw	1
 19252  0016A2  0100               	movlb	0	; () banked
 19253  0016A4  27E3               	addwf	_Nec_code& (0+255),f,b
 19254  0016A6  0E00               	movlw	0
 19255  0016A8  23E4               	addwfc	(_Nec_code+1)& (0+255),f,b
 19256  0016AA  23E5               	addwfc	(_Nec_code+2)& (0+255),f,b
 19257  0016AC  23E6               	addwfc	(_Nec_code+3)& (0+255),f,b
 19258  0016AE  D000               	goto	i2l7005
 19259  0016B0                     i2l7005:
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;Interrupt.c: 132: }
 19263                           ;Interrupt.c: 134: bit_count++;
 19264  0016B0  2A59               	incf	_bit_count,f,c
 19265                           
 19266                           ; BSR set to: 0
 19267                           ;Interrupt.c: 136: if(bit_count > 31){
 19268  0016B2  0E1F               	movlw	31
 19269  0016B4  6459               	cpfsgt	_bit_count,c
 19270  0016B6  D7B6               	goto	L16
 19271                           
 19272                           ; BSR set to: 0
 19273                           ;Interrupt.c: 138: nec_ok = 1;
 19274  0016B8  0E00               	movlw	0
 19275  0016BA  0100               	movlb	0	; () banked
 19276  0016BC  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 19277  0016BE  0E01               	movlw	1
 19278  0016C0  6FF2               	movwf	_nec_ok& (0+255),b
 19279                           
 19280                           ; BSR set to: 0
 19281                           ;Interrupt.c: 139: INTCONbits.INT0IE = 0;
 19282  0016C2  98F2               	bcf	intcon,4,c	;volatile
 19283                           
 19284                           ;Interrupt.c: 140: Nec_state = 0;
 19285  0016C4  0E00               	movlw	0
 19286  0016C6  6E51               	movwf	_Nec_state,c
 19287                           
 19288                           ; BSR set to: 0
 19289                           ;Interrupt.c: 141: Nec_code1 = (char) ((Nec_code >> 8));
 19290  0016C8  C0E4  F050         	movff	_Nec_code+1,_Nec_code1
 19291  0016CC  D7AB               	goto	L16
 19292  0016CE                     i2l7015:
 19293                           
 19294                           ;Interrupt.c: 146: else {
 19295                           ;Interrupt.c: 147: force_nec_state0();
 19296  0016CE  EC7D  F01E         	call	_force_nec_state0	;wreg free
 19297                           
 19298                           ;Interrupt.c: 148: Nec_code1 = (char) ((Nec_code >> 8));
 19299  0016D2  C0E4  F050         	movff	_Nec_code+1,_Nec_code1
 19300  0016D6  D000               	goto	i2l7019
 19301  0016D8                     i2l7019:
 19302                           
 19303                           ;Interrupt.c: 149: }
 19304                           ;Interrupt.c: 150: INTCON2bits.INTEDG0 = 1;
 19305  0016D8  8CF1               	bsf	intcon2,6,c	;volatile
 19306                           
 19307                           ;Interrupt.c: 152: }
 19308                           ;Interrupt.c: 153: }
 19309                           
 19310                           ;Interrupt.c: 151: return;
 19311  0016DA  D011               	goto	i2l290
 19312  0016DC                     i2l7025:
 19313  0016DC  5051               	movf	_Nec_state,w,c
 19314                           
 19315                           ; Switch size 1, requested type "space"
 19316                           ; Number of cases is 5, Range of values is 0 to 4
 19317                           ; switch strategies available:
 19318                           ; Name         Instructions Cycles
 19319                           ; simple_byte           16     9 (average)
 19320                           ;	Chosen strategy is simple_byte
 19321  0016DE  0A00               	xorlw	0	; case 0
 19322  0016E0  B4D8               	btfsc	status,2,c
 19323  0016E2  D769               	goto	i2l6951
 19324  0016E4  0A01               	xorlw	1	; case 1
 19325  0016E6  B4D8               	btfsc	status,2,c
 19326  0016E8  D77D               	goto	i2l6961
 19327  0016EA  0A03               	xorlw	3	; case 2
 19328  0016EC  B4D8               	btfsc	status,2,c
 19329  0016EE  D78E               	goto	i2l6973
 19330  0016F0  0A01               	xorlw	1	; case 3
 19331  0016F2  B4D8               	btfsc	status,2,c
 19332  0016F4  D79F               	goto	i2l6985
 19333  0016F6  0A07               	xorlw	7	; case 4
 19334  0016F8  B4D8               	btfsc	status,2,c
 19335  0016FA  D7AF               	goto	i2l6997
 19336  0016FC  D000               	goto	i2l290
 19337  0016FE                     i2l290:
 19338  0016FE  0012               	return		;funcret
 19339  001700                     __end_of_INT0_isr:
 19340                           	opt stack 0
 19341                           pclatu	equ	0xFFB
 19342                           pclath	equ	0xFFA
 19343                           tblptru	equ	0xFF8
 19344                           tblptrh	equ	0xFF7
 19345                           tblptrl	equ	0xFF6
 19346                           tablat	equ	0xFF5
 19347                           prodh	equ	0xFF4
 19348                           prodl	equ	0xFF3
 19349                           intcon	equ	0xFF2
 19350                           intcon2	equ	0xFF1
 19351                           intcon3	equ	0xFF0
 19352                           postinc0	equ	0xFEE
 19353                           fsr0h	equ	0xFEA
 19354                           fsr0l	equ	0xFE9
 19355                           wreg	equ	0xFE8
 19356                           postdec1	equ	0xFE5
 19357                           fsr1h	equ	0xFE2
 19358                           fsr1l	equ	0xFE1
 19359                           indf2	equ	0xFDF
 19360                           postinc2	equ	0xFDE
 19361                           postdec2	equ	0xFDD
 19362                           fsr2h	equ	0xFDA
 19363                           fsr2l	equ	0xFD9
 19364                           status	equ	0xFD8
 19365                           
 19366 ;; *************** function _force_nec_state0 *****************
 19367 ;; Defined at:
 19368 ;;		line 55 in file "Interrupt.c"
 19369 ;; Parameters:    Size  Location     Type
 19370 ;;		None
 19371 ;; Auto vars:     Size  Location     Type
 19372 ;;		None
 19373 ;; Return value:  Size  Location     Type
 19374 ;;		None               void
 19375 ;; Registers used:
 19376 ;;		wreg, status,2
 19377 ;; Tracked objects:
 19378 ;;		On entry : 0/0
 19379 ;;		On exit  : 0/0
 19380 ;;		Unchanged: 0/0
 19381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19386 ;;Total ram usage:        0 bytes
 19387 ;; Hardware stack levels used:    1
 19388 ;; This function calls:
 19389 ;;		Nothing
 19390 ;; This function is called by:
 19391 ;;		_INT0_isr
 19392 ;; This function uses a non-reentrant model
 19393 ;;
 19394                           
 19395                           	psect	text124
 19396  003CFA                     __ptext124:
 19397                           	opt stack 0
 19398  003CFA                     _force_nec_state0:
 19399                           	opt stack 18
 19400                           
 19401                           ;Interrupt.c: 57: Nec_state=0;
 19402                           
 19403                           ;incstack = 0
 19404  003CFA  0E00               	movlw	0
 19405  003CFC  6E51               	movwf	_Nec_state,c
 19406                           
 19407                           ;Interrupt.c: 58: T1CONbits.TMR1ON = 0;
 19408  003CFE  90CD               	bcf	4045,0,c	;volatile
 19409  003D00  0012               	return		;funcret
 19410  003D02                     __end_of_force_nec_state0:
 19411                           	opt stack 0
 19412                           pclatu	equ	0xFFB
 19413                           pclath	equ	0xFFA
 19414                           tblptru	equ	0xFF8
 19415                           tblptrh	equ	0xFF7
 19416                           tblptrl	equ	0xFF6
 19417                           tablat	equ	0xFF5
 19418                           prodh	equ	0xFF4
 19419                           prodl	equ	0xFF3
 19420                           intcon	equ	0xFF2
 19421                           intcon2	equ	0xFF1
 19422                           intcon3	equ	0xFF0
 19423                           postinc0	equ	0xFEE
 19424                           fsr0h	equ	0xFEA
 19425                           fsr0l	equ	0xFE9
 19426                           wreg	equ	0xFE8
 19427                           postdec1	equ	0xFE5
 19428                           fsr1h	equ	0xFE2
 19429                           fsr1l	equ	0xFE1
 19430                           indf2	equ	0xFDF
 19431                           postinc2	equ	0xFDE
 19432                           postdec2	equ	0xFDD
 19433                           fsr2h	equ	0xFDA
 19434                           fsr2l	equ	0xFD9
 19435                           status	equ	0xFD8
 19436                           pclatu	equ	0xFFB
 19437                           pclath	equ	0xFFA
 19438                           tblptru	equ	0xFF8
 19439                           tblptrh	equ	0xFF7
 19440                           tblptrl	equ	0xFF6
 19441                           tablat	equ	0xFF5
 19442                           prodh	equ	0xFF4
 19443                           prodl	equ	0xFF3
 19444                           intcon	equ	0xFF2
 19445                           intcon2	equ	0xFF1
 19446                           intcon3	equ	0xFF0
 19447                           postinc0	equ	0xFEE
 19448                           fsr0h	equ	0xFEA
 19449                           fsr0l	equ	0xFE9
 19450                           wreg	equ	0xFE8
 19451                           postdec1	equ	0xFE5
 19452                           fsr1h	equ	0xFE2
 19453                           fsr1l	equ	0xFE1
 19454                           indf2	equ	0xFDF
 19455                           postinc2	equ	0xFDE
 19456                           postdec2	equ	0xFDD
 19457                           fsr2h	equ	0xFDA
 19458                           fsr2l	equ	0xFD9
 19459                           status	equ	0xFD8
 19460                           
 19461                           	psect	rparam
 19462  0000                     pclatu	equ	0xFFB
 19463                           pclath	equ	0xFFA
 19464                           tblptru	equ	0xFF8
 19465                           tblptrh	equ	0xFF7
 19466                           tblptrl	equ	0xFF6
 19467                           tablat	equ	0xFF5
 19468                           prodh	equ	0xFF4
 19469                           prodl	equ	0xFF3
 19470                           intcon	equ	0xFF2
 19471                           intcon2	equ	0xFF1
 19472                           intcon3	equ	0xFF0
 19473                           postinc0	equ	0xFEE
 19474                           fsr0h	equ	0xFEA
 19475                           fsr0l	equ	0xFE9
 19476                           wreg	equ	0xFE8
 19477                           postdec1	equ	0xFE5
 19478                           fsr1h	equ	0xFE2
 19479                           fsr1l	equ	0xFE1
 19480                           indf2	equ	0xFDF
 19481                           postinc2	equ	0xFDE
 19482                           postdec2	equ	0xFDD
 19483                           fsr2h	equ	0xFDA
 19484                           fsr2l	equ	0xFD9
 19485                           status	equ	0xFD8


Data Sizes:
    Strings     373
    Constant    493
    Data        152
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     111
    BANK0           128      5     128
    BANK1           256     12      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_35(CODE[5]), STR_34(CODE[5]), STR_33(CODE[12]), STR_32(CODE[21]), 
		 -> STR_31(CODE[16]), STR_30(CODE[10]), STR_29(CODE[11]), STR_28(CODE[21]), 
		 -> STR_26(CODE[5]), STR_25(CODE[8]), STR_24(CODE[8]), STR_23(CODE[20]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[5]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[7]), STR_13(CODE[13]), STR_12(CODE[9]), STR_11(CODE[11]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[2]), STR_7(CODE[3]), 
		 -> STR_6(CODE[13]), STR_5(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_37(CODE[22]), STR_36(CODE[16]), STR_27(CODE[11]), STR_4(CODE[20]), 
		 -> STR_3(CODE[24]), STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _get_RPM->___awdiv
    _Update_Screen->___awmod
    _Update_Screen->_drawtext
    _Test_Alarm->_read_volt
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _clr_alarm->_Set_Alarm_RGB_Color
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Heater->_do_update_pwm
    _Turn_On_Fan->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Time_Screen->___awmod
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->___awmod
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_Wait_One_Sec
    _Do_Beep_Bad->_Wait_One_Sec
    _Update_Setup_Alarm_Time_Screen->___awmod
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_read_volt
    _Update_Screen->_drawtext
    _Test_Alarm->_read_volt
    _Initialize_Setup_Time_Screen->_drawtext
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Initialize_Setup_Heater_Screen->_drawtext
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _Update_Setup_Alarm_Time_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Monitor_Heater->_do_update_pwm
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _Update_Setup_Alarm_Time_Screen->_drawtext

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1076659
                                             10 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                _Set_Alarm_RGB_Color
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    4871
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        5     5      0   48055
                                              2 BANK0      2     2      0
                                              7 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           2     2      0   15951
                                             61 COMRAM     2     2      0
                    _Activate_Buzzer
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                _Set_Alarm_RGB_Color
                      _Wait_Half_Sec
                             ___ftge
                          _clr_alarm
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    6348
                                             58 COMRAM     3     0      3
                                              0 BANK0      5     5      0
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2266
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _clr_alarm                                            0     0      0     176
                  _Deactivate_Buzzer
                _Set_Alarm_RGB_Color
 ---------------------------------------------------------------------------------
 (3) _Set_Alarm_RGB_Color                                  1     1      0     176
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     242
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Sec                                        2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     185
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0   17792
                       _Turn_Off_Fan
                        _Turn_On_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       5     1      4     194
                                             16 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8799
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0    8799
                                             58 COMRAM     3     3      0
                                              0 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                             43 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3036
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2838
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  313643
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40249
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   61182
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7675
                                              3 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40249
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40249
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  271336
                                              7 BANK1      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39267
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   40351
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   40351
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   40351
                                              2 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  325834
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    3910
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   44026
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   62042
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   53077
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2182
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2182
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8105
                                              3 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7474
                                              0 BANK0      4     2      2
                                              0 BANK1      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0      46
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0      46
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   44026
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   44026
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3777
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32871
                                             56 COMRAM     8     0      8
                                              0 BANK0      2     2      0
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18314
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1142
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3683
                                             58 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3695
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1019
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Set_Alarm_RGB_Color
   _Set_RPM_RGB
   _Test_Alarm
     _Activate_Buzzer
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_Alarm_RGB_Color
     _Wait_Half_Sec
     ___ftge
     _clr_alarm
       _Deactivate_Buzzer
       _Set_Alarm_RGB_Color
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
   _Toggle_Heater
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C      40       7       25.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      5      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12F      34        0.0%
DATA                 0      0     12F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Dec 01 20:28:59 2021

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                        ?_Set_Alarm_RGB_Color 0001                            __size_of_I2C_Start 0012  
                                 _SSPSTATbits 000FC7                            __size_of_I2C_Write 003E  
                                drawCircle@x0 001C                                  drawCircle@y0 001E  
                                          l33 3848                                            l41 35D2  
                                          l28 3744                                            l38 3B78  
                                          l57 3046                                            l90 369E  
                                          l87 3590                  __size_of_Do_Setup_Alarm_Time 00BE  
                                ___awdiv@sign 001C                          __size_of_Turn_On_Fan 0010  
                               read_volt@volt 00FB                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 00FD                                           l202 3780  
                                         l124 37E6                                           l520 3C78  
                                         l802 23FA                                           l803 2366  
                                         l564 1D9A                                           l813 131E  
                                         l805 23D6                                           l806 23F8  
                                         l743 3878                                           l749 2CFA  
                                         l765 1854                                           l774 17AA  
                                         l767 172E                                           _FAN 004D  
                                         l689 337A                                           l699 3B4E  
                                         _PR2 000FCB                                read_volt@nStep 00FE  
                        DS3231_Init@Address_7 0017                          DS3231_Init@Address_E 0018  
                                         _day 005B                             _Deactivate_Buzzer 3CDA  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 005C                                           _nbr 00F0  
                                         _rpm 0049                         __size_of_Turn_Off_Fan 000A  
                                         _rps 00F4                                           _txt 004B  
                                ___awmod@sign 0040                                           wreg 000FE8  
                               _Increase_Time 2CFC                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 33D0  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 38D0                                  ___ftdiv@cntr 0035  
                                ___ftdiv@sign 003A                                  __CFG_WDT$OFF 000000  
                              drawFastVLine@h 0019                                          l2016 322A  
                                        l1320 310E                                          l1313 2BE2  
                                        l2026 34AC                                          l1420 0ABC  
                                        l1317 38CE                                          l1334 39CE  
                                        l1238 10A6                                          l2055 368E  
                                        l1249 125A                                          l1339 3A0C  
                              drawFastVLine@x 0022                                drawFastVLine@y 0018  
                                        l1711 3708                                          l1376 2F6A  
                                        l1481 2F98                                          l1457 0D14  
                                        l1801 258A                                          l1385 3926  
                                        l1490 2FDA                                          l1379 30AA  
                                        l1812 2562                                          l1388 3946  
                                        l1485 2FB2                                          l1493 3920  
                                        l1486 2FB4                                          l1487 2FBE  
                                        l1488 2FC0                                          l1924 398E  
                                        l1909 215C                                          l1686 2A2E  
                                        l1950 396C                                          l1873 223E  
                                        l1882 2998                                          l1699 2E84  
                                        l1876 220A                                          l6221 2F30  
                                        l6213 2F12                                          l5511 3200  
                                        l1888 1E92                                          l6161 2F88  
                                        l6233 2F5A                                          l6225 2F3C  
                                        l6217 2F22                                          l6209 2F06  
                                        l5507 31EE                                          l5531 348A  
                                        l6165 2F90                                          l6157 2F7E  
                                        l5509 31F8                                          l5381 3986  
                                        l6405 3722                                          l6229 2F4A  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5519 321E  
                                        l5535 34A0                                          l5527 3478  
                                        l6177 2FAA                                          l6169 2F9C  
                                        l5529 3482                                          l6409 373C  
                                        l8131 172A                                          l8123 1710  
                                        l8141 176A                                          l8133 1732  
                                        l6373 39C6                                          l8213 23E4  
                                        l8205 23CC                                          l9021 0F8C  
                                        l8311 2E1A                                          l8143 179E  
                                        l8127 171C                                          l9031 103E  
                                        l9015 0EFA                                          l8231 24E6  
                                        l8321 2E40                                          l8161 1820  
                                        l8153 17CC                                          l8145 17A2  
                                        l8137 173A                                          l6369 39B8  
                                        l8209 23DA                                          l9025 0FC8  
                                        l9041 10B4                                          l8241 254A  
                                        l8233 24F2                                          l8323 2E48  
                                        l8331 2E6A                                          l8315 2E28  
                                        l8163 1848                                          l8155 17F4  
                                        l8411 0A04                                          l8403 09D6  
                                        l8219 23F4                                          l9019 0F56  
                                        l9051 117C                                          l9043 10EA  
                                        l8243 2556                                          l8235 2512  
                                        l8227 24D6                                          l8501 0C14  
                                        l8405 09E4                                          l9029 1004  
                                        l9037 107E                                          l9053 11B6  
                                        l6565 39F8                                          l8335 2E7A  
                                        l8327 2E5E                                          l8319 2E36  
                                        l8175 365C                                          l8511 0C48  
                                        l8423 0A86                                          l8415 0A22  
                                        l9047 1126                                          l9063 1232  
                                        l9223 3A9E                                          l8255 257C  
                                        l8239 252A                                          l6911 300C  
                                        l8281 29E2                                          l8273 29C2  
                                        l8169 1850                                          l8177 3662  
                                        l8513 0C8C                                          l8521 0CE4  
                                        l8505 0C2C                                          l8409 09EE  
                                        l8193 239E                                          l9233 3ABA  
                                        l9057 11F6                                          l9225 3AA2  
                                        l9401 2AE6                                          l8249 256A  
                                        l6905 2FE8                                          l6569 3A06  
                                        l8291 2A08                                          l8283 29EA  
                                        l8267 29B0                                          l8523 0CEC  
                                        l8443 0B04                                          l8427 0A8E  
                                        l9243 3384                                          l8611 1304  
                                        l8187 2330                                          l9331 3B3A  
                                        l9411 2B02                                          l6915 302C  
                                        l8509 0C40                                          l8453 0B38  
                                        l8445 0B08                                          l8525 0CF8  
                                        l9253 33A0                                          l9173 2B8A  
                                        l9413 2B06                                          l9405 2AF2  
                                        l6917 3030                                          l6909 3006  
                                        l8279 29D8                                          l8295 2A14  
                                        l8519 0CD2                                          l8463 0B4E  
                                        l8439 0AEA                                          l9255 33A4  
                                        l9247 3390                                          l9263 33B4  
                                        l9183 2BC0                                          l9423 2B22  
                                        l9407 2AF6                                          l6863 2936  
                                        l8481 0BA6                                          l8457 0B3E  
                                        l8449 0B14                                          l8473 0B78  
                                        l9249 3394                                          l9265 33CA  
                                        l8553 37F2                                          l9281 34D6  
                                        l9177 2B9E                                          l9417 2B12  
                                        l9433 2CFE                                          l8721 1E3E  
                                        l8713 1E16                                          l6873 2994  
                                        l9097 36E4                                          l8299 2A24  
                                        l8467 0B72                                          l8459 0B42  
                                        l8475 0B8A                                          l9259 33B0  
                                        l8555 37FC                                          l9275 34C8  
                                        l9291 34FA                                          l9187 2BC8  
                                        l9339 3B12                                          l9419 2B16  
                                        l9427 2B26                                          l9371 3A72  
                                        l9451 2D28                                          l8731 1E6C  
                                        l8723 1E44                                          l6867 2968  
                                        l9603 1D8A                                          l7933 385A  
                                        l7941 350A                                          l8581 1900  
                                        l8565 1882                                          l8493 0BEC  
                                        l8485 0BCA                                          l9269 34B8  
                                        l9197 2BDE                                          l9429 2B4E  
                                        l9445 2D1A                                          l8653 21A4  
                                        l8717 1E28                                          l8741 2096  
                                        l9621 00A0                                          l7951 3554  
                                        l8591 195A                                          l8495 0BF4  
                                        l8487 0BD4                                          l8399 09C6  
                                        l8639 13F4                                          l9463 2D44  
                                        l9439 2D0C                                          l9471 2D52  
                                        l8647 217C                                          l8727 1E56  
                                        l9631 010A                                          l9615 0060  
                                        l7961 356A                                          l7945 3526  
                                        l8577 18E2                                          l9289 34E4  
                                        l9393 2AD2                                          l9369 3A6E  
                                        l9457 2D36                                          l9473 2D7A  
                                        l8673 21E4                                          l8649 2196  
                                        l9561 1CCC                                          l9553 1CA8  
                                        l6889 3B72                                          l7963 3572  
                                        l7955 355C                                          l7883 2CBC  
                                        l8499 0C0C                                          l9395 2AD6  
                                        l9379 3A8A                                          l8683 2218  
                                        l8771 2128                                          l8763 2100  
                                        l7973 3586                                          l7981 3696  
                                        l7893 2CE2                                          l8589 1952  
                                        l9821 268A                                          l9389 2AC6  
                                        l8693 1DBA                                          l8765 2106  
                                        l8773 2132                                          l9573 1CFA  
                                        l9637 014A                                          l7975 358C  
                                        l7895 2CF0                                          l7879 2C84  
                                        l9399 2AE2                                          l8695 1DD4  
                                        l8759 20F0                                          l9487 3842  
                                        l9591 1D5C                                          l9583 1D22  
                                        l7969 357A                                          l9841 26CE  
                                        l9833 26B2                                          l8777 214A  
                                        l8769 211A                                          l9593 1D64  
                                        l7987 36A8                                          l9763 2444  
                                        l8699 1DE2                                          l8795 2624  
                                        l9691 02C6                                          l7989 36AE  
                                        l9853 26F8                                          l9845 26DC  
                                        l9837 26C0                                          l9597 1D78  
                                        l9677 021C                                          l7999 36C0  
                                        l9855 26FC                                          l9791 24A4  
                                        l9783 2488                                          l9775 246C  
                                        l9695 02CE                                          l9679 0232  
                                        STR_1 FE8A                                          STR_2 FF01  
                                        l9849 26EA                                          l9857 2702  
                                        l9881 2A86                                          l9697 02D6  
                                        l9689 02B0                                          STR_3 FEA8  
                                        STR_4 FF2A                                          l9867 2A44  
                                        l9795 24B2                                          l9787 2496  
                                        l9779 247A                                          STR_5 FED6  
                                        STR_6 FF6F                                          l9893 2AB0  
                                        l9885 2A94                                          l9797 24B6  
                                        STR_7 FFF6                                          STR_8 FFF0  
                                        l9895 2AB4                                          l9799 24BC  
                                        STR_9 FFB1                                          l9889 2AA2  
                                        l9897 2ABA                                          u4530 2FF6  
                                        u6411 1DCA                                          u5460 2CB2  
                                        u6341 216E                                          u6270 18BC  
                                        u6361 218C                                          u7410 0E38  
                                        u6451 2088                                          u6470 20B4  
                                        u6391 1DAC                  __end_of_Activate_Buzzer_2KHz 3BB0  
                                        u5760 235E                                          u5690 1802  
                                        u5770 2394                                          u7418 0E3C  
                                        u6475 20AC                                          _RBPU 007F8F  
                                        u7567 3C94                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 0041                         _setup_heater_set_temp 0068  
                                _DS1621_tempC 0043                                  _DS1621_tempF 0045  
                       _setup_heater_set_text 00C8                           ??_Deactivate_Buzzer 0011  
                                        _date 008B                                          _main 0D16  
                                        _font FC9D       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 005F                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 3CBC                              __end_of_I2C_Read 3592  
                                        _time 00AF                                          _year 006E  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 0081                                          _volt 00E7  
                            __end_of_I2C_Stop 3BD4                        ?_DS3231_Turn_Off_Alarm 0001  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                              _Monitor_Heater 381A                               __end_of_Do_Init 328C  
                                 _Do_Beep_Bad 3C66                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002A                               __end_of_i2cNack 3CC6  
                                ___param_bank 000010                                  ___ftmul@sign 002B  
     Update_Setup_Screen_Cursor_Forward@field 002E                         ??_Set_Alarm_RGB_Color 0011  
                                ___fttol@exp1 003A                     ??_DS3231_Write_Alarm_Time 0041  
                       __size_of_Do_Beep_Good 000E                                  _Turn_Off_Fan 3CA8  
                                ___fttol@lval 0036               __size_of_Exit_Setup_Heater_Temp 0010  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 1700  
                            __end_of_INT1_isr 3CDA                                         l10001 0D2C  
                                       l10015 0DA4                              __end_of_INT2_isr 3CFA  
                                       l10051 0EBC                                         l10043 0EA8  
                                       l10035 0E88                                         l10055 0EC6  
                                       l10047 0EB2                                         l10039 0E9E  
                                       l10059 0ECC                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 3CE2                               ??_do_update_pwm 003B  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 3BC2                                         ?_main 0001  
                             __end_of___awdiv 2A30                               drawCircle@ddF_x 0026  
                                       STR_10 FFE0                               drawCircle@ddF_y 0028  
                                       STR_11 FFAB                                         STR_20 FFEE  
                                       STR_12 FFC0                                         STR_21 FFEA  
                                       STR_13 FF7C                                         STR_22 FFEE  
                                       STR_14 FFD9                                         STR_30 FFB6  
                                       STR_15 FFF9                                         STR_31 FF5F  
                                       STR_23 FF16                                         STR_16 FFFC  
                                       STR_24 FFC9                                         STR_32 FEEC  
                                       STR_17 FFE5                                         STR_25 FFD1  
                                       STR_33 FF89                                         STR_34 FFB1  
                                       STR_26 FFB1                                         STR_18 FFF2  
                                       STR_35 FFE0                                         STR_19 FFEA  
                                       STR_27 FFA0                                         STR_28 FED7  
                                       STR_36 FF4F                               __end_of___awmod 2E86  
                                       STR_29 FF95                                         STR_37 FEC0  
                                       STR_38 FF3E                               __end_of___ftdiv 2240  
                             __end_of___ftmul 1E94                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___fttol 215E                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                             __end_of___lwdiv 3234                               __end_of___lwmod 34B6  
                                       i2l290 16FE                                         i2l278 2C3A  
                             ___awdiv@counter 001B                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                       __end_of_Wait_Half_Sec 3A0E                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 35D4  
                                       _Rcmd1 1970                                         _Rcmd3 1F86  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _i2cHighSda 3CEA  
                                  _i2cHighScl 3C90                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FE82                                         _color 00EE  
                                       _font2 FD9C                                         _found 005E  
                             __end_of_isdigit 3990                                         _tempC 00D9  
                                       _tempF 00DD                                         _month 0061  
                               ___ftpack@sign 0015                                         _putch 3C74  
                           __end_of_I2C_Start 3BE6                             __end_of_I2C_Write 36CE  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                      __end_of_Monitor_Heater 384A                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 3C58  
             __size_of_check_for_button_input 0090                         __end_of_Go_Next_Field 3A92  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                             __initialization 2E86                                 ??_Set_RPM_RGB 0013  
                                __end_of_main 0EEE                                  __end_of_font FD9C  
                    ?_Do_Save_New_Heater_Temp 0001                  __end_of_Decrease_Heater_Temp 3B40  
                            __end_of_Init_ADC 3C90                              __end_of_Rcmd2red 3652  
                          _Select_Alarm_Field 0052                                        ??_main 013E  
                               ___fttol@sign1 0035                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 3B9E  
     I2C_Write_Address_Write_One_Byte@Address 0013                         __end_of_Go_Prev_Field 3A7A  
                   ??_TFT_GreenTab_Initialize 001D                   ?_Update_Setup_Heater_Screen 0001  
                  ??_Update_Setup_Time_Screen 0041                                _Init_Interrupt 35D4  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                         _In_Alarm_Time_Setup 00F7                                     I2C_Read@n 0012  
                 DS3231_Turn_Off_Alarm@Device 001F                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                      _Exit_Setup_Heater_Temp 3C18                            __size_of_i2cLowSda 000A  
                          __size_of_i2cLowScl 0008                              __end_of___awtoft 370A  
                                      _HEATER 004E                                        ?_putch 0001  
                            __end_of___ftpack 258C                              __end_of___lbtoft 396E  
                                      _DC_Txt 00D1                 __size_of_Increase_Heater_Temp 0014  
                                   ??_Do_Init 0017                                        i2l7005 16B0  
                                      i2l7015 16CE                                        i2l7025 16DC  
                                      i2l7019 16D8                                        i2l7511 2C26  
                                      i2l7515 2C30                                        i2l7507 2C1C  
                                      i2l6951 15B6                                        i2l6961 15E4  
                                      i2l6973 160C                                        i2l6991 1650  
                                      i2l6967 1602                                        i2l6993 1656  
                                      i2l6985 1634                                        i2l6979 162A  
                                      i2l6997 165A                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0018                           __size_of_TIMER1_isr 000C  
                                      _SPBRGH 000FB0                               ?_Monitor_Heater 0001  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00CD                              _force_nec_state0 3CFA  
                            __end_of_delay_ms 3382                                        _i2cAck 3BE6  
            ??_Initialize_Setup_Heater_Screen 0041               ?_Initialize_Setup_Heater_Screen 0001  
                __size_of_Go_Prev_Alarm_Field 0018                              __end_of_fillRect 354A  
                            __end_of_drawChar 1856                            __size_of_OpenUSART 0070  
                                      ___ftge 2904                   __end_of_Increase_Alarm_Time 3500  
                        DS3231_Init@control_E 0019                      __size_of_Activate_Buzzer 0012  
                                      ___wmul 38FA                                     ??___awdiv 001B  
                            __end_of_drawtext 1970                                     ??___awmod 003F  
                                   ??___ftdiv 0032                                    _Test_Alarm 1C98  
                                   ??___ftmul 0023                                     ??___fttol 0030  
                                      _chkisr 0008                                     ??___lwdiv 0015  
                                      _array1 011F                                     ??___lwmod 001C  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 00F2                 __end_of_Exit_Setup_Alarm_Time 3C38  
                                      clear_0 2E8C                                        clear_1 2E98  
                            ___awdiv@quotient 001D                                        _minute 0060  
                                      _second 0063                               ___awmod@divisor 003D  
                        _Activate_Buzzer_2KHz 3B9E                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 003F  
                                      _printf 09BC                                  drawtext@size 0040  
                             ??_Increase_Time 0041                                        _strcpy 37E8  
                                      _strlen 3652                         ___ftmul@f3_as_product 0027  
                      __end_of_Init_Interrupt 3614                           __end_of_Set_RPM_RGB 3048  
                        __end_of_get_full_ADC 3948                        _check_for_button_input 2B54  
                            _Do_Save_New_Time 3AF0                                  __pdataCOMRAM 006F  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                        get_duty_cycle@set_temp 0013  
                                   ?_I2C_Stop 0001                                  __mediumconst FC9C  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 39F0  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                              __end_of_spiwrite 3B54  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 264E                                    __accesstop 0080  
                     __end_of__initialization 2EF0                              ??_get_duty_cycle 0015  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0064  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 0065  
                          _setup_alarm_second 0066                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002C               __end_of_Do_Save_New_Heater_Temp 3B2C  
                                  ___ftdiv@f2 002F                                    ___ftdiv@f3 0036  
                                  ___awtoft@c 0019                                    ___lbtoft@c 001C  
                         _Go_Next_Alarm_Field 3AAA                                    ___ftmul@f1 001D  
                                  ___ftmul@f2 0020                                    ___fttol@f1 002C  
                               __end_of_Rcmd1 1A80                                 __end_of_Rcmd3 2078  
                              __pcstackCOMRAM 0001                 DS3231_Turn_On_Alarm@Address_E 001B  
               DS3231_Turn_On_Alarm@Address_F 001C                                  __pidataBANK0 3174  
                                __pidataBANK1 3782                                 __end_of_font2 FE78  
                           __end_of_i2cLowSda 3CD0                             __end_of_i2cLowScl 3CEA  
                        ?_Do_Setup_Alarm_Time 0001                                 __end_of_putch 3C82  
                       ?_Activate_Buzzer_2KHz 0001                        _Do_Save_New_Alarm_Time 3AC2  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0134  
                                dec_2_bcd@dec 0136                        __size_of_Decrease_Time 0090  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  ??_I2C_Init 0015                                    ??_I2C_Read 0011  
                                _alarm_minute 0057                                  _alarm_second 0058  
                          __size_of_clr_alarm 002C              ??_Update_Setup_Alarm_Time_Screen 0041  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 32DE  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 2FDC  
                                     ??_putch 0011                          _Decrease_Heater_Temp 3B2C  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 00E3  
                            _setup_alarm_hour 0064                                     ?_Init_ADC 0001  
                            _setup_alarm_time 0094          __end_of_Initialize_Setup_Time_Screen 1B8C  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 1A80  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                         __end_of_Toggle_Heater 3B7A  
                          __size_of_init_UART 0014                               spiwrite@spidata 0012  
                                  _alarm_date 0055                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 00EC                                    _alarm_hour 0056  
                                  _alarm_time 0082                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0064  
                          __CFG_CCP2MX$PORTBE 000000                                 ??_Turn_On_Fan 003E  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
         __size_of_Update_Setup_Heater_Screen 00A2                    DS3231_Turn_On_Alarm@Device 001F  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                   _Set_RPM_RGB 2FDC  
                                 ?_Test_Alarm 0001                         ??_Do_Setup_Alarm_Time 0041  
                                     ?_chkisr 0001                               _heater_set_temp 006F  
                      __size_of_setAddrWindow 004E                             __end_of_bcd_2_dec 38D0  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 00CA  
                                ??_TIMER1_isr 0001                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 0041                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                  I2C_Write@n 0012                                       ?_printf 001D  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 3110                             ??_Activate_Buzzer 0011  
                                  _fillScreen 3A2C                                       _MATCHED 00EA  
                       __end_of_Update_Screen 063C                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 125C                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00C3                         __end_of_fillRectangle 23FC  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 3234                      _I2C_Write_Cmd_Write_Data 39D0  
                  __end_of_I2C_Write_Cmd_Only 3A62                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 2AC4                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2AC4                                ??_Wait_One_Sec 0011  
                                     _i2cNack 3CBC                            __end_of_TIMER1_isr 3CA8  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3C48                   __end_of_Set_Alarm_RGB_Color 2F6C  
                                   _I2C_Start 3BD4                                     _I2C_Write 3690  
                           ??_Exit_Time_Setup 0041                               __size_of_i2cAck 0012  
                                     __Hparam 0000                             __end_of_clr_alarm 38A6  
                                 Test_Alarm@i 003E                                       __Lparam 0000  
                         __end_of_DS1621_Init 3A2C                           __end_of_DS3231_Init 27C4  
                           __end_of_drawPixel 387A                         __end_of_drawFastVLine 2CFC  
                             __size_of___ftge 0096                                       ___awdiv 299A  
                                     ___awmod 2E04                                       ___ftdiv 215E  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 1D9C                                       ___fttol 2078  
                                     ___lwdiv 31D8                                       ___lwmod 346A  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 2C6C  
                                   ?_spiwrite 0001                                       __pcinit 2E86  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 3592                                       __ptext0 0D16  
                                     __ptext1 3592                                       __ptext2 001C  
                                     __ptext3 3B68                                       __ptext4 1C98  
                                     __ptext5 3048                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 3922                                       __ptext7 36CE  
                                     __ptext8 387A                                       __ptext9 2EFA  
                             __size_of_printf 035A                             __end_of_init_UART 3B68  
                         __end_of_Turn_On_Fan 3C08                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FE8A                      __end_of_force_nec_state0 3D02  
                                   _T1CONbits 000FCD                                       _dpowers FE78  
                       __end_of_do_update_pwm 264E                                       _isdigit 396E  
                       _Activate_Buzzer_500Hz 3BB0                              ___awmod@dividend 003B  
                                  _duty_cycle 005D                       ?_Exit_Setup_Heater_Temp 0001  
                         _Go_Prev_Alarm_Field 3A92                             __end_of_read_volt 30AC  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 3AF0  
            __size_of_Do_Save_New_Heater_Temp 0014                                 drawtext@_text 003A  
                               drawtext@color 003C                              ??_Monitor_Heater 003E  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 3B8C                             _DS3231_Write_Time 2866  
                               _setAddrWindow 33D0                                __pintcode_body 2BE4  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 2EF0                                 _Do_Setup_Time 23FC  
                                   _INT1_flag 00F6                           __size_of_Test_Alarm 0104  
                                   _INT2_flag 004F                                    ??_drawtext 00FB  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FC9C  
                   __size_of_DS3231_Read_Time 0064                                       int_func 2BE4  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 0138  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0021                      __end_of_Do_Save_New_Time 3B04  
                                _get_full_ADC 3922                           ??_DS3231_Write_Time 0041  
                        ?_Go_Prev_Alarm_Field 0001                       check_for_button_input@i 003A  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 0080  
                      __size_of_Wait_Half_Sec 001E                          _DS3231_Turn_On_Alarm 328C  
                                   _RCSTAbits 000FAB                                       printf@c 0038  
                                     printf@f 001D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                  __end_of_Increase_Heater_Temp 3B18  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                                   _PORTAbits 000F80                              drawtext@cursor_x 013A  
                            drawtext@cursor_y 0139                                     _PORTBbits 000F81  
                                   _PORTDbits 000F83                                     _PORTEbits 000F84  
                            I2C_Write@outByte 0011        __end_of_Initialize_Setup_Heater_Screen 1F86  
     __size_of_Initialize_Setup_Heater_Screen 00F2                _Initialize_Setup_Heater_Screen 1E94  
                                  _setup_date 009D                                   ?_fillScreen 0024  
              __end_of_Exit_Setup_Heater_Temp 3C28                                    _setup_hour 0069  
                                  _setup_time 00A6                                    _setup_year 006D  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004C  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 2904  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISCbits 000F94                                     _TRISDbits 000F95  
                      __size_of_Go_Next_Field 0018        I2C_Write_Address_Read_One_Byte@Address 0014  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                      ??_Decrease_Heater_Temp 0041                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                          _In_Heater_Temp_Setup 00F8  
                            drawtext@textsize 0135                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 3A0E  
                                 _DS3231_Init 270C                                   ___ftdiv@exp 0039  
                                 printf@width 0036                                     _TXSTAbits 000FAC  
                    Set_Alarm_RGB_Color@color 0011                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 0172                             __size_of_INT1_isr 000A  
                           __size_of_INT2_isr 0008                                __end_of_i2cAck 3BF8  
                                 ___ftmul@exp 0026                        __size_of_Go_Prev_Field 0018  
              ??_Initialize_Setup_Time_Screen 0041                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 000E                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 3BF8                __end_of_check_for_button_input 2BE4  
                            ??_Init_Interrupt 0011            Update_Setup_Heater_Screen@dc_char1 00FD  
          Update_Setup_Heater_Screen@dc_char2 00FE            Update_Setup_Heater_Screen@dc_char3 00FF  
                          __end_of_i2cHighSda 3CF2                                __end_of___ftge 299A  
                          __end_of_i2cHighScl 3C9C                                __end_of___wmul 3922  
                               delay_ms@count 001B                                    _write_data 3C38  
                               __pidataCOMRAM 3D02                                __end_of_chkisr 2C74  
                    ?_TFT_GreenTab_Initialize 0001                                   _I2C_ReStart 3ADA  
                                  drawtext@bg 003E                         _Exit_Setup_Alarm_Time 3C28  
                      ?_Activate_Buzzer_500Hz 0001                                     _Nec_code1 0050  
                                   _i2cLowSda 3CC6                          _Do_Setup_Heater_Temp 2A30  
                                   _i2cLowScl 3CE2                  __size_of_Increase_Alarm_Time 004A  
                        __end_of_Wait_One_Sec 39D0                                __end_of_printf 0D16  
                       __end_of_Increase_Time 2D80                                __end_of_strcpy 381A  
                              __end_of_strlen 3690                                     _Nec_state 0051  
                         start_initialization 2E86                                 _Wait_Half_Sec 39F0  
                      Update_Screen@neg_tempF 013B                               ??_Decrease_Time 0041  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 2E04                                     _OpenUSART 2F6C  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 3330                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 341E  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3ADA                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3A7A                               _Activate_Buzzer 3B7A  
                                    ??___ftge 0017                                      ??___wmul 0015  
                                ?_Set_RPM_RGB 0011                                  ??_Test_Alarm 003E  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 0080                                   __pdataBANK1 0100  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 002B                              _DS1621_Read_Temp 3746  
                       ?_Do_Setup_Heater_Temp 0001                                      ??_strcpy 0015  
                                    ??_strlen 0013                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                           _Decrease_Alarm_Time 3382  
                                   _bcd_2_dec 38A6                             __size_of___awtoft 003C  
                           __size_of___ftpack 00C6                             __size_of___lbtoft 0026  
                              ?_Wait_Half_Sec 0001                       _Do_Save_New_Heater_Temp 3B18  
                                 __pbssCOMRAM 0041                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 009E                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00FB                                 __pcstackBANK1 0134  
                               _Go_Prev_Field 3A62                               ??_Do_Setup_Time 0041  
                                   _dec_2_bcd 30AC                               _Exit_Time_Setup 3C08  
                                 ??_LCD_Reset 001D                                  _isdigit$2894 0012  
                           __size_of_delay_ms 0052                                 _Heater_SW_Txt 00D5  
                        _Increase_Heater_Temp 3B04                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 1D9C                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 3110                           _Heater_Set_Temp_Txt 00BE  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 011A                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 125C  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 10A8  
                 __end_of_Do_Setup_Alarm_Time 270C                                ?_Go_Next_Field 0001  
                            ___lwdiv@dividend 0011                                   I2C_Read@ack 0011  
                                   _bit_count 0059                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 38FA                                ??_Turn_Off_Fan 0011  
                               __pmediumconst FC9C                                      ?___awdiv 0017  
                                   __ptext100 3CA8                                     __ptext101 35D4  
                                   __ptext110 3BD4                                     __ptext102 3C82  
                                   __ptext111 354A                                     __ptext103 3CB2  
                                   __ptext120 3C9C                                     __ptext112 3CBC  
                                   __ptext104 3A0E                                     __ptext121 3CF2  
                                   __ptext113 3BE6                                     __ptext105 39D0  
                                   __ptext122 3CD0                                     __ptext114 3ADA  
                                   __ptext106 3A48                                     __ptext123 158E  
                                   __ptext115 3CC6                                     __ptext107 3746  
                                   __ptext124 3CFA                                     __ptext116 3CE2  
                                   __ptext108 3690                                     __ptext117 3CEA  
                                   __ptext109 3BC2                                     __ptext118 3C90  
                                    ?___awmod 003B                                      ?___ftdiv 002C  
                                    ?___ftmul 001D                                      ?___fttol 002C  
                     __size_of_get_duty_cycle 003C                                     _clr_alarm 387A  
                                   __tft_type 0054                                      ?___lwdiv 0011  
                          _I2C_Write_Cmd_Only 3A48                                      ?___lwmod 0018  
                 __end_of_Go_Next_Alarm_Field 3AC2                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 384A                                      ?_get_RPM 001F  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                      __size_of_Toggle_Heater 0012                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 3CB2                                      _I2C_Read 354A  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 3BC2  
                           _Initialize_Screen 063C                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                  ??_Update_Setup_Heater_Screen 0041  
                                   _init_UART 3B54                                    ?_dec_2_bcd 00FB  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE82                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0015                                __size_of_putch 000E  
                                   _read_volt 3048                         ?_Increase_Heater_Temp 0001  
    __end_of_I2C_Write_Address_Write_One_Byte 39B0     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 3990                       __end_of_Activate_Buzzer 3B8C  
                       ??_Decrease_Alarm_Time 0041                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0013                           ??_Initialize_Screen 0041  
                                _Select_Field 0053                                      _INT0_isr 158E  
                                    _INT1_isr 3CD0                                      _INT2_isr 3CF2  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0620  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 0137  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00F9  
                          ??_Do_Save_New_Time 0041                  __size_of_Set_Alarm_RGB_Color 0072  
                                  ?_clr_alarm 0001                         __size_of_Wait_One_Sec 0020  
                                   _setup_day 0067                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                        ??_Do_Setup_Heater_Temp 013B  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                   ??_Do_Save_New_Heater_Temp 0041                                    _ADCON0bits 000FC2  
                             ??_Wait_Half_Sec 0011                       __end_of_Exit_Time_Setup 3C18  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 09BC  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
               DS3231_Read_Alarm_Time@Address 0014                                  ??_fillScreen 0026  
            __size_of_DS3231_Write_Alarm_Time 0084                                  ??_drawCircle 0024  
                                  printf@flag 0035                                    printf@prec 0032  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 158E  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 37E8  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 37B6  
                                 _INTCON3bits 000FF0                                     copy_data0 2EB2  
                                   copy_data1 2ED2                                     drawtext@i 0137  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0134  
                                   drawtext@y 0039                                    ?_read_volt 003B  
                                    _Nec_code 00E3                                      _Init_ADC 3C82  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 1C98  
 __size_of_Initialize_Setup_Alarm_Time_Screen 010C          ??_Initialize_Setup_Alarm_Time_Screen 0041  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 1B8C  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 3614                              __size_of_Do_Init 0058  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                 _Toggle_Heater 3B68  
                                _Time_Elapsed 0047                           _Increase_Alarm_Time 34B6  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00E1  
                                _Wait_One_Sec 39B0                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00C2                                Wait_Half_Sec@k 0011  
                          __end_of_fillScreen 3A48                                      __Lrparam 0000  
                          __end_of_drawCircle 140A                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftmul 00F8                              __size_of___fttol 00E6  
                            __size_of___lwdiv 005C                                      _Volt_Txt 00B8  
                            __size_of___lwmod 004C                          __size_of_Set_RPM_RGB 006C  
                                    ___awtoft 36CE                                      ___ftpack 24C6  
                                    ___lbtoft 3948                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 0042  
                                 ??_bcd_2_dec 0011                          ?_Increase_Alarm_Time 0001  
                               _Update_Screen 001C                              __size_of_isdigit 0022  
                                    _delay_ms 3330                               ___lwdiv@divisor 0013  
                                 ??_dec_2_bcd 00FD                               ___lwdiv@counter 0017  
                                    __ptext10 2904                                      __ptext11 39F0  
                                    __ptext20 370A                                      __ptext12 328C  
                                    __ptext21 3BF8                                      __ptext13 32DE  
                                    __ptext30 2CFC                                      __ptext22 258C  
                                    __ptext14 270C                                      __ptext31 3A62  
                                    __ptext23 3948                                      __ptext15 3990  
                                    __ptext40 3B04                                      __ptext32 3A7A  
                                    __ptext24 2078                                      __ptext16 37B6  
                                    __ptext41 3C18                                      __ptext33 3C08  
                                    __ptext25 1D9C                                      __ptext17 3B7A  
                                    __ptext50 3A92                                      __ptext42 3B18  
                                    __ptext34 3AF0                                      __ptext26 215E  
                                    __ptext18 2FDC                                      __ptext51 10A8  
                                    __ptext43 3B2C                                      __ptext35 2866  
                                    __ptext27 24C6                                      __ptext19 381A  
                                    __ptext60 125C                                      __ptext52 3AAA  
                                    __ptext44 27C4                                      __ptext36 2AC4  
                                    __ptext28 23FC                                      __ptext61 38D0  
                                    __ptext53 0EEE                                      __ptext45 264E  
                                    __ptext37 140A                                      __ptext29 1A80  
                                    __ptext70 341E                                      __ptext62 1F86  
                                    __ptext54 3C28                                      __ptext46 2B54  
                                    __ptext38 2A30                                      __ptext71 3C58  
                                    __ptext63 3614                                      __ptext55 3AC2  
                                    __ptext47 38A6                                      __ptext39 1E94  
                                    __ptext80 3C74                                      __ptext72 3B9E  
                                    __ptext64 1970                                      __ptext56 063C  
                                    __ptext48 1B8C                                      __ptext81 396E  
                                    __ptext73 3C66                                      __ptext65 3B8C  
                                    __ptext57 37E8                                      __ptext49 34B6  
                                    __ptext90 33D0                                      __ptext82 346A  
                                    __ptext74 39B0                                      __ptext66 3330  
                                    __ptext58 3A2C                                      __ptext91 3C38  
                                    __ptext83 31D8                                      __ptext75 3CDA  
                                    __ptext67 2D80                                      __ptext59 2320  
                                    __ptext92 3C48                                      __ptext84 1856  
                                    __ptext76 3BB0                                      __ptext68 30AC  
                                    __ptext93 3B40                                      __ptext85 3652  
                                    __ptext77 3382                                      __ptext69 3110  
                                    __ptext94 38FA                                      __ptext86 1700  
                                    __ptext78 2240                                      __ptext95 2E04  
                                    __ptext87 3500                                      __ptext79 09BC  
                                    __ptext96 299A                                      __ptext88 2C74  
                                    __ptext97 3234                                      __ptext89 384A  
                                    __ptext98 3B54                                      __ptext99 2F6C  
                      ??_Increase_Heater_Temp 0041                                      _fillRect 3500  
                                    _drawChar 1700                          __end_of_Turn_Off_Fan 3CB2  
            __size_of_TFT_GreenTab_Initialize 002A                 __size_of_Decrease_Heater_Temp 0014  
  __end_of_Update_Setup_Screen_Cursor_Forward 10A8   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 0EEE                                      _colstart 005A  
                 __end_of_Go_Prev_Alarm_Field 3AAA                                      _drawtext 1856  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 2320                DS3231_Write_Alarm_Time@Address 0138  
                              ?_Toggle_Heater 0001                      __end_of_DS1621_Read_Temp 3782  
                            ?_Activate_Buzzer 0001                                 __size_of_main 01D8  
                               ??_Do_Beep_Bad 0013                       __size_of_Monitor_Heater 0030  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
               Update_Screen@neg_DS1621_tempC 013D                                _get_duty_cycle 370A  
                                 ??_clr_alarm 0012                                 _drawFastVLine 2C74  
                                   printf@idx 002F                                      _spiwrite 3B40  
                                   printf@val 0033                             DS3231_Init@Device 001A  
                                 ??_drawPixel 001B                                      _rowstart 0062  
                    __end_of_DS3231_Read_Time 3174                         ??_Increase_Alarm_Time 0041  
                  __size_of_Initialize_Screen 0380                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 3C66                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2            __end_of_Update_Setup_Heater_Screen 2866  
                  _Update_Setup_Heater_Screen 27C4                                 _do_update_pwm 258C  
                              OpenUSART@spbrg 0011                                   ??_init_UART 0014  
                                    isdigit@c 0013                __end_of_DS3231_Read_Alarm_Time 346A  
                                 ??_read_volt 003E                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                       __end_of_Decrease_Time 2B54                      _Update_Setup_Time_Screen 140A  
                            ___lwmod@dividend 0018                         __end_of_write_command 3C58  
                             fillScreen@color 0024                         _DS3231_Turn_Off_Alarm 32DE  
               DS3231_Write_Alarm_Time@Device 0137                       do_update_pwm@duty_cycle 0137  
                      __end_of_get_duty_cycle 3746                        __size_of_Increase_Time 0084  
                    _Select_Heater_Temp_Field 00FA                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 0041  
                              ?_drawFastVLine 0018                                      printf@ap 0030  
                    ??_Exit_Setup_Heater_Temp 0041                           __end_of_Do_Beep_Bad 3C74  
                                ??_write_data 0013                                    _TIMER1_isr 3C9C  
                               fillRect@color 0026                       _DS3231_Write_Alarm_Time 2D80  
                              ?_do_update_pwm 0001                               ___lwmod@divisor 001A  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                             ___lwmod@counter 001C                                  _setup_minute 006A  
                                _setup_second 006C                       __size_of_Init_Interrupt 0040  
                       __end_of_setAddrWindow 341E                         __end_of_Do_Setup_Time 24C6  
                          fillRectangle@color 001B                           _Set_Alarm_RGB_Color 2EFA  
                             ??_Toggle_Heater 0011                             do_update_pwm@dc_I 0138  
                           do_update_pwm@dc_f 0134                                 drawChar@color 0030  
                                 _setup_month 006B                                Set_RPM_RGB@rpm 0011  
                          __end_of_write_data 3C48                     __size_of_force_nec_state0 0008  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0039                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00B8  
                             ?_get_duty_cycle 0011                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 2320       __size_of_Update_Setup_Alarm_Time_Screen 00E0  
              _Update_Setup_Alarm_Time_Screen 2240  
